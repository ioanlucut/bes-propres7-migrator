/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { UUID } from "./basicTypes";
import { StringValue, UInt32Value } from "./google/protobuf/wrappers";
import {
  APIV1CaptureSettings,
  APIV1ClearGroup,
  APIV1Color,
  APIV1ErrorResponse,
  APIV1GroupDefinition,
  APIV1GroupMember,
  APIV1GroupMemberStatus,
  APIV1Identifier,
  APIV1Look,
  APIV1Macro,
  APIV1MediaPlaylistItem,
  APIV1Message,
  APIV1Message_APIV1MessageToken,
  APIV1Playlist,
  APIV1PlaylistAndItem,
  APIV1PlaylistItem,
  APIV1Presentation,
  APIV1PropData,
  APIV1ScreenConfig,
  APIV1SlideDisplayDetails,
  APIV1SlideIndex,
  APIV1StageLayoutMap,
  APIV1Theme,
  APIV1ThemeGroup,
  APIV1ThemeSlide,
  APIV1Timer,
  APIV1Timer_APIV1TimerCountdown,
  APIV1Timer_APIV1TimerCountdownToTime,
  APIV1Timer_APIV1TimerElapsed,
  APIV1TimerValue,
} from "./proApiV1BasicTypes";

export const protobufPackage = "rv.data";

export interface NetworkAPIV1 {
  action?: NetworkAPIV1_Action | undefined;
}

export interface NetworkAPIV1_Action {
  audioRequest?: NetworkAPIV1_APIV1AudioRequest | undefined;
  captureRequest?: NetworkAPIV1_APIV1CaptureRequest | undefined;
  clearingRequest?: NetworkAPIV1_APIV1ClearRequest | undefined;
  groupsRequest?: NetworkAPIV1_APIV1GroupsRequest | undefined;
  linkRequest?: NetworkAPIV1_APIV1LinkRequest | undefined;
  libraryRequest?: NetworkAPIV1_APIV1LibraryRequest | undefined;
  looksRequest?: NetworkAPIV1_APIV1LooksRequest | undefined;
  macroRequest?: NetworkAPIV1_APIV1MacroRequest | undefined;
  masksRequest?: NetworkAPIV1_APIV1MasksRequest | undefined;
  mediaRequest?: NetworkAPIV1_APIV1MediaRequest | undefined;
  messageRequest?: NetworkAPIV1_APIV1MessageRequest | undefined;
  miscellaneousRequest?: NetworkAPIV1_APIV1MiscellaneousRequest | undefined;
  playlistRequest?: NetworkAPIV1_APIV1PlaylistRequest | undefined;
  prerollRequest?: NetworkAPIV1_APIV1PrerollRequest | undefined;
  presentationRequest?: NetworkAPIV1_APIV1PresentationRequest | undefined;
  propRequest?: NetworkAPIV1_APIV1PropRequest | undefined;
  stageRequest?: NetworkAPIV1_APIV1StageRequest | undefined;
  statusRequest?: NetworkAPIV1_APIV1StatusRequest | undefined;
  themeRequest?: NetworkAPIV1_APIV1ThemeRequest | undefined;
  timerRequest?: NetworkAPIV1_APIV1TimerRequest | undefined;
  transportRequest?: NetworkAPIV1_APIV1TransportRequest | undefined;
  triggerRequest?: NetworkAPIV1_APIV1TriggerRequest | undefined;
  videoInputsRequest?: NetworkAPIV1_APIV1VideoInputsRequest | undefined;
  announcementRequest?: NetworkAPIV1_APIV1AnnouncementRequest | undefined;
  audioResponse?: NetworkAPIV1_APIV1AudioResponse | undefined;
  captureResponse?: NetworkAPIV1_APIV1CaptureResponse | undefined;
  clearingResponse?: NetworkAPIV1_APIV1ClearResponse | undefined;
  groupsResponse?: NetworkAPIV1_APIV1GroupsResponse | undefined;
  linkResponse?: NetworkAPIV1_APIV1LinkResponse | undefined;
  libraryResponse?: NetworkAPIV1_APIV1LibraryResponse | undefined;
  looksResponse?: NetworkAPIV1_APIV1LooksResponse | undefined;
  macroResponse?: NetworkAPIV1_APIV1MacroResponse | undefined;
  masksResponse?: NetworkAPIV1_APIV1MasksResponse | undefined;
  mediaResponse?: NetworkAPIV1_APIV1MediaResponse | undefined;
  messageResponse?: NetworkAPIV1_APIV1MessageResponse | undefined;
  miscellaneousResponse?: NetworkAPIV1_APIV1MiscellaneousResponse | undefined;
  playlistResponse?: NetworkAPIV1_APIV1PlaylistResponse | undefined;
  prerollResponse?: NetworkAPIV1_APIV1PrerollResponse | undefined;
  presentationResponse?: NetworkAPIV1_APIV1PresentationResponse | undefined;
  propResponse?: NetworkAPIV1_APIV1PropResponse | undefined;
  stageResponse?: NetworkAPIV1_APIV1StageResponse | undefined;
  statusResponse?: NetworkAPIV1_APIV1StatusResponse | undefined;
  themeResponse?: NetworkAPIV1_APIV1ThemeResponse | undefined;
  timerResponse?: NetworkAPIV1_APIV1TimerResponse | undefined;
  transportResponse?: NetworkAPIV1_APIV1TransportResponse | undefined;
  triggerResponse?: NetworkAPIV1_APIV1TriggerResponse | undefined;
  videoInputsResponse?: NetworkAPIV1_APIV1VideoInputsResponse | undefined;
  announcementResponse?: NetworkAPIV1_APIV1AnnouncementResponse | undefined;
  errorResponse?: APIV1ErrorResponse | undefined;
  updateIdentifier?: string | undefined;
}

export interface NetworkAPIV1_APIV1AnnouncementRequest {
  activeTimelineOperation?: NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation | undefined;
  activeTimelineStatus?: NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus | undefined;
  active?: NetworkAPIV1_APIV1AnnouncementRequest_Active | undefined;
  slideIndex?: NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex | undefined;
  activeFocus?: NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus | undefined;
  activeTrigger?: NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger | undefined;
  activeNextTrigger?: NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger | undefined;
  activePreviousTrigger?: NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger | undefined;
  activeIndexTrigger?: NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger | undefined;
}

export interface NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation {
  operation: NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation;
}

export enum NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation {
  play = 0,
  pause = 1,
  rewind = 2,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperationFromJSON(
  object: any,
): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation {
  switch (object) {
    case 0:
    case "play":
      return NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation.play;
    case 1:
    case "pause":
      return NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation.pause;
    case 2:
    case "rewind":
      return NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation.rewind;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperationToJSON(
  object: NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation.play:
      return "play";
    case NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation.pause:
      return "pause";
    case NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation.rewind:
      return "rewind";
    case NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus {
}

export interface NetworkAPIV1_APIV1AnnouncementRequest_Active {
}

export interface NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex {
}

export interface NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus {
}

export interface NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger {
}

export interface NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger {
}

export interface NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger {
}

export interface NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger {
  index: number;
}

export interface NetworkAPIV1_APIV1AudioRequest {
  playlists?: NetworkAPIV1_APIV1AudioRequest_Playlists | undefined;
  playlist?: NetworkAPIV1_APIV1AudioRequest_Playlist | undefined;
  playlistUpdates?: NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates | undefined;
  playlistFocused?: NetworkAPIV1_APIV1AudioRequest_EmptyMessage | undefined;
  playlistActive?: NetworkAPIV1_APIV1AudioRequest_EmptyMessage | undefined;
  playlistNextFocus?: NetworkAPIV1_APIV1AudioRequest_EmptyMessage | undefined;
  playlistPreviousFocus?: NetworkAPIV1_APIV1AudioRequest_EmptyMessage | undefined;
  playlistActiveFocus?: NetworkAPIV1_APIV1AudioRequest_EmptyMessage | undefined;
  playlistIdFocus?: NetworkAPIV1_APIV1AudioRequest_IdentifierMessage | undefined;
  playlistFocusedTrigger?: NetworkAPIV1_APIV1AudioRequest_EmptyMessage | undefined;
  playlistActiveTrigger?: NetworkAPIV1_APIV1AudioRequest_EmptyMessage | undefined;
  playlistIdTrigger?: NetworkAPIV1_APIV1AudioRequest_IdentifierMessage | undefined;
  playlistFocusedNextTrigger?: NetworkAPIV1_APIV1AudioRequest_EmptyMessage | undefined;
  playlistFocusedPreviousTrigger?: NetworkAPIV1_APIV1AudioRequest_EmptyMessage | undefined;
  playlistFocusedIdTrigger?: NetworkAPIV1_APIV1AudioRequest_IdentifierMessage | undefined;
  playlistActiveNextTrigger?: NetworkAPIV1_APIV1AudioRequest_EmptyMessage | undefined;
  playlistActivePreviousTrigger?: NetworkAPIV1_APIV1AudioRequest_EmptyMessage | undefined;
  playlistActiveIdTrigger?: NetworkAPIV1_APIV1AudioRequest_IdentifierMessage | undefined;
  playlistIdNextTrigger?: NetworkAPIV1_APIV1AudioRequest_IdentifierMessage | undefined;
  playlistIdPreviousTrigger?: NetworkAPIV1_APIV1AudioRequest_IdentifierMessage | undefined;
}

export interface NetworkAPIV1_APIV1AudioRequest_Playlists {
}

export interface NetworkAPIV1_APIV1AudioRequest_Playlist {
  id: string;
  start: number;
}

export interface NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates {
  id: string;
}

export interface NetworkAPIV1_APIV1AudioRequest_EmptyMessage {
}

export interface NetworkAPIV1_APIV1AudioRequest_IdentifierMessage {
  id: string;
}

export interface NetworkAPIV1_APIV1CaptureRequest {
  getStatus?: NetworkAPIV1_APIV1CaptureRequest_Status | undefined;
  operation?: NetworkAPIV1_APIV1CaptureRequest_Operation | undefined;
  getSettings?: NetworkAPIV1_APIV1CaptureRequest_GetSettings | undefined;
  setSettings?: NetworkAPIV1_APIV1CaptureRequest_SetSettings | undefined;
  getEncodings?: NetworkAPIV1_APIV1CaptureRequest_Encodings | undefined;
}

export interface NetworkAPIV1_APIV1CaptureRequest_Status {
}

export interface NetworkAPIV1_APIV1CaptureRequest_Operation {
  operation: NetworkAPIV1_APIV1CaptureRequest_Operation_CaptureOperation;
}

export enum NetworkAPIV1_APIV1CaptureRequest_Operation_CaptureOperation {
  start = 0,
  stop = 1,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1CaptureRequest_Operation_CaptureOperationFromJSON(
  object: any,
): NetworkAPIV1_APIV1CaptureRequest_Operation_CaptureOperation {
  switch (object) {
    case 0:
    case "start":
      return NetworkAPIV1_APIV1CaptureRequest_Operation_CaptureOperation.start;
    case 1:
    case "stop":
      return NetworkAPIV1_APIV1CaptureRequest_Operation_CaptureOperation.stop;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1CaptureRequest_Operation_CaptureOperation.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1CaptureRequest_Operation_CaptureOperationToJSON(
  object: NetworkAPIV1_APIV1CaptureRequest_Operation_CaptureOperation,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1CaptureRequest_Operation_CaptureOperation.start:
      return "start";
    case NetworkAPIV1_APIV1CaptureRequest_Operation_CaptureOperation.stop:
      return "stop";
    case NetworkAPIV1_APIV1CaptureRequest_Operation_CaptureOperation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1CaptureRequest_GetSettings {
}

export interface NetworkAPIV1_APIV1CaptureRequest_SetSettings {
  settings: APIV1CaptureSettings | undefined;
}

export interface NetworkAPIV1_APIV1CaptureRequest_Encodings {
  type: NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination;
}

export enum NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination {
  disk = 0,
  rtmp = 1,
  resi = 2,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestinationFromJSON(
  object: any,
): NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination {
  switch (object) {
    case 0:
    case "disk":
      return NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination.disk;
    case 1:
    case "rtmp":
      return NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination.rtmp;
    case 2:
    case "resi":
      return NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination.resi;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestinationToJSON(
  object: NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination.disk:
      return "disk";
    case NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination.rtmp:
      return "rtmp";
    case NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination.resi:
      return "resi";
    case NetworkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestination.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1ClearRequest {
  clearLayer?: NetworkAPIV1_APIV1ClearRequest_ClearLayer | undefined;
  createGroup?: NetworkAPIV1_APIV1ClearRequest_CreateGroup | undefined;
  getGroup?: NetworkAPIV1_APIV1ClearRequest_GetGroup | undefined;
  putGroup?: NetworkAPIV1_APIV1ClearRequest_PutGroup | undefined;
  getGroupIcon?: NetworkAPIV1_APIV1ClearRequest_GetGroupIcon | undefined;
  putGroupIcon?: NetworkAPIV1_APIV1ClearRequest_PutGroupIcon | undefined;
  deleteGroup?: NetworkAPIV1_APIV1ClearRequest_DeleteGroup | undefined;
  triggerGroup?: NetworkAPIV1_APIV1ClearRequest_TriggerGroup | undefined;
  getGroups?: NetworkAPIV1_APIV1ClearRequest_GetGroups | undefined;
}

export interface NetworkAPIV1_APIV1ClearRequest_ClearLayer {
  layer: NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType;
}

export enum NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType {
  audio = 0,
  props = 1,
  messages = 2,
  announcements = 3,
  slide = 4,
  media = 5,
  video_input = 6,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType {
  switch (object) {
    case 0:
    case "audio":
      return NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.audio;
    case 1:
    case "props":
      return NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.props;
    case 2:
    case "messages":
      return NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.messages;
    case 3:
    case "announcements":
      return NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.announcements;
    case 4:
    case "slide":
      return NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.slide;
    case 5:
    case "media":
      return NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.media;
    case 6:
    case "video_input":
      return NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.video_input;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerTypeToJSON(
  object: NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.audio:
      return "audio";
    case NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.props:
      return "props";
    case NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.messages:
      return "messages";
    case NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.announcements:
      return "announcements";
    case NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.slide:
      return "slide";
    case NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.media:
      return "media";
    case NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.video_input:
      return "video_input";
    case NetworkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1ClearRequest_CreateGroup {
  group: APIV1ClearGroup | undefined;
}

export interface NetworkAPIV1_APIV1ClearRequest_GetGroup {
  id: string;
}

export interface NetworkAPIV1_APIV1ClearRequest_PutGroup {
  id: string;
  group: APIV1ClearGroup | undefined;
}

export interface NetworkAPIV1_APIV1ClearRequest_GetGroupIcon {
  id: string;
}

export interface NetworkAPIV1_APIV1ClearRequest_PutGroupIcon {
  id: string;
  contentType: string;
  icon: Uint8Array;
}

export interface NetworkAPIV1_APIV1ClearRequest_DeleteGroup {
  id: string;
}

export interface NetworkAPIV1_APIV1ClearRequest_TriggerGroup {
  id: string;
}

export interface NetworkAPIV1_APIV1ClearRequest_GetGroups {
}

export interface NetworkAPIV1_APIV1GroupsRequest {
  groupsRequest?: NetworkAPIV1_APIV1GroupsRequest_GroupsRequest | undefined;
  triggerGroup?: NetworkAPIV1_APIV1GroupsRequest_TriggerGroup | undefined;
}

export interface NetworkAPIV1_APIV1GroupsRequest_GroupsRequest {
}

export interface NetworkAPIV1_APIV1GroupsRequest_TriggerGroup {
  id: string;
}

export interface NetworkAPIV1_APIV1LinkRequest {
  heartbeat?: NetworkAPIV1_APIV1LinkRequest_Heartbeat | undefined;
  status?: NetworkAPIV1_APIV1LinkRequest_Status | undefined;
  addMember?: NetworkAPIV1_APIV1LinkRequest_AddMember | undefined;
  removeMember?: NetworkAPIV1_APIV1LinkRequest_RemoveMember | undefined;
}

export interface NetworkAPIV1_APIV1LinkRequest_Heartbeat {
  port: number;
  ifModifiedSince: string;
}

export interface NetworkAPIV1_APIV1LinkRequest_Status {
}

export interface NetworkAPIV1_APIV1LinkRequest_AddMember {
  groupDefinition?: APIV1GroupDefinition | undefined;
  memberDetails?: APIV1GroupMember | undefined;
}

export interface NetworkAPIV1_APIV1LinkRequest_RemoveMember {
  memberDetails: APIV1GroupMember | undefined;
}

export interface NetworkAPIV1_APIV1LibraryRequest {
  libraries?: NetworkAPIV1_APIV1LibraryRequest_Libraries | undefined;
  library?: NetworkAPIV1_APIV1LibraryRequest_Library | undefined;
  trigger?: NetworkAPIV1_APIV1LibraryRequest_Trigger | undefined;
}

export interface NetworkAPIV1_APIV1LibraryRequest_Libraries {
}

export interface NetworkAPIV1_APIV1LibraryRequest_Library {
  id: string;
}

export interface NetworkAPIV1_APIV1LibraryRequest_Trigger {
  libraryId: string;
  presentationId: string;
  index: number;
}

export interface NetworkAPIV1_APIV1LooksRequest {
  looks?: NetworkAPIV1_APIV1LooksRequest_Looks | undefined;
  createLook?: NetworkAPIV1_APIV1LooksRequest_CreateLook | undefined;
  getCurrentLook?: NetworkAPIV1_APIV1LooksRequest_GetCurrentLook | undefined;
  putCurrentLook?: NetworkAPIV1_APIV1LooksRequest_PutCurrentLook | undefined;
  getLook?: NetworkAPIV1_APIV1LooksRequest_GetLook | undefined;
  putLook?: NetworkAPIV1_APIV1LooksRequest_PutLook | undefined;
  deleteLook?: NetworkAPIV1_APIV1LooksRequest_DeleteLook | undefined;
  triggerLook?: NetworkAPIV1_APIV1LooksRequest_TriggerLook | undefined;
}

export interface NetworkAPIV1_APIV1LooksRequest_Looks {
}

export interface NetworkAPIV1_APIV1LooksRequest_CreateLook {
  look: APIV1Look | undefined;
}

export interface NetworkAPIV1_APIV1LooksRequest_GetCurrentLook {
}

export interface NetworkAPIV1_APIV1LooksRequest_PutCurrentLook {
  look: APIV1Look | undefined;
}

export interface NetworkAPIV1_APIV1LooksRequest_GetLook {
  id: string;
}

export interface NetworkAPIV1_APIV1LooksRequest_PutLook {
  id: string;
  look: APIV1Look | undefined;
}

export interface NetworkAPIV1_APIV1LooksRequest_DeleteLook {
  id: string;
}

export interface NetworkAPIV1_APIV1LooksRequest_TriggerLook {
  id: string;
}

export interface NetworkAPIV1_APIV1MacroRequest {
  macros?: NetworkAPIV1_APIV1MacroRequest_Macros | undefined;
  getMacro?: NetworkAPIV1_APIV1MacroRequest_GetMacro | undefined;
  putMacro?: NetworkAPIV1_APIV1MacroRequest_PutMacro | undefined;
  deleteMacro?: NetworkAPIV1_APIV1MacroRequest_DeleteMacro | undefined;
  triggerMacro?: NetworkAPIV1_APIV1MacroRequest_TriggerMacro | undefined;
}

export interface NetworkAPIV1_APIV1MacroRequest_Macros {
}

export interface NetworkAPIV1_APIV1MacroRequest_GetMacro {
  id: string;
}

export interface NetworkAPIV1_APIV1MacroRequest_PutMacro {
  id: string;
  nameChange: string;
  colorChange: APIV1Color | undefined;
}

export interface NetworkAPIV1_APIV1MacroRequest_DeleteMacro {
  id: string;
}

export interface NetworkAPIV1_APIV1MacroRequest_TriggerMacro {
  id: string;
}

export interface NetworkAPIV1_APIV1MasksRequest {
  masks?: NetworkAPIV1_APIV1MasksRequest_Masks | undefined;
  getMask?: NetworkAPIV1_APIV1MasksRequest_GetMask | undefined;
  getThumbnail?: NetworkAPIV1_APIV1MasksRequest_GetThumbnail | undefined;
}

export interface NetworkAPIV1_APIV1MasksRequest_Masks {
}

export interface NetworkAPIV1_APIV1MasksRequest_GetMask {
  id: string;
}

export interface NetworkAPIV1_APIV1MasksRequest_GetThumbnail {
  id: string;
  quality: number;
}

export interface NetworkAPIV1_APIV1MediaRequest {
  playlists?: NetworkAPIV1_APIV1MediaRequest_Playlists | undefined;
  getPlaylist?: NetworkAPIV1_APIV1MediaRequest_GetPlaylist | undefined;
  getPlaylistUpdates?: NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates | undefined;
  getThumbnail?: NetworkAPIV1_APIV1MediaRequest_GetThumbnail | undefined;
  playlistFocused?: NetworkAPIV1_APIV1MediaRequest_EmptyMessage | undefined;
  playlistActive?: NetworkAPIV1_APIV1MediaRequest_EmptyMessage | undefined;
  focus?: NetworkAPIV1_APIV1MediaRequest_FocusMessage | undefined;
  trigger?: NetworkAPIV1_APIV1MediaRequest_TriggerMessage | undefined;
}

export interface NetworkAPIV1_APIV1MediaRequest_Playlists {
}

export interface NetworkAPIV1_APIV1MediaRequest_GetPlaylist {
  id: string;
  start: number;
}

export interface NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates {
  id: string;
}

export interface NetworkAPIV1_APIV1MediaRequest_GetThumbnail {
  uuid: UUID | undefined;
  quality: number;
}

export interface NetworkAPIV1_APIV1MediaRequest_EmptyMessage {
}

export interface NetworkAPIV1_APIV1MediaRequest_FocusMessage {
  next?: NetworkAPIV1_APIV1MediaRequest_EmptyMessage | undefined;
  previous?: NetworkAPIV1_APIV1MediaRequest_EmptyMessage | undefined;
  active?: NetworkAPIV1_APIV1MediaRequest_EmptyMessage | undefined;
  id?: string | undefined;
}

export interface NetworkAPIV1_APIV1MediaRequest_TriggerMessage {
  focused?: NetworkAPIV1_APIV1MediaRequest_EmptyMessage | undefined;
  active?: NetworkAPIV1_APIV1MediaRequest_EmptyMessage | undefined;
  playlistId?: string | undefined;
  start?: NetworkAPIV1_APIV1MediaRequest_EmptyMessage | undefined;
  next?: NetworkAPIV1_APIV1MediaRequest_EmptyMessage | undefined;
  previous?: NetworkAPIV1_APIV1MediaRequest_EmptyMessage | undefined;
  mediaId?: string | undefined;
}

export interface NetworkAPIV1_APIV1MessageRequest {
  messages?: NetworkAPIV1_APIV1MessageRequest_Messages | undefined;
  createMessage?: NetworkAPIV1_APIV1MessageRequest_CreateMessage | undefined;
  getMessage?: NetworkAPIV1_APIV1MessageRequest_GetMessage | undefined;
  putMessage?: NetworkAPIV1_APIV1MessageRequest_PutMessage | undefined;
  deleteMessage?: NetworkAPIV1_APIV1MessageRequest_DeleteMessage | undefined;
  triggerMessage?: NetworkAPIV1_APIV1MessageRequest_TriggerMessage | undefined;
  clearMessage?: NetworkAPIV1_APIV1MessageRequest_ClearMessage | undefined;
}

export interface NetworkAPIV1_APIV1MessageRequest_Messages {
}

export interface NetworkAPIV1_APIV1MessageRequest_CreateMessage {
  message: APIV1Message | undefined;
}

export interface NetworkAPIV1_APIV1MessageRequest_GetMessage {
  id: string;
}

export interface NetworkAPIV1_APIV1MessageRequest_PutMessage {
  id: string;
  message: APIV1Message | undefined;
}

export interface NetworkAPIV1_APIV1MessageRequest_DeleteMessage {
  id: string;
}

export interface NetworkAPIV1_APIV1MessageRequest_TriggerMessage {
  id: string;
  tokens: APIV1Message_APIV1MessageToken[];
}

export interface NetworkAPIV1_APIV1MessageRequest_ClearMessage {
  id: string;
}

export interface NetworkAPIV1_APIV1MiscellaneousRequest {
  findMyMouse?: NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse | undefined;
}

export interface NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse {
}

export interface NetworkAPIV1_APIV1PlaylistRequest {
  playlists?: NetworkAPIV1_APIV1PlaylistRequest_Playlists | undefined;
  createPlaylist?: NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist | undefined;
  getPlaylist?: NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist | undefined;
  putPlaylist?: NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist | undefined;
  postPlaylist?: NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist | undefined;
  getActivePlaylist?: NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist | undefined;
  focused?: NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist | undefined;
  nextFocus?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  previousFocus?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  activePresentationFocus?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  activeAnnouncementFocus?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  focusedTrigger?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  activePresentationTrigger?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  activeAnnouncementTrigger?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  focusedNextTrigger?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  focusedPreviousTrigger?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  activePresentationNextTrigger?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  activeAnnouncementNextTrigger?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  activePresentationPreviousTrigger?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  activeAnnouncementPreviousTrigger?: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage | undefined;
  idFocus?: NetworkAPIV1_APIV1PlaylistRequest_IdMessage | undefined;
  idTrigger?: NetworkAPIV1_APIV1PlaylistRequest_IdMessage | undefined;
  idNextTrigger?: NetworkAPIV1_APIV1PlaylistRequest_IdMessage | undefined;
  idPreviousTrigger?: NetworkAPIV1_APIV1PlaylistRequest_IdMessage | undefined;
  focusedIndexTrigger?: NetworkAPIV1_APIV1PlaylistRequest_IndexMessage | undefined;
  activePresentationIndexTrigger?: NetworkAPIV1_APIV1PlaylistRequest_IndexMessage | undefined;
  activeAnnouncementIndexTrigger?: NetworkAPIV1_APIV1PlaylistRequest_IndexMessage | undefined;
  idUpdates?: NetworkAPIV1_APIV1PlaylistRequest_IdMessage | undefined;
}

export interface NetworkAPIV1_APIV1PlaylistRequest_Playlists {
}

export interface NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist {
  name: string;
  type: NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistType;
}

export enum NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistType {
  group = 0,
  playlist = 1,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistType {
  switch (object) {
    case 0:
    case "group":
      return NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistType.group;
    case 1:
    case "playlist":
      return NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistType.playlist;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistTypeToJSON(
  object: NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistType.group:
      return "group";
    case NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistType.playlist:
      return "playlist";
    case NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist {
}

export interface NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist {
  id: string;
}

export interface NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist {
  id: string;
  items: APIV1PlaylistItem[];
}

export interface NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist {
  id: string;
  name: string;
  type: NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistType;
}

export enum NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistType {
  group = 0,
  playlist = 1,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistType {
  switch (object) {
    case 0:
    case "group":
      return NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistType.group;
    case 1:
    case "playlist":
      return NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistType.playlist;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistTypeToJSON(
  object: NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistType.group:
      return "group";
    case NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistType.playlist:
      return "playlist";
    case NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage {
}

export interface NetworkAPIV1_APIV1PlaylistRequest_IdMessage {
  id: string;
}

export interface NetworkAPIV1_APIV1PlaylistRequest_IndexMessage {
  index: number;
}

export interface NetworkAPIV1_APIV1PrerollRequest {
  prerollCue?: NetworkAPIV1_APIV1PrerollRequest_PrerollCue | undefined;
  prerollPlaylistItem?: NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem | undefined;
  prerollMediaItem?: NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem | undefined;
  prerollAudioItem?: NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem | undefined;
  prerollVideoInput?: NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput | undefined;
  prerollLibraryItem?: NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem | undefined;
  prerollNext?: NetworkAPIV1_APIV1PrerollRequest_PrerollNext | undefined;
  prerollPrevious?: NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious | undefined;
  activatePrerollItem?: NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem | undefined;
  cancelPrerollItem?: NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem | undefined;
}

export interface NetworkAPIV1_APIV1PrerollRequest_PrerollCue {
  index: number;
  prerollId: number;
}

export interface NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem {
  path: APIV1Identifier[];
  prerollId: number;
}

export interface NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem {
  path: APIV1Identifier[];
  prerollId: number;
}

export interface NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem {
  path: APIV1Identifier[];
  prerollId: number;
}

export interface NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput {
  id: string;
  prerollId: number;
}

export interface NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem {
  path: APIV1Identifier[];
  prerollId: number;
}

export interface NetworkAPIV1_APIV1PrerollRequest_PrerollNext {
  prerollId: number;
}

export interface NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious {
  prerollId: number;
}

export interface NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem {
  id: number;
  time: number;
}

export interface NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem {
  id: number;
}

export interface NetworkAPIV1_APIV1PresentationRequest {
  active?: NetworkAPIV1_APIV1PresentationRequest_Active | undefined;
  focused?: NetworkAPIV1_APIV1PresentationRequest_EmptyMessage | undefined;
  slideIndex?: NetworkAPIV1_APIV1PresentationRequest_SlideIndex | undefined;
  chordChart?: NetworkAPIV1_APIV1PresentationRequest_ChordChart | undefined;
  chordChartUpdates?: NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates | undefined;
  presentation?: NetworkAPIV1_APIV1PresentationRequest_Presentation | undefined;
  deletePresentation?: NetworkAPIV1_APIV1PresentationRequest_DeletePresentation | undefined;
  timelineOperation?: NetworkAPIV1_APIV1PresentationRequest_TimelineOperation | undefined;
  activePresentationTimelineOperation?:
    | NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation
    | undefined;
  focusedPresentationTimelineOperation?:
    | NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation
    | undefined;
  activePresentationTimelineStatus?: NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus | undefined;
  focusedPresentationTimelineStatus?:
    | NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus
    | undefined;
  thumbnail?: NetworkAPIV1_APIV1PresentationRequest_Thumbnail | undefined;
  focus?: NetworkAPIV1_APIV1PresentationRequest_FocusMessage | undefined;
  trigger?: NetworkAPIV1_APIV1PresentationRequest_TriggerMessage | undefined;
}

export interface NetworkAPIV1_APIV1PresentationRequest_Active {
}

export interface NetworkAPIV1_APIV1PresentationRequest_SlideIndex {
}

export interface NetworkAPIV1_APIV1PresentationRequest_ChordChart {
  quality: number;
}

export interface NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates {
}

export interface NetworkAPIV1_APIV1PresentationRequest_Presentation {
  uuid: UUID | undefined;
}

export interface NetworkAPIV1_APIV1PresentationRequest_DeletePresentation {
  uuid: UUID | undefined;
}

export interface NetworkAPIV1_APIV1PresentationRequest_TimelineOperation {
  uuid: UUID | undefined;
  operation: NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation;
}

export enum NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation {
  play = 0,
  pause = 1,
  rewind = 2,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperationFromJSON(
  object: any,
): NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation {
  switch (object) {
    case 0:
    case "play":
      return NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation.play;
    case 1:
    case "pause":
      return NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation.pause;
    case 2:
    case "rewind":
      return NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation.rewind;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperationToJSON(
  object: NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation.play:
      return "play";
    case NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation.pause:
      return "pause";
    case NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation.rewind:
      return "rewind";
    case NetworkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation {
  operation: NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation;
}

export enum NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation {
  play = 0,
  pause = 1,
  rewind = 2,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperationFromJSON(
  object: any,
): NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation {
  switch (object) {
    case 0:
    case "play":
      return NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation.play;
    case 1:
    case "pause":
      return NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation.pause;
    case 2:
    case "rewind":
      return NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation.rewind;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation
        .UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperationToJSON(
  object: NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation.play:
      return "play";
    case NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation.pause:
      return "pause";
    case NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation.rewind:
      return "rewind";
    case NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation {
  operation: NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation;
}

export enum NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation {
  play = 0,
  pause = 1,
  rewind = 2,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperationFromJSON(
  object: any,
): NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation {
  switch (object) {
    case 0:
    case "play":
      return NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation.play;
    case 1:
    case "pause":
      return NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation.pause;
    case 2:
    case "rewind":
      return NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation.rewind;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation
        .UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperationToJSON(
  object: NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation.play:
      return "play";
    case NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation.pause:
      return "pause";
    case NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation.rewind:
      return "rewind";
    case NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus {
}

export interface NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus {
}

export interface NetworkAPIV1_APIV1PresentationRequest_Thumbnail {
  uuid: UUID | undefined;
  cueIndex: number;
  quality: number;
  contentType: NetworkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentType;
}

export enum NetworkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentType {
  PNG = 0,
  JPEG = 1,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentType {
  switch (object) {
    case 0:
    case "PNG":
      return NetworkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentType.PNG;
    case 1:
    case "JPEG":
      return NetworkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentType.JPEG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentTypeToJSON(
  object: NetworkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentType.PNG:
      return "PNG";
    case NetworkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentType.JPEG:
      return "JPEG";
    case NetworkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1PresentationRequest_EmptyMessage {
}

export interface NetworkAPIV1_APIV1PresentationRequest_FocusMessage {
  next?: NetworkAPIV1_APIV1PresentationRequest_EmptyMessage | undefined;
  previous?: NetworkAPIV1_APIV1PresentationRequest_EmptyMessage | undefined;
  active?: NetworkAPIV1_APIV1PresentationRequest_EmptyMessage | undefined;
  uuid?: string | undefined;
}

export interface NetworkAPIV1_APIV1PresentationRequest_TriggerMessage {
  focused?: NetworkAPIV1_APIV1PresentationRequest_EmptyMessage | undefined;
  active?: NetworkAPIV1_APIV1PresentationRequest_EmptyMessage | undefined;
  uuid?: string | undefined;
  first?: NetworkAPIV1_APIV1PresentationRequest_EmptyMessage | undefined;
  next?: NetworkAPIV1_APIV1PresentationRequest_EmptyMessage | undefined;
  previous?: NetworkAPIV1_APIV1PresentationRequest_EmptyMessage | undefined;
  index?: number | undefined;
  group?: string | undefined;
}

export interface NetworkAPIV1_APIV1PropRequest {
  props?: NetworkAPIV1_APIV1PropRequest_Props | undefined;
  getProp?: NetworkAPIV1_APIV1PropRequest_GetProp | undefined;
  deleteProp?: NetworkAPIV1_APIV1PropRequest_DeleteProp | undefined;
  triggerProp?: NetworkAPIV1_APIV1PropRequest_TriggerProp | undefined;
  clearProp?: NetworkAPIV1_APIV1PropRequest_ClearProp | undefined;
  getThumbnail?: NetworkAPIV1_APIV1PropRequest_GetThumbnail | undefined;
}

export interface NetworkAPIV1_APIV1PropRequest_Props {
}

export interface NetworkAPIV1_APIV1PropRequest_GetProp {
  id: string;
}

export interface NetworkAPIV1_APIV1PropRequest_DeleteProp {
  id: string;
}

export interface NetworkAPIV1_APIV1PropRequest_TriggerProp {
  id: string;
}

export interface NetworkAPIV1_APIV1PropRequest_ClearProp {
  id: string;
}

export interface NetworkAPIV1_APIV1PropRequest_GetThumbnail {
  id: string;
  quality: number;
}

export interface NetworkAPIV1_APIV1StageRequest {
  getLayoutMap?: NetworkAPIV1_APIV1StageRequest_GetLayoutMap | undefined;
  setLayoutMap?: NetworkAPIV1_APIV1StageRequest_SetLayoutMap | undefined;
  getMessage?: NetworkAPIV1_APIV1StageRequest_GetMessage | undefined;
  putMessage?: NetworkAPIV1_APIV1StageRequest_PutMessage | undefined;
  deleteMessage?: NetworkAPIV1_APIV1StageRequest_DeleteMessage | undefined;
  getScreens?: NetworkAPIV1_APIV1StageRequest_GetScreens | undefined;
  getScreenLayout?: NetworkAPIV1_APIV1StageRequest_GetScreenLayout | undefined;
  setScreenLayout?: NetworkAPIV1_APIV1StageRequest_SetScreenLayout | undefined;
  getLayouts?: NetworkAPIV1_APIV1StageRequest_GetLayouts | undefined;
  deleteLayout?: NetworkAPIV1_APIV1StageRequest_DeleteLayout | undefined;
  getLayoutThumbnail?: NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail | undefined;
}

export interface NetworkAPIV1_APIV1StageRequest_GetLayoutMap {
}

export interface NetworkAPIV1_APIV1StageRequest_SetLayoutMap {
  map: APIV1StageLayoutMap | undefined;
}

export interface NetworkAPIV1_APIV1StageRequest_GetMessage {
}

export interface NetworkAPIV1_APIV1StageRequest_PutMessage {
  message: string;
}

export interface NetworkAPIV1_APIV1StageRequest_DeleteMessage {
}

export interface NetworkAPIV1_APIV1StageRequest_GetScreens {
}

export interface NetworkAPIV1_APIV1StageRequest_GetScreenLayout {
  id: string;
}

export interface NetworkAPIV1_APIV1StageRequest_SetScreenLayout {
  id: string;
  layout: string;
}

export interface NetworkAPIV1_APIV1StageRequest_GetLayouts {
}

export interface NetworkAPIV1_APIV1StageRequest_DeleteLayout {
  id: string;
}

export interface NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail {
  id: string;
  quality: number;
}

export interface NetworkAPIV1_APIV1StatusRequest {
  getLayers?: NetworkAPIV1_APIV1StatusRequest_GetLayers | undefined;
  getStageScreens?: NetworkAPIV1_APIV1StatusRequest_GetStageScreens | undefined;
  putStageScreens?: NetworkAPIV1_APIV1StatusRequest_PutStageScreens | undefined;
  getAudienceScreens?: NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens | undefined;
  putAudienceScreens?: NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens | undefined;
  getScreens?: NetworkAPIV1_APIV1StatusRequest_GetScreens | undefined;
  getSlide?: NetworkAPIV1_APIV1StatusRequest_GetSlide | undefined;
}

export interface NetworkAPIV1_APIV1StatusRequest_GetLayers {
}

export interface NetworkAPIV1_APIV1StatusRequest_GetStageScreens {
}

export interface NetworkAPIV1_APIV1StatusRequest_PutStageScreens {
  enabled: boolean;
}

export interface NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens {
}

export interface NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens {
  enabled: boolean;
}

export interface NetworkAPIV1_APIV1StatusRequest_GetScreens {
}

export interface NetworkAPIV1_APIV1StatusRequest_GetSlide {
}

export interface NetworkAPIV1_APIV1ThemeRequest {
  getAll?: NetworkAPIV1_APIV1ThemeRequest_GetAll | undefined;
  getTheme?: NetworkAPIV1_APIV1ThemeRequest_GetTheme | undefined;
  deleteTheme?: NetworkAPIV1_APIV1ThemeRequest_DeleteTheme | undefined;
  getThemeName?: NetworkAPIV1_APIV1ThemeRequest_GetThemeName | undefined;
  putThemeName?: NetworkAPIV1_APIV1ThemeRequest_PutThemeName | undefined;
  getThemeSlide?: NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide | undefined;
  putThemeSlide?: NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide | undefined;
  deleteThemeSlide?: NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide | undefined;
  getThemeSlideThumbnail?: NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail | undefined;
}

export interface NetworkAPIV1_APIV1ThemeRequest_GetAll {
}

export interface NetworkAPIV1_APIV1ThemeRequest_GetTheme {
  id: string;
}

export interface NetworkAPIV1_APIV1ThemeRequest_DeleteTheme {
  id: string;
}

export interface NetworkAPIV1_APIV1ThemeRequest_GetThemeName {
  id: string;
}

export interface NetworkAPIV1_APIV1ThemeRequest_PutThemeName {
  id: string;
  name: string;
}

export interface NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide {
  id: string;
  themeSlide: string;
}

export interface NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide {
  id: string;
  themeSlide: string;
  slide: APIV1ThemeSlide | undefined;
}

export interface NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide {
  id: string;
  themeSlide: string;
}

export interface NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail {
  id: string;
  themeSlide: string;
  quality: number;
}

export interface NetworkAPIV1_APIV1TimerRequest {
  timers?: NetworkAPIV1_APIV1TimerRequest_Timers | undefined;
  createTimer?: NetworkAPIV1_APIV1TimerRequest_CreateTimer | undefined;
  currentTimes?: NetworkAPIV1_APIV1TimerRequest_CurrentTimes | undefined;
  allTimersOperation?: NetworkAPIV1_APIV1TimerRequest_AllTimersOperation | undefined;
  getTimer?: NetworkAPIV1_APIV1TimerRequest_GetTimer | undefined;
  putTimer?: NetworkAPIV1_APIV1TimerRequest_PutTimer | undefined;
  deleteTimer?: NetworkAPIV1_APIV1TimerRequest_DeleteTimer | undefined;
  timerOperation?: NetworkAPIV1_APIV1TimerRequest_TimerOperation | undefined;
  systemTime?: NetworkAPIV1_APIV1TimerRequest_SystemTime | undefined;
  videoCountdown?: NetworkAPIV1_APIV1TimerRequest_VideoCountdown | undefined;
}

export interface NetworkAPIV1_APIV1TimerRequest_Timers {
}

export interface NetworkAPIV1_APIV1TimerRequest_CreateTimer {
  name: string;
  allowsOverrun: boolean;
  countdown: APIV1Timer_APIV1TimerCountdown | undefined;
  countDownToTime: APIV1Timer_APIV1TimerCountdownToTime | undefined;
  elapsed: APIV1Timer_APIV1TimerElapsed | undefined;
}

export interface NetworkAPIV1_APIV1TimerRequest_CurrentTimes {
}

export interface NetworkAPIV1_APIV1TimerRequest_AllTimersOperation {
  operation: NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation;
}

export enum NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation {
  start = 0,
  stop = 1,
  reset = 2,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperationFromJSON(
  object: any,
): NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation {
  switch (object) {
    case 0:
    case "start":
      return NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation.start;
    case 1:
    case "stop":
      return NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation.stop;
    case 2:
    case "reset":
      return NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation.reset;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperationToJSON(
  object: NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation.start:
      return "start";
    case NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation.stop:
      return "stop";
    case NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation.reset:
      return "reset";
    case NetworkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TimerRequest_GetTimer {
  id: string;
}

export interface NetworkAPIV1_APIV1TimerRequest_PutTimer {
  id: string;
  timer: APIV1Timer | undefined;
}

export interface NetworkAPIV1_APIV1TimerRequest_DeleteTimer {
  id: string;
}

export interface NetworkAPIV1_APIV1TimerRequest_TimerOperation {
  id: string;
  operation: NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation;
}

export enum NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation {
  start = 0,
  stop = 1,
  reset = 2,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperationFromJSON(
  object: any,
): NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation {
  switch (object) {
    case 0:
    case "start":
      return NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation.start;
    case 1:
    case "stop":
      return NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation.stop;
    case 2:
    case "reset":
      return NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation.reset;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperationToJSON(
  object: NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation.start:
      return "start";
    case NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation.stop:
      return "stop";
    case NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation.reset:
      return "reset";
    case NetworkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TimerRequest_SystemTime {
}

export interface NetworkAPIV1_APIV1TimerRequest_VideoCountdown {
}

export interface NetworkAPIV1_APIV1TransportRequest {
  play?: NetworkAPIV1_APIV1TransportRequest_Play | undefined;
  pause?: NetworkAPIV1_APIV1TransportRequest_Pause | undefined;
  skipBackward?: NetworkAPIV1_APIV1TransportRequest_SkipBackward | undefined;
  skipForward?: NetworkAPIV1_APIV1TransportRequest_SkipForward | undefined;
  goToEnd?: NetworkAPIV1_APIV1TransportRequest_GoToEnd | undefined;
  getTime?: NetworkAPIV1_APIV1TransportRequest_GetTime | undefined;
  putTime?: NetworkAPIV1_APIV1TransportRequest_PutTime | undefined;
  getAutoAdvance?: NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance | undefined;
  deleteAutoAdvance?: NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance | undefined;
  getCurrentMedia?: NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia | undefined;
}

export interface NetworkAPIV1_APIV1TransportRequest_Play {
  layer: NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType;
}

export enum NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType {
  audio = 0,
  props = 1,
  messages = 2,
  announcements = 3,
  slide = 4,
  media = 5,
  video_input = 6,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TransportRequest_Play_APIV1LayerTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType {
  switch (object) {
    case 0:
    case "audio":
      return NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.audio;
    case 1:
    case "props":
      return NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.props;
    case 2:
    case "messages":
      return NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.messages;
    case 3:
    case "announcements":
      return NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.announcements;
    case 4:
    case "slide":
      return NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.slide;
    case 5:
    case "media":
      return NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.media;
    case 6:
    case "video_input":
      return NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.video_input;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TransportRequest_Play_APIV1LayerTypeToJSON(
  object: NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.audio:
      return "audio";
    case NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.props:
      return "props";
    case NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.messages:
      return "messages";
    case NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.announcements:
      return "announcements";
    case NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.slide:
      return "slide";
    case NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.media:
      return "media";
    case NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.video_input:
      return "video_input";
    case NetworkAPIV1_APIV1TransportRequest_Play_APIV1LayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TransportRequest_Pause {
  layer: NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType;
}

export enum NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType {
  audio = 0,
  props = 1,
  messages = 2,
  announcements = 3,
  slide = 4,
  media = 5,
  video_input = 6,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TransportRequest_Pause_APIV1LayerTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType {
  switch (object) {
    case 0:
    case "audio":
      return NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.audio;
    case 1:
    case "props":
      return NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.props;
    case 2:
    case "messages":
      return NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.messages;
    case 3:
    case "announcements":
      return NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.announcements;
    case 4:
    case "slide":
      return NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.slide;
    case 5:
    case "media":
      return NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.media;
    case 6:
    case "video_input":
      return NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.video_input;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TransportRequest_Pause_APIV1LayerTypeToJSON(
  object: NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.audio:
      return "audio";
    case NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.props:
      return "props";
    case NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.messages:
      return "messages";
    case NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.announcements:
      return "announcements";
    case NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.slide:
      return "slide";
    case NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.media:
      return "media";
    case NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.video_input:
      return "video_input";
    case NetworkAPIV1_APIV1TransportRequest_Pause_APIV1LayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TransportRequest_SkipBackward {
  layer: NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType;
  seconds: number;
}

export enum NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType {
  audio = 0,
  props = 1,
  messages = 2,
  announcements = 3,
  slide = 4,
  media = 5,
  video_input = 6,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType {
  switch (object) {
    case 0:
    case "audio":
      return NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.audio;
    case 1:
    case "props":
      return NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.props;
    case 2:
    case "messages":
      return NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.messages;
    case 3:
    case "announcements":
      return NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.announcements;
    case 4:
    case "slide":
      return NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.slide;
    case 5:
    case "media":
      return NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.media;
    case 6:
    case "video_input":
      return NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.video_input;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerTypeToJSON(
  object: NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.audio:
      return "audio";
    case NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.props:
      return "props";
    case NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.messages:
      return "messages";
    case NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.announcements:
      return "announcements";
    case NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.slide:
      return "slide";
    case NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.media:
      return "media";
    case NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.video_input:
      return "video_input";
    case NetworkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TransportRequest_SkipForward {
  layer: NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType;
  seconds: number;
}

export enum NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType {
  audio = 0,
  props = 1,
  messages = 2,
  announcements = 3,
  slide = 4,
  media = 5,
  video_input = 6,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType {
  switch (object) {
    case 0:
    case "audio":
      return NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.audio;
    case 1:
    case "props":
      return NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.props;
    case 2:
    case "messages":
      return NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.messages;
    case 3:
    case "announcements":
      return NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.announcements;
    case 4:
    case "slide":
      return NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.slide;
    case 5:
    case "media":
      return NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.media;
    case 6:
    case "video_input":
      return NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.video_input;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerTypeToJSON(
  object: NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.audio:
      return "audio";
    case NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.props:
      return "props";
    case NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.messages:
      return "messages";
    case NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.announcements:
      return "announcements";
    case NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.slide:
      return "slide";
    case NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.media:
      return "media";
    case NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.video_input:
      return "video_input";
    case NetworkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TransportRequest_GoToEnd {
  layer: NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType;
  seconds: number;
}

export enum NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType {
  audio = 0,
  props = 1,
  messages = 2,
  announcements = 3,
  slide = 4,
  media = 5,
  video_input = 6,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType {
  switch (object) {
    case 0:
    case "audio":
      return NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.audio;
    case 1:
    case "props":
      return NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.props;
    case 2:
    case "messages":
      return NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.messages;
    case 3:
    case "announcements":
      return NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.announcements;
    case 4:
    case "slide":
      return NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.slide;
    case 5:
    case "media":
      return NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.media;
    case 6:
    case "video_input":
      return NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.video_input;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerTypeToJSON(
  object: NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.audio:
      return "audio";
    case NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.props:
      return "props";
    case NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.messages:
      return "messages";
    case NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.announcements:
      return "announcements";
    case NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.slide:
      return "slide";
    case NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.media:
      return "media";
    case NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.video_input:
      return "video_input";
    case NetworkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TransportRequest_GetTime {
  layer: NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType;
}

export enum NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType {
  audio = 0,
  props = 1,
  messages = 2,
  announcements = 3,
  slide = 4,
  media = 5,
  video_input = 6,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType {
  switch (object) {
    case 0:
    case "audio":
      return NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.audio;
    case 1:
    case "props":
      return NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.props;
    case 2:
    case "messages":
      return NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.messages;
    case 3:
    case "announcements":
      return NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.announcements;
    case 4:
    case "slide":
      return NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.slide;
    case 5:
    case "media":
      return NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.media;
    case 6:
    case "video_input":
      return NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.video_input;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerTypeToJSON(
  object: NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.audio:
      return "audio";
    case NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.props:
      return "props";
    case NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.messages:
      return "messages";
    case NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.announcements:
      return "announcements";
    case NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.slide:
      return "slide";
    case NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.media:
      return "media";
    case NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.video_input:
      return "video_input";
    case NetworkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TransportRequest_PutTime {
  layer: NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType;
  seconds: number;
}

export enum NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType {
  audio = 0,
  props = 1,
  messages = 2,
  announcements = 3,
  slide = 4,
  media = 5,
  video_input = 6,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType {
  switch (object) {
    case 0:
    case "audio":
      return NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.audio;
    case 1:
    case "props":
      return NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.props;
    case 2:
    case "messages":
      return NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.messages;
    case 3:
    case "announcements":
      return NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.announcements;
    case 4:
    case "slide":
      return NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.slide;
    case 5:
    case "media":
      return NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.media;
    case 6:
    case "video_input":
      return NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.video_input;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerTypeToJSON(
  object: NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.audio:
      return "audio";
    case NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.props:
      return "props";
    case NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.messages:
      return "messages";
    case NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.announcements:
      return "announcements";
    case NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.slide:
      return "slide";
    case NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.media:
      return "media";
    case NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.video_input:
      return "video_input";
    case NetworkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance {
  layer: NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType;
}

export enum NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType {
  audio = 0,
  props = 1,
  messages = 2,
  announcements = 3,
  slide = 4,
  media = 5,
  video_input = 6,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType {
  switch (object) {
    case 0:
    case "audio":
      return NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.audio;
    case 1:
    case "props":
      return NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.props;
    case 2:
    case "messages":
      return NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.messages;
    case 3:
    case "announcements":
      return NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.announcements;
    case 4:
    case "slide":
      return NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.slide;
    case 5:
    case "media":
      return NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.media;
    case 6:
    case "video_input":
      return NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.video_input;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerTypeToJSON(
  object: NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.audio:
      return "audio";
    case NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.props:
      return "props";
    case NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.messages:
      return "messages";
    case NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.announcements:
      return "announcements";
    case NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.slide:
      return "slide";
    case NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.media:
      return "media";
    case NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.video_input:
      return "video_input";
    case NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance {
  layer: NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType;
}

export enum NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType {
  audio = 0,
  props = 1,
  messages = 2,
  announcements = 3,
  slide = 4,
  media = 5,
  video_input = 6,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType {
  switch (object) {
    case 0:
    case "audio":
      return NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.audio;
    case 1:
    case "props":
      return NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.props;
    case 2:
    case "messages":
      return NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.messages;
    case 3:
    case "announcements":
      return NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.announcements;
    case 4:
    case "slide":
      return NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.slide;
    case 5:
    case "media":
      return NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.media;
    case 6:
    case "video_input":
      return NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.video_input;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerTypeToJSON(
  object: NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.audio:
      return "audio";
    case NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.props:
      return "props";
    case NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.messages:
      return "messages";
    case NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.announcements:
      return "announcements";
    case NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.slide:
      return "slide";
    case NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.media:
      return "media";
    case NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.video_input:
      return "video_input";
    case NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia {
  layer: NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType;
}

export enum NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType {
  audio = 0,
  props = 1,
  messages = 2,
  announcements = 3,
  slide = 4,
  media = 5,
  video_input = 6,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType {
  switch (object) {
    case 0:
    case "audio":
      return NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.audio;
    case 1:
    case "props":
      return NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.props;
    case 2:
    case "messages":
      return NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.messages;
    case 3:
    case "announcements":
      return NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.announcements;
    case 4:
    case "slide":
      return NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.slide;
    case 5:
    case "media":
      return NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.media;
    case 6:
    case "video_input":
      return NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.video_input;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerTypeToJSON(
  object: NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.audio:
      return "audio";
    case NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.props:
      return "props";
    case NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.messages:
      return "messages";
    case NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.announcements:
      return "announcements";
    case NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.slide:
      return "slide";
    case NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.media:
      return "media";
    case NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.video_input:
      return "video_input";
    case NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1TriggerRequest {
  cue?: NetworkAPIV1_APIV1TriggerRequest_Cue | undefined;
  playlist?: NetworkAPIV1_APIV1TriggerRequest_Playlist | undefined;
  media?: NetworkAPIV1_APIV1TriggerRequest_Media | undefined;
  audio?: NetworkAPIV1_APIV1TriggerRequest_Audio | undefined;
  videoInput?: NetworkAPIV1_APIV1TriggerRequest_VideoInput | undefined;
  library?: NetworkAPIV1_APIV1TriggerRequest_Library | undefined;
  next?: NetworkAPIV1_APIV1TriggerRequest_Next | undefined;
  previous?: NetworkAPIV1_APIV1TriggerRequest_Previous | undefined;
  mediaNext?: NetworkAPIV1_APIV1TriggerRequest_MediaNext | undefined;
  mediaPrevious?: NetworkAPIV1_APIV1TriggerRequest_MediaPrevious | undefined;
  audioNext?: NetworkAPIV1_APIV1TriggerRequest_AudioNext | undefined;
  audioPrevious?: NetworkAPIV1_APIV1TriggerRequest_AudioPrevious | undefined;
}

export interface NetworkAPIV1_APIV1TriggerRequest_Cue {
  index: number;
}

export interface NetworkAPIV1_APIV1TriggerRequest_Playlist {
  id: string;
}

export interface NetworkAPIV1_APIV1TriggerRequest_Media {
  id: string;
}

export interface NetworkAPIV1_APIV1TriggerRequest_MediaNext {
}

export interface NetworkAPIV1_APIV1TriggerRequest_MediaPrevious {
}

export interface NetworkAPIV1_APIV1TriggerRequest_Audio {
  id: string;
}

export interface NetworkAPIV1_APIV1TriggerRequest_AudioNext {
}

export interface NetworkAPIV1_APIV1TriggerRequest_AudioPrevious {
}

export interface NetworkAPIV1_APIV1TriggerRequest_VideoInput {
  id: string;
}

export interface NetworkAPIV1_APIV1TriggerRequest_Library {
  id: string;
}

export interface NetworkAPIV1_APIV1TriggerRequest_Next {
}

export interface NetworkAPIV1_APIV1TriggerRequest_Previous {
}

export interface NetworkAPIV1_APIV1VideoInputsRequest {
  getAll?: NetworkAPIV1_APIV1VideoInputsRequest_GetAll | undefined;
  trigger?: NetworkAPIV1_APIV1VideoInputsRequest_Trigger | undefined;
}

export interface NetworkAPIV1_APIV1VideoInputsRequest_GetAll {
}

export interface NetworkAPIV1_APIV1VideoInputsRequest_Trigger {
  id: string;
}

export interface NetworkAPIV1_APIV1AnnouncementResponse {
  activeTimelineOperation?: NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation | undefined;
  activeTimelineStatus?: NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus | undefined;
  active?: NetworkAPIV1_APIV1AnnouncementResponse_Active | undefined;
  slideIndex?: NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex | undefined;
  activeFocus?: NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus | undefined;
  activeTrigger?: NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger | undefined;
  activeNextTrigger?: NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger | undefined;
  activePreviousTrigger?: NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger | undefined;
  activeIndexTrigger?: NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger | undefined;
}

export interface NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation {
}

export interface NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus {
  isRunning: boolean;
  currentTime: number;
}

export interface NetworkAPIV1_APIV1AnnouncementResponse_Active {
  announcement: APIV1Presentation | undefined;
}

export interface NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex {
  announcementIndex: APIV1SlideIndex | undefined;
}

export interface NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus {
}

export interface NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger {
}

export interface NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger {
}

export interface NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger {
}

export interface NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger {
}

export interface NetworkAPIV1_APIV1AudioResponse {
  playlists?: NetworkAPIV1_APIV1AudioResponse_Playlists | undefined;
  playlist?: NetworkAPIV1_APIV1AudioResponse_Playlist | undefined;
  update?: NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate | undefined;
  playlistFocused?: NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist | undefined;
  playlistActive?: NetworkAPIV1_APIV1AudioResponse_ActivePlaylist | undefined;
  playlistNextFocus?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistPreviousFocus?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistActiveFocus?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistIdFocus?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistFocusedTrigger?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistActiveTrigger?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistIdTrigger?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistFocusedNextTrigger?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistFocusedPreviousTrigger?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistFocusedIdTrigger?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistActiveNextTrigger?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistActivePreviousTrigger?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistActiveIdTrigger?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistIdNextTrigger?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
  playlistIdPreviousTrigger?: NetworkAPIV1_APIV1AudioResponse_EmptyMessage | undefined;
}

export interface NetworkAPIV1_APIV1AudioResponse_Playlists {
  playlists: APIV1Playlist[];
}

export interface NetworkAPIV1_APIV1AudioResponse_Playlist {
  id: APIV1Identifier | undefined;
  items: APIV1MediaPlaylistItem[];
}

export interface NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate {
  id: APIV1Identifier | undefined;
}

export interface NetworkAPIV1_APIV1AudioResponse_EmptyMessage {
}

export interface NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist {
  id: APIV1Identifier | undefined;
}

export interface NetworkAPIV1_APIV1AudioResponse_ActivePlaylist {
  playlist: APIV1Identifier | undefined;
  item: APIV1Identifier | undefined;
}

export interface NetworkAPIV1_APIV1CaptureResponse {
  getStatus?: NetworkAPIV1_APIV1CaptureResponse_GetStatus | undefined;
  operation?: NetworkAPIV1_APIV1CaptureResponse_Operation | undefined;
  getSettings?: NetworkAPIV1_APIV1CaptureResponse_GetSettings | undefined;
  setSettings?: NetworkAPIV1_APIV1CaptureResponse_SetSettings | undefined;
  getEncodings?: NetworkAPIV1_APIV1CaptureResponse_Encodings | undefined;
}

export interface NetworkAPIV1_APIV1CaptureResponse_GetStatus {
  status: NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus;
  captureTime: string;
  statusText: string;
}

export enum NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus {
  active = 0,
  inactive = 1,
  caution = 2,
  error = 3,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatusFromJSON(
  object: any,
): NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus {
  switch (object) {
    case 0:
    case "active":
      return NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus.active;
    case 1:
    case "inactive":
      return NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus.inactive;
    case 2:
    case "caution":
      return NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus.caution;
    case 3:
    case "error":
      return NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus.error;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatusToJSON(
  object: NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus.active:
      return "active";
    case NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus.inactive:
      return "inactive";
    case NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus.caution:
      return "caution";
    case NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus.error:
      return "error";
    case NetworkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1CaptureResponse_Operation {
}

export interface NetworkAPIV1_APIV1CaptureResponse_GetSettings {
  settings: APIV1CaptureSettings | undefined;
}

export interface NetworkAPIV1_APIV1CaptureResponse_SetSettings {
}

export interface NetworkAPIV1_APIV1CaptureResponse_Encodings {
  encodings: string[];
}

export interface NetworkAPIV1_APIV1ClearResponse {
  clearLayer?: NetworkAPIV1_APIV1ClearResponse_ClearLayer | undefined;
  createGroup?: NetworkAPIV1_APIV1ClearResponse_CreateGroup | undefined;
  getGroup?: NetworkAPIV1_APIV1ClearResponse_GetGroup | undefined;
  putGroup?: NetworkAPIV1_APIV1ClearResponse_PutGroup | undefined;
  deleteGroup?: NetworkAPIV1_APIV1ClearResponse_DeleteGroup | undefined;
  triggerGroup?: NetworkAPIV1_APIV1ClearResponse_TriggerGroup | undefined;
  getGroups?: NetworkAPIV1_APIV1ClearResponse_GetGroups | undefined;
  getGroupIcon?: NetworkAPIV1_APIV1ClearResponse_GetGroupIcon | undefined;
  putGroupIcon?: NetworkAPIV1_APIV1ClearResponse_PutGroupIcon | undefined;
}

export interface NetworkAPIV1_APIV1ClearResponse_ClearLayer {
}

export interface NetworkAPIV1_APIV1ClearResponse_PutGroup {
  group: APIV1ClearGroup | undefined;
}

export interface NetworkAPIV1_APIV1ClearResponse_DeleteGroup {
}

export interface NetworkAPIV1_APIV1ClearResponse_TriggerGroup {
}

export interface NetworkAPIV1_APIV1ClearResponse_CreateGroup {
  group: APIV1ClearGroup | undefined;
}

export interface NetworkAPIV1_APIV1ClearResponse_GetGroup {
  group: APIV1ClearGroup | undefined;
}

export interface NetworkAPIV1_APIV1ClearResponse_GetGroups {
  groups: APIV1ClearGroup[];
}

export interface NetworkAPIV1_APIV1ClearResponse_GetGroupIcon {
  contentType: string;
  icon: Uint8Array;
}

export interface NetworkAPIV1_APIV1ClearResponse_PutGroupIcon {
}

export interface NetworkAPIV1_APIV1GroupsResponse {
  groups?: NetworkAPIV1_APIV1GroupsResponse_GroupsRequest | undefined;
  triggerGroup?: NetworkAPIV1_APIV1GroupsResponse_TriggerGroup | undefined;
}

export interface NetworkAPIV1_APIV1GroupsResponse_GroupsRequest {
  groups: NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group[];
}

export interface NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group {
  id: APIV1Identifier | undefined;
  color: APIV1Color | undefined;
}

export interface NetworkAPIV1_APIV1GroupsResponse_TriggerGroup {
}

export interface NetworkAPIV1_APIV1LinkResponse {
  heartbeat?: NetworkAPIV1_APIV1LinkResponse_Heartbeat | undefined;
  status?: NetworkAPIV1_APIV1LinkResponse_Status | undefined;
  addMember?: NetworkAPIV1_APIV1LinkResponse_AddMember | undefined;
  removeMember?: NetworkAPIV1_APIV1LinkResponse_RemoveMember | undefined;
}

export interface NetworkAPIV1_APIV1LinkResponse_Heartbeat {
  groupDefinition: APIV1GroupDefinition | undefined;
  status: APIV1GroupMemberStatus | undefined;
}

export interface NetworkAPIV1_APIV1LinkResponse_Status {
  groupDefinition: APIV1GroupDefinition | undefined;
  memberName: string;
}

export interface NetworkAPIV1_APIV1LinkResponse_AddMember {
  groupDefinition?: APIV1GroupDefinition | undefined;
  accept?: NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts | undefined;
  decline?: NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline | undefined;
}

export interface NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts {
}

export interface NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline {
  reason: NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReason;
}

export enum NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReason {
  ALREADY_IN_GROUP = 0,
  USER_DECLINED = 1,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReasonFromJSON(
  object: any,
): NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReason {
  switch (object) {
    case 0:
    case "ALREADY_IN_GROUP":
      return NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReason.ALREADY_IN_GROUP;
    case 1:
    case "USER_DECLINED":
      return NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReason.USER_DECLINED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReason.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReasonToJSON(
  object: NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReason,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReason.ALREADY_IN_GROUP:
      return "ALREADY_IN_GROUP";
    case NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReason.USER_DECLINED:
      return "USER_DECLINED";
    case NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1LinkResponse_RemoveMember {
}

export interface NetworkAPIV1_APIV1LibraryResponse {
  libraries?: NetworkAPIV1_APIV1LibraryResponse_Libraries | undefined;
  library?: NetworkAPIV1_APIV1LibraryResponse_Library | undefined;
  triggger?: NetworkAPIV1_APIV1LibraryResponse_Trigger | undefined;
}

export interface NetworkAPIV1_APIV1LibraryResponse_Libraries {
  libraries: APIV1Identifier[];
}

export interface NetworkAPIV1_APIV1LibraryResponse_Library {
  updateType: NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType;
  items: APIV1Identifier[];
}

export enum NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType {
  all = 0,
  add = 1,
  remove = 2,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1LibraryResponse_Library_UpdateTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType {
  switch (object) {
    case 0:
    case "all":
      return NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType.all;
    case 1:
    case "add":
      return NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType.add;
    case 2:
    case "remove":
      return NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType.remove;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1LibraryResponse_Library_UpdateTypeToJSON(
  object: NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType.all:
      return "all";
    case NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType.add:
      return "add";
    case NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType.remove:
      return "remove";
    case NetworkAPIV1_APIV1LibraryResponse_Library_UpdateType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1LibraryResponse_Trigger {
}

export interface NetworkAPIV1_APIV1LooksResponse {
  looks?: NetworkAPIV1_APIV1LooksResponse_Looks | undefined;
  createLook?: NetworkAPIV1_APIV1LooksResponse_CreateLook | undefined;
  getCurrentLook?: NetworkAPIV1_APIV1LooksResponse_GetCurrentLook | undefined;
  putCurrentLook?: NetworkAPIV1_APIV1LooksResponse_PutCurrentLook | undefined;
  getLook?: NetworkAPIV1_APIV1LooksResponse_GetLook | undefined;
  putLook?: NetworkAPIV1_APIV1LooksResponse_PutLook | undefined;
  deleteLook?: NetworkAPIV1_APIV1LooksResponse_DeleteLook | undefined;
  triggerLook?: NetworkAPIV1_APIV1LooksResponse_TriggerLook | undefined;
}

export interface NetworkAPIV1_APIV1LooksResponse_Looks {
  looks: APIV1Look[];
}

export interface NetworkAPIV1_APIV1LooksResponse_CreateLook {
  look: APIV1Look | undefined;
}

export interface NetworkAPIV1_APIV1LooksResponse_GetCurrentLook {
  look: APIV1Look | undefined;
}

export interface NetworkAPIV1_APIV1LooksResponse_PutCurrentLook {
  look: APIV1Look | undefined;
}

export interface NetworkAPIV1_APIV1LooksResponse_GetLook {
  look: APIV1Look | undefined;
}

export interface NetworkAPIV1_APIV1LooksResponse_PutLook {
  look: APIV1Look | undefined;
}

export interface NetworkAPIV1_APIV1LooksResponse_DeleteLook {
}

export interface NetworkAPIV1_APIV1LooksResponse_TriggerLook {
}

export interface NetworkAPIV1_APIV1MacroResponse {
  macros?: NetworkAPIV1_APIV1MacroResponse_Macros | undefined;
  getMacro?: NetworkAPIV1_APIV1MacroResponse_GetMacro | undefined;
  putMacro?: NetworkAPIV1_APIV1MacroResponse_PutMacro | undefined;
  deleteMacro?: NetworkAPIV1_APIV1MacroResponse_DeleteMacro | undefined;
  triggerMacro?: NetworkAPIV1_APIV1MacroResponse_TriggerMacro | undefined;
}

export interface NetworkAPIV1_APIV1MacroResponse_Macros {
  macros: APIV1Macro[];
}

export interface NetworkAPIV1_APIV1MacroResponse_GetMacro {
  macro: APIV1Macro | undefined;
}

export interface NetworkAPIV1_APIV1MacroResponse_PutMacro {
  macro: APIV1Macro | undefined;
}

export interface NetworkAPIV1_APIV1MacroResponse_DeleteMacro {
}

export interface NetworkAPIV1_APIV1MacroResponse_TriggerMacro {
}

export interface NetworkAPIV1_APIV1MasksResponse {
  masks?: NetworkAPIV1_APIV1MasksResponse_Masks | undefined;
  getMask?: NetworkAPIV1_APIV1MasksResponse_GetMask | undefined;
  getThumbnail?: NetworkAPIV1_APIV1MasksResponse_GetThumbnail | undefined;
}

export interface NetworkAPIV1_APIV1MasksResponse_Masks {
  masks: APIV1Identifier[];
}

export interface NetworkAPIV1_APIV1MasksResponse_GetMask {
  id: APIV1Identifier | undefined;
}

export interface NetworkAPIV1_APIV1MasksResponse_GetThumbnail {
  data: Uint8Array;
}

export interface NetworkAPIV1_APIV1MediaResponse {
  playlists?: NetworkAPIV1_APIV1MediaResponse_Playlists | undefined;
  getPlaylist?: NetworkAPIV1_APIV1MediaResponse_GetPlaylist | undefined;
  getPlaylistUpdates?: NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates | undefined;
  getThumbnail?: NetworkAPIV1_APIV1MediaResponse_GetThumbnail | undefined;
  playlistFocused?: NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist | undefined;
  playlistActive?: NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist | undefined;
  focus?: NetworkAPIV1_APIV1MediaResponse_EmptyMessage | undefined;
  trigger?: NetworkAPIV1_APIV1MediaResponse_EmptyMessage | undefined;
}

export interface NetworkAPIV1_APIV1MediaResponse_Playlists {
  playlists: APIV1Playlist[];
}

export interface NetworkAPIV1_APIV1MediaResponse_GetPlaylist {
  id: APIV1Identifier | undefined;
  items: APIV1MediaPlaylistItem[];
}

export interface NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates {
  id: APIV1Identifier | undefined;
}

export interface NetworkAPIV1_APIV1MediaResponse_GetThumbnail {
  uuid: UUID | undefined;
  thumbnailData: Uint8Array;
}

export interface NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist {
  id: APIV1Identifier | undefined;
}

export interface NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist {
  playlist: APIV1Identifier | undefined;
  item: APIV1Identifier | undefined;
}

export interface NetworkAPIV1_APIV1MediaResponse_EmptyMessage {
}

export interface NetworkAPIV1_APIV1MessageResponse {
  messages?: NetworkAPIV1_APIV1MessageResponse_Messages | undefined;
  createMessage?: NetworkAPIV1_APIV1MessageResponse_CreateMessage | undefined;
  getMessage?: NetworkAPIV1_APIV1MessageResponse_GetMessage | undefined;
  putMessage?: NetworkAPIV1_APIV1MessageResponse_PutMessage | undefined;
  deleteMessage?: NetworkAPIV1_APIV1MessageResponse_DeleteMessage | undefined;
  triggerMessage?: NetworkAPIV1_APIV1MessageResponse_TriggerMessage | undefined;
  clearMessage?: NetworkAPIV1_APIV1MessageResponse_ClearMessage | undefined;
}

export interface NetworkAPIV1_APIV1MessageResponse_Messages {
  messages: APIV1Message[];
}

export interface NetworkAPIV1_APIV1MessageResponse_CreateMessage {
  message: APIV1Message | undefined;
}

export interface NetworkAPIV1_APIV1MessageResponse_GetMessage {
  message: APIV1Message | undefined;
}

export interface NetworkAPIV1_APIV1MessageResponse_PutMessage {
  message: APIV1Message | undefined;
}

export interface NetworkAPIV1_APIV1MessageResponse_DeleteMessage {
}

export interface NetworkAPIV1_APIV1MessageResponse_TriggerMessage {
}

export interface NetworkAPIV1_APIV1MessageResponse_ClearMessage {
}

export interface NetworkAPIV1_APIV1MiscellaneousResponse {
  findMyMouse?: NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse | undefined;
}

export interface NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse {
}

export interface NetworkAPIV1_APIV1PlaylistResponse {
  playlists?: NetworkAPIV1_APIV1PlaylistResponse_Playlists | undefined;
  createPlaylist?: NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist | undefined;
  getPlaylist?: NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist | undefined;
  putPlaylist?: NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist | undefined;
  postPlaylist?: NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist | undefined;
  getActivePlaylist?: NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist | undefined;
  focused?: NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist | undefined;
  nextFocus?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  previousFocus?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  activePresentationFocus?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  activeAnnouncementFocus?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  focusedTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  activePresentationTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  activeAnnouncementTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  focusedNextTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  focusedPreviousTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  activePresentationNextTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  activeAnnouncementNextTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  activePresentationPreviousTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  activeAnnouncementPreviousTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  idFocus?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  idTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  idNextTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  idPreviousTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  focusedIndexTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  activePresentationIndexTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  activeAnnouncementIndexTrigger?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
  idUpdates?: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage | undefined;
}

export interface NetworkAPIV1_APIV1PlaylistResponse_Playlists {
  playlists: APIV1Playlist[];
}

export interface NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist {
  playlist: APIV1Playlist | undefined;
}

export interface NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist {
  presentation: APIV1PlaylistAndItem | undefined;
  announcements: APIV1PlaylistAndItem | undefined;
}

export interface NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist {
  id: APIV1Identifier | undefined;
  items: APIV1PlaylistItem[];
}

export interface NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist {
}

export interface NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist {
  playlist: APIV1Playlist | undefined;
}

export interface NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist {
  playlist: APIV1PlaylistAndItem | undefined;
}

export interface NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage {
}

export interface NetworkAPIV1_APIV1PrerollResponse {
  prerollReady?: NetworkAPIV1_APIV1PrerollResponse_PrerollReady | undefined;
  activatePrerollItem?: NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem | undefined;
  cancelPrerollItem?: NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem | undefined;
}

export interface NetworkAPIV1_APIV1PrerollResponse_PrerollReady {
  id: number;
  latency: number;
  time: number;
}

export interface NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem {
  success: boolean;
}

export interface NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem {
  success: boolean;
}

export interface NetworkAPIV1_APIV1PresentationResponse {
  active?: NetworkAPIV1_APIV1PresentationResponse_Active | undefined;
  slideIndex?: NetworkAPIV1_APIV1PresentationResponse_SlideIndex | undefined;
  chordChart?: NetworkAPIV1_APIV1PresentationResponse_ChordChart | undefined;
  chordChartUpdate?: NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates | undefined;
  presentation?: NetworkAPIV1_APIV1PresentationResponse_Presentation | undefined;
  deletePresentation?: NetworkAPIV1_APIV1PresentationResponse_DeletePresentation | undefined;
  triggerPresentation?: NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation | undefined;
  triggerCue?: NetworkAPIV1_APIV1PresentationResponse_TriggerCue | undefined;
  timelineOperation?: NetworkAPIV1_APIV1PresentationResponse_TimelineOperation | undefined;
  activePresentationTimelineOperation?:
    | NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation
    | undefined;
  focusedPresentationTimelineOperation?:
    | NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation
    | undefined;
  activePresentationTimelineStatus?:
    | NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus
    | undefined;
  focusedPresentationTimelineStatus?:
    | NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus
    | undefined;
  thumbnail?: NetworkAPIV1_APIV1PresentationResponse_Thumbnail | undefined;
  focused?: NetworkAPIV1_APIV1PresentationResponse_Focused | undefined;
  focus?: NetworkAPIV1_APIV1PresentationResponse_EmptyMessage | undefined;
  trigger?: NetworkAPIV1_APIV1PresentationResponse_EmptyMessage | undefined;
}

export interface NetworkAPIV1_APIV1PresentationResponse_Active {
  presentation: APIV1Presentation | undefined;
}

export interface NetworkAPIV1_APIV1PresentationResponse_SlideIndex {
  presentationIndex: APIV1SlideIndex | undefined;
}

export interface NetworkAPIV1_APIV1PresentationResponse_ChordChart {
  chordChart: Uint8Array;
}

export interface NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates {
}

export interface NetworkAPIV1_APIV1PresentationResponse_Presentation {
  presentation: APIV1Presentation | undefined;
}

export interface NetworkAPIV1_APIV1PresentationResponse_DeletePresentation {
}

export interface NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation {
}

export interface NetworkAPIV1_APIV1PresentationResponse_TriggerCue {
}

export interface NetworkAPIV1_APIV1PresentationResponse_TimelineOperation {
}

export interface NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation {
}

export interface NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation {
}

export interface NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus {
  isRunning: boolean;
  currentTime: number;
}

export interface NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus {
  isRunning: boolean;
  currentTime: number;
}

export interface NetworkAPIV1_APIV1PresentationResponse_Thumbnail {
  data: Uint8Array;
  contentType: NetworkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentType;
}

export enum NetworkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentType {
  PNG = 0,
  JPEG = 1,
  UNRECOGNIZED = -1,
}

export function networkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentTypeFromJSON(
  object: any,
): NetworkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentType {
  switch (object) {
    case 0:
    case "PNG":
      return NetworkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentType.PNG;
    case 1:
    case "JPEG":
      return NetworkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentType.JPEG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentType.UNRECOGNIZED;
  }
}

export function networkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentTypeToJSON(
  object: NetworkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentType,
): string {
  switch (object) {
    case NetworkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentType.PNG:
      return "PNG";
    case NetworkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentType.JPEG:
      return "JPEG";
    case NetworkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NetworkAPIV1_APIV1PresentationResponse_Focused {
  id: APIV1Identifier | undefined;
}

export interface NetworkAPIV1_APIV1PresentationResponse_EmptyMessage {
}

export interface NetworkAPIV1_APIV1PropResponse {
  props?: NetworkAPIV1_APIV1PropResponse_Props | undefined;
  getProp?: NetworkAPIV1_APIV1PropResponse_GetProp | undefined;
  deleteProp?: NetworkAPIV1_APIV1PropResponse_DeleteProp | undefined;
  triggerProp?: NetworkAPIV1_APIV1PropResponse_TriggerProp | undefined;
  clearProp?: NetworkAPIV1_APIV1PropResponse_ClearProp | undefined;
  getThumbnail?: NetworkAPIV1_APIV1PropResponse_GetThumbnail | undefined;
}

export interface NetworkAPIV1_APIV1PropResponse_Props {
  props: APIV1PropData[];
}

export interface NetworkAPIV1_APIV1PropResponse_GetProp {
  prop: APIV1PropData | undefined;
}

export interface NetworkAPIV1_APIV1PropResponse_DeleteProp {
}

export interface NetworkAPIV1_APIV1PropResponse_TriggerProp {
}

export interface NetworkAPIV1_APIV1PropResponse_ClearProp {
}

export interface NetworkAPIV1_APIV1PropResponse_GetThumbnail {
  data: Uint8Array;
}

export interface NetworkAPIV1_APIV1StageResponse {
  getLayoutMap?: NetworkAPIV1_APIV1StageResponse_GetLayoutMap | undefined;
  setLayoutMap?: NetworkAPIV1_APIV1StageResponse_SetLayoutMap | undefined;
  getMessage?: NetworkAPIV1_APIV1StageResponse_GetMessage | undefined;
  putMessage?: NetworkAPIV1_APIV1StageResponse_PutMessage | undefined;
  deleteMessage?: NetworkAPIV1_APIV1StageResponse_DeleteMessage | undefined;
  getScreens?: NetworkAPIV1_APIV1StageResponse_GetScreens | undefined;
  getScreenLayout?: NetworkAPIV1_APIV1StageResponse_GetScreenLayout | undefined;
  setScreenLayout?: NetworkAPIV1_APIV1StageResponse_SetScreenLayout | undefined;
  getLayouts?: NetworkAPIV1_APIV1StageResponse_GetLayouts | undefined;
  deleteLayout?: NetworkAPIV1_APIV1StageResponse_DeleteLayout | undefined;
  getLayoutThumbnail?: NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail | undefined;
}

export interface NetworkAPIV1_APIV1StageResponse_GetLayoutMap {
  map: APIV1StageLayoutMap | undefined;
}

export interface NetworkAPIV1_APIV1StageResponse_SetLayoutMap {
}

export interface NetworkAPIV1_APIV1StageResponse_GetMessage {
  message: string;
}

export interface NetworkAPIV1_APIV1StageResponse_PutMessage {
}

export interface NetworkAPIV1_APIV1StageResponse_DeleteMessage {
}

export interface NetworkAPIV1_APIV1StageResponse_GetScreens {
  screens: APIV1Identifier[];
}

export interface NetworkAPIV1_APIV1StageResponse_GetScreenLayout {
  id: APIV1Identifier | undefined;
}

export interface NetworkAPIV1_APIV1StageResponse_SetScreenLayout {
}

export interface NetworkAPIV1_APIV1StageResponse_GetLayouts {
  layouts: NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout[];
}

export interface NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout {
  id: APIV1Identifier | undefined;
}

export interface NetworkAPIV1_APIV1StageResponse_DeleteLayout {
}

export interface NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail {
  data: Uint8Array;
}

export interface NetworkAPIV1_APIV1StatusResponse {
  getLayers?: NetworkAPIV1_APIV1StatusResponse_GetLayers | undefined;
  getStageScreens?: NetworkAPIV1_APIV1StatusResponse_GetStageScreens | undefined;
  putStageScreens?: NetworkAPIV1_APIV1StatusResponse_PutStageScreens | undefined;
  getAudienceScreens?: NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens | undefined;
  putAudienceScreens?: NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens | undefined;
  getScreens?: NetworkAPIV1_APIV1StatusResponse_GetScreens | undefined;
  getSlide?: NetworkAPIV1_APIV1StatusResponse_GetSlide | undefined;
}

export interface NetworkAPIV1_APIV1StatusResponse_GetLayers {
  videoInput: boolean;
  media: boolean;
  slide: boolean;
  announcements: boolean;
  props: boolean;
  messages: boolean;
  audio: boolean;
}

export interface NetworkAPIV1_APIV1StatusResponse_GetStageScreens {
  enabled: boolean;
}

export interface NetworkAPIV1_APIV1StatusResponse_PutStageScreens {
}

export interface NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens {
  enabled: boolean;
}

export interface NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens {
}

export interface NetworkAPIV1_APIV1StatusResponse_GetScreens {
  screens: APIV1ScreenConfig[];
}

export interface NetworkAPIV1_APIV1StatusResponse_GetSlide {
  current: APIV1SlideDisplayDetails | undefined;
  next: APIV1SlideDisplayDetails | undefined;
}

export interface NetworkAPIV1_APIV1ThemeResponse {
  getAll?: NetworkAPIV1_APIV1ThemeResponse_GetAll | undefined;
  getTheme?: NetworkAPIV1_APIV1ThemeResponse_GetTheme | undefined;
  deleteTheme?: NetworkAPIV1_APIV1ThemeResponse_DeleteTheme | undefined;
  getThemeName?: NetworkAPIV1_APIV1ThemeResponse_GetThemeName | undefined;
  putThemeName?: NetworkAPIV1_APIV1ThemeResponse_PutThemeName | undefined;
  getThemeSlide?: NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide | undefined;
  putThemeSlide?: NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide | undefined;
  deleteThemeSlide?: NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide | undefined;
  getThemeSlideThumbnail?: NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail | undefined;
}

export interface NetworkAPIV1_APIV1ThemeResponse_GetAll {
  groups: APIV1ThemeGroup[];
  themes: APIV1Theme[];
}

export interface NetworkAPIV1_APIV1ThemeResponse_GetTheme {
  theme?: APIV1Theme | undefined;
  group?: APIV1ThemeGroup | undefined;
}

export interface NetworkAPIV1_APIV1ThemeResponse_DeleteTheme {
}

export interface NetworkAPIV1_APIV1ThemeResponse_GetThemeName {
  name: string;
}

export interface NetworkAPIV1_APIV1ThemeResponse_PutThemeName {
}

export interface NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide {
  themeSlide: APIV1ThemeSlide | undefined;
}

export interface NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide {
}

export interface NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide {
}

export interface NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail {
  data: Uint8Array;
}

export interface NetworkAPIV1_APIV1TimerResponse {
  timers?: NetworkAPIV1_APIV1TimerResponse_Timers | undefined;
  createTimer?: NetworkAPIV1_APIV1TimerResponse_CreateTimer | undefined;
  currentTimes?: NetworkAPIV1_APIV1TimerResponse_CurrentTimes | undefined;
  allTimersOperation?: NetworkAPIV1_APIV1TimerResponse_AllTimersOperation | undefined;
  getTimer?: NetworkAPIV1_APIV1TimerResponse_GetTimer | undefined;
  putTimer?: NetworkAPIV1_APIV1TimerResponse_PutTimer | undefined;
  deleteTimer?: NetworkAPIV1_APIV1TimerResponse_DeleteTimer | undefined;
  timerOperation?: NetworkAPIV1_APIV1TimerResponse_TimerOperation | undefined;
  systemTime?: NetworkAPIV1_APIV1TimerResponse_SystemTime | undefined;
  videoCountdown?: NetworkAPIV1_APIV1TimerResponse_VideoCountdown | undefined;
}

export interface NetworkAPIV1_APIV1TimerResponse_Timers {
  timers: APIV1Timer[];
}

export interface NetworkAPIV1_APIV1TimerResponse_CreateTimer {
  timer: APIV1Timer | undefined;
}

export interface NetworkAPIV1_APIV1TimerResponse_CurrentTimes {
  timers: APIV1TimerValue[];
}

export interface NetworkAPIV1_APIV1TimerResponse_AllTimersOperation {
}

export interface NetworkAPIV1_APIV1TimerResponse_GetTimer {
  timer: APIV1Timer | undefined;
}

export interface NetworkAPIV1_APIV1TimerResponse_PutTimer {
  timer: APIV1Timer | undefined;
}

export interface NetworkAPIV1_APIV1TimerResponse_DeleteTimer {
}

export interface NetworkAPIV1_APIV1TimerResponse_TimerOperation {
}

export interface NetworkAPIV1_APIV1TimerResponse_SystemTime {
  time: number;
}

export interface NetworkAPIV1_APIV1TimerResponse_VideoCountdown {
  time: string;
}

export interface NetworkAPIV1_APIV1TransportResponse {
  play?: NetworkAPIV1_APIV1TransportResponse_Play | undefined;
  pause?: NetworkAPIV1_APIV1TransportResponse_Pause | undefined;
  skipBackward?: NetworkAPIV1_APIV1TransportResponse_SkipBackward | undefined;
  skipForward?: NetworkAPIV1_APIV1TransportResponse_SkipForward | undefined;
  goToEnd?: NetworkAPIV1_APIV1TransportResponse_GoToEnd | undefined;
  getTime?: NetworkAPIV1_APIV1TransportResponse_GetTime | undefined;
  putTime?: NetworkAPIV1_APIV1TransportResponse_PutTime | undefined;
  getAutoAdvance?: NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance | undefined;
  deleteAutoAdvance?: NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance | undefined;
  getCurrentMedia?: NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia | undefined;
}

export interface NetworkAPIV1_APIV1TransportResponse_Play {
}

export interface NetworkAPIV1_APIV1TransportResponse_Pause {
}

export interface NetworkAPIV1_APIV1TransportResponse_SkipBackward {
}

export interface NetworkAPIV1_APIV1TransportResponse_SkipForward {
}

export interface NetworkAPIV1_APIV1TransportResponse_GoToEnd {
}

export interface NetworkAPIV1_APIV1TransportResponse_GetTime {
  seconds: number;
}

export interface NetworkAPIV1_APIV1TransportResponse_PutTime {
}

export interface NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance {
  autoAdvance: boolean;
}

export interface NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance {
}

export interface NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia {
  isPlaying: boolean;
  uuid: UUID | undefined;
  name: string;
  artist: string;
  audioOnly: boolean;
  duration: number;
}

export interface NetworkAPIV1_APIV1TriggerResponse {
  cue?: NetworkAPIV1_APIV1TriggerResponse_Cue | undefined;
  playlist?: NetworkAPIV1_APIV1TriggerResponse_Playlist | undefined;
  media?: NetworkAPIV1_APIV1TriggerResponse_Media | undefined;
  audio?: NetworkAPIV1_APIV1TriggerResponse_Audio | undefined;
  videoInput?: NetworkAPIV1_APIV1TriggerResponse_VideoInput | undefined;
  library?: NetworkAPIV1_APIV1TriggerResponse_Library | undefined;
  next?: NetworkAPIV1_APIV1TriggerResponse_Next | undefined;
  previous?: NetworkAPIV1_APIV1TriggerResponse_Previous | undefined;
  mediaNext?: NetworkAPIV1_APIV1TriggerResponse_MediaNext | undefined;
  mediaPrevious?: NetworkAPIV1_APIV1TriggerResponse_MediaPrevious | undefined;
  audioNext?: NetworkAPIV1_APIV1TriggerResponse_AudioNext | undefined;
  audioPrevious?: NetworkAPIV1_APIV1TriggerResponse_AudioPrevious | undefined;
}

export interface NetworkAPIV1_APIV1TriggerResponse_Cue {
}

export interface NetworkAPIV1_APIV1TriggerResponse_Playlist {
}

export interface NetworkAPIV1_APIV1TriggerResponse_Media {
}

export interface NetworkAPIV1_APIV1TriggerResponse_MediaNext {
}

export interface NetworkAPIV1_APIV1TriggerResponse_MediaPrevious {
}

export interface NetworkAPIV1_APIV1TriggerResponse_Audio {
}

export interface NetworkAPIV1_APIV1TriggerResponse_AudioNext {
}

export interface NetworkAPIV1_APIV1TriggerResponse_AudioPrevious {
}

export interface NetworkAPIV1_APIV1TriggerResponse_VideoInput {
}

export interface NetworkAPIV1_APIV1TriggerResponse_Library {
}

export interface NetworkAPIV1_APIV1TriggerResponse_Next {
}

export interface NetworkAPIV1_APIV1TriggerResponse_Previous {
}

export interface NetworkAPIV1_APIV1VideoInputsResponse {
  getAll?: NetworkAPIV1_APIV1VideoInputsResponse_GetAll | undefined;
  trigger?: NetworkAPIV1_APIV1VideoInputsResponse_Trigger | undefined;
}

export interface NetworkAPIV1_APIV1VideoInputsResponse_GetAll {
  inputs: APIV1Identifier[];
}

export interface NetworkAPIV1_APIV1VideoInputsResponse_Trigger {
}

function createBaseNetworkAPIV1(): NetworkAPIV1 {
  return { action: undefined };
}

export const NetworkAPIV1 = {
  encode(message: NetworkAPIV1, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.action !== undefined) {
      NetworkAPIV1_Action.encode(message.action, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.action = NetworkAPIV1_Action.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1 {
    return { action: isSet(object.action) ? NetworkAPIV1_Action.fromJSON(object.action) : undefined };
  },

  toJSON(message: NetworkAPIV1): unknown {
    const obj: any = {};
    message.action !== undefined &&
      (obj.action = message.action ? NetworkAPIV1_Action.toJSON(message.action) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1>, I>>(base?: I): NetworkAPIV1 {
    return NetworkAPIV1.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1>, I>>(object: I): NetworkAPIV1 {
    const message = createBaseNetworkAPIV1();
    message.action = (object.action !== undefined && object.action !== null)
      ? NetworkAPIV1_Action.fromPartial(object.action)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_Action(): NetworkAPIV1_Action {
  return {
    audioRequest: undefined,
    captureRequest: undefined,
    clearingRequest: undefined,
    groupsRequest: undefined,
    linkRequest: undefined,
    libraryRequest: undefined,
    looksRequest: undefined,
    macroRequest: undefined,
    masksRequest: undefined,
    mediaRequest: undefined,
    messageRequest: undefined,
    miscellaneousRequest: undefined,
    playlistRequest: undefined,
    prerollRequest: undefined,
    presentationRequest: undefined,
    propRequest: undefined,
    stageRequest: undefined,
    statusRequest: undefined,
    themeRequest: undefined,
    timerRequest: undefined,
    transportRequest: undefined,
    triggerRequest: undefined,
    videoInputsRequest: undefined,
    announcementRequest: undefined,
    audioResponse: undefined,
    captureResponse: undefined,
    clearingResponse: undefined,
    groupsResponse: undefined,
    linkResponse: undefined,
    libraryResponse: undefined,
    looksResponse: undefined,
    macroResponse: undefined,
    masksResponse: undefined,
    mediaResponse: undefined,
    messageResponse: undefined,
    miscellaneousResponse: undefined,
    playlistResponse: undefined,
    prerollResponse: undefined,
    presentationResponse: undefined,
    propResponse: undefined,
    stageResponse: undefined,
    statusResponse: undefined,
    themeResponse: undefined,
    timerResponse: undefined,
    transportResponse: undefined,
    triggerResponse: undefined,
    videoInputsResponse: undefined,
    announcementResponse: undefined,
    errorResponse: undefined,
    updateIdentifier: undefined,
  };
}

export const NetworkAPIV1_Action = {
  encode(message: NetworkAPIV1_Action, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.audioRequest !== undefined) {
      NetworkAPIV1_APIV1AudioRequest.encode(message.audioRequest, writer.uint32(10).fork()).ldelim();
    }
    if (message.captureRequest !== undefined) {
      NetworkAPIV1_APIV1CaptureRequest.encode(message.captureRequest, writer.uint32(18).fork()).ldelim();
    }
    if (message.clearingRequest !== undefined) {
      NetworkAPIV1_APIV1ClearRequest.encode(message.clearingRequest, writer.uint32(26).fork()).ldelim();
    }
    if (message.groupsRequest !== undefined) {
      NetworkAPIV1_APIV1GroupsRequest.encode(message.groupsRequest, writer.uint32(34).fork()).ldelim();
    }
    if (message.linkRequest !== undefined) {
      NetworkAPIV1_APIV1LinkRequest.encode(message.linkRequest, writer.uint32(42).fork()).ldelim();
    }
    if (message.libraryRequest !== undefined) {
      NetworkAPIV1_APIV1LibraryRequest.encode(message.libraryRequest, writer.uint32(50).fork()).ldelim();
    }
    if (message.looksRequest !== undefined) {
      NetworkAPIV1_APIV1LooksRequest.encode(message.looksRequest, writer.uint32(58).fork()).ldelim();
    }
    if (message.macroRequest !== undefined) {
      NetworkAPIV1_APIV1MacroRequest.encode(message.macroRequest, writer.uint32(66).fork()).ldelim();
    }
    if (message.masksRequest !== undefined) {
      NetworkAPIV1_APIV1MasksRequest.encode(message.masksRequest, writer.uint32(74).fork()).ldelim();
    }
    if (message.mediaRequest !== undefined) {
      NetworkAPIV1_APIV1MediaRequest.encode(message.mediaRequest, writer.uint32(82).fork()).ldelim();
    }
    if (message.messageRequest !== undefined) {
      NetworkAPIV1_APIV1MessageRequest.encode(message.messageRequest, writer.uint32(90).fork()).ldelim();
    }
    if (message.miscellaneousRequest !== undefined) {
      NetworkAPIV1_APIV1MiscellaneousRequest.encode(message.miscellaneousRequest, writer.uint32(98).fork()).ldelim();
    }
    if (message.playlistRequest !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest.encode(message.playlistRequest, writer.uint32(106).fork()).ldelim();
    }
    if (message.prerollRequest !== undefined) {
      NetworkAPIV1_APIV1PrerollRequest.encode(message.prerollRequest, writer.uint32(114).fork()).ldelim();
    }
    if (message.presentationRequest !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest.encode(message.presentationRequest, writer.uint32(122).fork()).ldelim();
    }
    if (message.propRequest !== undefined) {
      NetworkAPIV1_APIV1PropRequest.encode(message.propRequest, writer.uint32(130).fork()).ldelim();
    }
    if (message.stageRequest !== undefined) {
      NetworkAPIV1_APIV1StageRequest.encode(message.stageRequest, writer.uint32(138).fork()).ldelim();
    }
    if (message.statusRequest !== undefined) {
      NetworkAPIV1_APIV1StatusRequest.encode(message.statusRequest, writer.uint32(146).fork()).ldelim();
    }
    if (message.themeRequest !== undefined) {
      NetworkAPIV1_APIV1ThemeRequest.encode(message.themeRequest, writer.uint32(154).fork()).ldelim();
    }
    if (message.timerRequest !== undefined) {
      NetworkAPIV1_APIV1TimerRequest.encode(message.timerRequest, writer.uint32(162).fork()).ldelim();
    }
    if (message.transportRequest !== undefined) {
      NetworkAPIV1_APIV1TransportRequest.encode(message.transportRequest, writer.uint32(170).fork()).ldelim();
    }
    if (message.triggerRequest !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest.encode(message.triggerRequest, writer.uint32(178).fork()).ldelim();
    }
    if (message.videoInputsRequest !== undefined) {
      NetworkAPIV1_APIV1VideoInputsRequest.encode(message.videoInputsRequest, writer.uint32(186).fork()).ldelim();
    }
    if (message.announcementRequest !== undefined) {
      NetworkAPIV1_APIV1AnnouncementRequest.encode(message.announcementRequest, writer.uint32(194).fork()).ldelim();
    }
    if (message.audioResponse !== undefined) {
      NetworkAPIV1_APIV1AudioResponse.encode(message.audioResponse, writer.uint32(810).fork()).ldelim();
    }
    if (message.captureResponse !== undefined) {
      NetworkAPIV1_APIV1CaptureResponse.encode(message.captureResponse, writer.uint32(818).fork()).ldelim();
    }
    if (message.clearingResponse !== undefined) {
      NetworkAPIV1_APIV1ClearResponse.encode(message.clearingResponse, writer.uint32(826).fork()).ldelim();
    }
    if (message.groupsResponse !== undefined) {
      NetworkAPIV1_APIV1GroupsResponse.encode(message.groupsResponse, writer.uint32(834).fork()).ldelim();
    }
    if (message.linkResponse !== undefined) {
      NetworkAPIV1_APIV1LinkResponse.encode(message.linkResponse, writer.uint32(842).fork()).ldelim();
    }
    if (message.libraryResponse !== undefined) {
      NetworkAPIV1_APIV1LibraryResponse.encode(message.libraryResponse, writer.uint32(850).fork()).ldelim();
    }
    if (message.looksResponse !== undefined) {
      NetworkAPIV1_APIV1LooksResponse.encode(message.looksResponse, writer.uint32(858).fork()).ldelim();
    }
    if (message.macroResponse !== undefined) {
      NetworkAPIV1_APIV1MacroResponse.encode(message.macroResponse, writer.uint32(866).fork()).ldelim();
    }
    if (message.masksResponse !== undefined) {
      NetworkAPIV1_APIV1MasksResponse.encode(message.masksResponse, writer.uint32(874).fork()).ldelim();
    }
    if (message.mediaResponse !== undefined) {
      NetworkAPIV1_APIV1MediaResponse.encode(message.mediaResponse, writer.uint32(882).fork()).ldelim();
    }
    if (message.messageResponse !== undefined) {
      NetworkAPIV1_APIV1MessageResponse.encode(message.messageResponse, writer.uint32(890).fork()).ldelim();
    }
    if (message.miscellaneousResponse !== undefined) {
      NetworkAPIV1_APIV1MiscellaneousResponse.encode(message.miscellaneousResponse, writer.uint32(898).fork()).ldelim();
    }
    if (message.playlistResponse !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse.encode(message.playlistResponse, writer.uint32(906).fork()).ldelim();
    }
    if (message.prerollResponse !== undefined) {
      NetworkAPIV1_APIV1PrerollResponse.encode(message.prerollResponse, writer.uint32(914).fork()).ldelim();
    }
    if (message.presentationResponse !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse.encode(message.presentationResponse, writer.uint32(922).fork()).ldelim();
    }
    if (message.propResponse !== undefined) {
      NetworkAPIV1_APIV1PropResponse.encode(message.propResponse, writer.uint32(930).fork()).ldelim();
    }
    if (message.stageResponse !== undefined) {
      NetworkAPIV1_APIV1StageResponse.encode(message.stageResponse, writer.uint32(938).fork()).ldelim();
    }
    if (message.statusResponse !== undefined) {
      NetworkAPIV1_APIV1StatusResponse.encode(message.statusResponse, writer.uint32(946).fork()).ldelim();
    }
    if (message.themeResponse !== undefined) {
      NetworkAPIV1_APIV1ThemeResponse.encode(message.themeResponse, writer.uint32(954).fork()).ldelim();
    }
    if (message.timerResponse !== undefined) {
      NetworkAPIV1_APIV1TimerResponse.encode(message.timerResponse, writer.uint32(962).fork()).ldelim();
    }
    if (message.transportResponse !== undefined) {
      NetworkAPIV1_APIV1TransportResponse.encode(message.transportResponse, writer.uint32(970).fork()).ldelim();
    }
    if (message.triggerResponse !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse.encode(message.triggerResponse, writer.uint32(978).fork()).ldelim();
    }
    if (message.videoInputsResponse !== undefined) {
      NetworkAPIV1_APIV1VideoInputsResponse.encode(message.videoInputsResponse, writer.uint32(986).fork()).ldelim();
    }
    if (message.announcementResponse !== undefined) {
      NetworkAPIV1_APIV1AnnouncementResponse.encode(message.announcementResponse, writer.uint32(994).fork()).ldelim();
    }
    if (message.errorResponse !== undefined) {
      APIV1ErrorResponse.encode(message.errorResponse, writer.uint32(1602).fork()).ldelim();
    }
    if (message.updateIdentifier !== undefined) {
      writer.uint32(1610).string(message.updateIdentifier);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_Action {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_Action();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.audioRequest = NetworkAPIV1_APIV1AudioRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.captureRequest = NetworkAPIV1_APIV1CaptureRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.clearingRequest = NetworkAPIV1_APIV1ClearRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.groupsRequest = NetworkAPIV1_APIV1GroupsRequest.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.linkRequest = NetworkAPIV1_APIV1LinkRequest.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.libraryRequest = NetworkAPIV1_APIV1LibraryRequest.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.looksRequest = NetworkAPIV1_APIV1LooksRequest.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.macroRequest = NetworkAPIV1_APIV1MacroRequest.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.masksRequest = NetworkAPIV1_APIV1MasksRequest.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.mediaRequest = NetworkAPIV1_APIV1MediaRequest.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.messageRequest = NetworkAPIV1_APIV1MessageRequest.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.miscellaneousRequest = NetworkAPIV1_APIV1MiscellaneousRequest.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 106) {
            break;
          }

          message.playlistRequest = NetworkAPIV1_APIV1PlaylistRequest.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag != 114) {
            break;
          }

          message.prerollRequest = NetworkAPIV1_APIV1PrerollRequest.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag != 122) {
            break;
          }

          message.presentationRequest = NetworkAPIV1_APIV1PresentationRequest.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag != 130) {
            break;
          }

          message.propRequest = NetworkAPIV1_APIV1PropRequest.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag != 138) {
            break;
          }

          message.stageRequest = NetworkAPIV1_APIV1StageRequest.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag != 146) {
            break;
          }

          message.statusRequest = NetworkAPIV1_APIV1StatusRequest.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag != 154) {
            break;
          }

          message.themeRequest = NetworkAPIV1_APIV1ThemeRequest.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag != 162) {
            break;
          }

          message.timerRequest = NetworkAPIV1_APIV1TimerRequest.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag != 170) {
            break;
          }

          message.transportRequest = NetworkAPIV1_APIV1TransportRequest.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag != 178) {
            break;
          }

          message.triggerRequest = NetworkAPIV1_APIV1TriggerRequest.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag != 186) {
            break;
          }

          message.videoInputsRequest = NetworkAPIV1_APIV1VideoInputsRequest.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag != 194) {
            break;
          }

          message.announcementRequest = NetworkAPIV1_APIV1AnnouncementRequest.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag != 810) {
            break;
          }

          message.audioResponse = NetworkAPIV1_APIV1AudioResponse.decode(reader, reader.uint32());
          continue;
        case 102:
          if (tag != 818) {
            break;
          }

          message.captureResponse = NetworkAPIV1_APIV1CaptureResponse.decode(reader, reader.uint32());
          continue;
        case 103:
          if (tag != 826) {
            break;
          }

          message.clearingResponse = NetworkAPIV1_APIV1ClearResponse.decode(reader, reader.uint32());
          continue;
        case 104:
          if (tag != 834) {
            break;
          }

          message.groupsResponse = NetworkAPIV1_APIV1GroupsResponse.decode(reader, reader.uint32());
          continue;
        case 105:
          if (tag != 842) {
            break;
          }

          message.linkResponse = NetworkAPIV1_APIV1LinkResponse.decode(reader, reader.uint32());
          continue;
        case 106:
          if (tag != 850) {
            break;
          }

          message.libraryResponse = NetworkAPIV1_APIV1LibraryResponse.decode(reader, reader.uint32());
          continue;
        case 107:
          if (tag != 858) {
            break;
          }

          message.looksResponse = NetworkAPIV1_APIV1LooksResponse.decode(reader, reader.uint32());
          continue;
        case 108:
          if (tag != 866) {
            break;
          }

          message.macroResponse = NetworkAPIV1_APIV1MacroResponse.decode(reader, reader.uint32());
          continue;
        case 109:
          if (tag != 874) {
            break;
          }

          message.masksResponse = NetworkAPIV1_APIV1MasksResponse.decode(reader, reader.uint32());
          continue;
        case 110:
          if (tag != 882) {
            break;
          }

          message.mediaResponse = NetworkAPIV1_APIV1MediaResponse.decode(reader, reader.uint32());
          continue;
        case 111:
          if (tag != 890) {
            break;
          }

          message.messageResponse = NetworkAPIV1_APIV1MessageResponse.decode(reader, reader.uint32());
          continue;
        case 112:
          if (tag != 898) {
            break;
          }

          message.miscellaneousResponse = NetworkAPIV1_APIV1MiscellaneousResponse.decode(reader, reader.uint32());
          continue;
        case 113:
          if (tag != 906) {
            break;
          }

          message.playlistResponse = NetworkAPIV1_APIV1PlaylistResponse.decode(reader, reader.uint32());
          continue;
        case 114:
          if (tag != 914) {
            break;
          }

          message.prerollResponse = NetworkAPIV1_APIV1PrerollResponse.decode(reader, reader.uint32());
          continue;
        case 115:
          if (tag != 922) {
            break;
          }

          message.presentationResponse = NetworkAPIV1_APIV1PresentationResponse.decode(reader, reader.uint32());
          continue;
        case 116:
          if (tag != 930) {
            break;
          }

          message.propResponse = NetworkAPIV1_APIV1PropResponse.decode(reader, reader.uint32());
          continue;
        case 117:
          if (tag != 938) {
            break;
          }

          message.stageResponse = NetworkAPIV1_APIV1StageResponse.decode(reader, reader.uint32());
          continue;
        case 118:
          if (tag != 946) {
            break;
          }

          message.statusResponse = NetworkAPIV1_APIV1StatusResponse.decode(reader, reader.uint32());
          continue;
        case 119:
          if (tag != 954) {
            break;
          }

          message.themeResponse = NetworkAPIV1_APIV1ThemeResponse.decode(reader, reader.uint32());
          continue;
        case 120:
          if (tag != 962) {
            break;
          }

          message.timerResponse = NetworkAPIV1_APIV1TimerResponse.decode(reader, reader.uint32());
          continue;
        case 121:
          if (tag != 970) {
            break;
          }

          message.transportResponse = NetworkAPIV1_APIV1TransportResponse.decode(reader, reader.uint32());
          continue;
        case 122:
          if (tag != 978) {
            break;
          }

          message.triggerResponse = NetworkAPIV1_APIV1TriggerResponse.decode(reader, reader.uint32());
          continue;
        case 123:
          if (tag != 986) {
            break;
          }

          message.videoInputsResponse = NetworkAPIV1_APIV1VideoInputsResponse.decode(reader, reader.uint32());
          continue;
        case 124:
          if (tag != 994) {
            break;
          }

          message.announcementResponse = NetworkAPIV1_APIV1AnnouncementResponse.decode(reader, reader.uint32());
          continue;
        case 200:
          if (tag != 1602) {
            break;
          }

          message.errorResponse = APIV1ErrorResponse.decode(reader, reader.uint32());
          continue;
        case 201:
          if (tag != 1610) {
            break;
          }

          message.updateIdentifier = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_Action {
    return {
      audioRequest: isSet(object.audioRequest)
        ? NetworkAPIV1_APIV1AudioRequest.fromJSON(object.audioRequest)
        : undefined,
      captureRequest: isSet(object.captureRequest)
        ? NetworkAPIV1_APIV1CaptureRequest.fromJSON(object.captureRequest)
        : undefined,
      clearingRequest: isSet(object.clearingRequest)
        ? NetworkAPIV1_APIV1ClearRequest.fromJSON(object.clearingRequest)
        : undefined,
      groupsRequest: isSet(object.groupsRequest)
        ? NetworkAPIV1_APIV1GroupsRequest.fromJSON(object.groupsRequest)
        : undefined,
      linkRequest: isSet(object.linkRequest) ? NetworkAPIV1_APIV1LinkRequest.fromJSON(object.linkRequest) : undefined,
      libraryRequest: isSet(object.libraryRequest)
        ? NetworkAPIV1_APIV1LibraryRequest.fromJSON(object.libraryRequest)
        : undefined,
      looksRequest: isSet(object.looksRequest)
        ? NetworkAPIV1_APIV1LooksRequest.fromJSON(object.looksRequest)
        : undefined,
      macroRequest: isSet(object.macroRequest)
        ? NetworkAPIV1_APIV1MacroRequest.fromJSON(object.macroRequest)
        : undefined,
      masksRequest: isSet(object.masksRequest)
        ? NetworkAPIV1_APIV1MasksRequest.fromJSON(object.masksRequest)
        : undefined,
      mediaRequest: isSet(object.mediaRequest)
        ? NetworkAPIV1_APIV1MediaRequest.fromJSON(object.mediaRequest)
        : undefined,
      messageRequest: isSet(object.messageRequest)
        ? NetworkAPIV1_APIV1MessageRequest.fromJSON(object.messageRequest)
        : undefined,
      miscellaneousRequest: isSet(object.miscellaneousRequest)
        ? NetworkAPIV1_APIV1MiscellaneousRequest.fromJSON(object.miscellaneousRequest)
        : undefined,
      playlistRequest: isSet(object.playlistRequest)
        ? NetworkAPIV1_APIV1PlaylistRequest.fromJSON(object.playlistRequest)
        : undefined,
      prerollRequest: isSet(object.prerollRequest)
        ? NetworkAPIV1_APIV1PrerollRequest.fromJSON(object.prerollRequest)
        : undefined,
      presentationRequest: isSet(object.presentationRequest)
        ? NetworkAPIV1_APIV1PresentationRequest.fromJSON(object.presentationRequest)
        : undefined,
      propRequest: isSet(object.propRequest) ? NetworkAPIV1_APIV1PropRequest.fromJSON(object.propRequest) : undefined,
      stageRequest: isSet(object.stageRequest)
        ? NetworkAPIV1_APIV1StageRequest.fromJSON(object.stageRequest)
        : undefined,
      statusRequest: isSet(object.statusRequest)
        ? NetworkAPIV1_APIV1StatusRequest.fromJSON(object.statusRequest)
        : undefined,
      themeRequest: isSet(object.themeRequest)
        ? NetworkAPIV1_APIV1ThemeRequest.fromJSON(object.themeRequest)
        : undefined,
      timerRequest: isSet(object.timerRequest)
        ? NetworkAPIV1_APIV1TimerRequest.fromJSON(object.timerRequest)
        : undefined,
      transportRequest: isSet(object.transportRequest)
        ? NetworkAPIV1_APIV1TransportRequest.fromJSON(object.transportRequest)
        : undefined,
      triggerRequest: isSet(object.triggerRequest)
        ? NetworkAPIV1_APIV1TriggerRequest.fromJSON(object.triggerRequest)
        : undefined,
      videoInputsRequest: isSet(object.videoInputsRequest)
        ? NetworkAPIV1_APIV1VideoInputsRequest.fromJSON(object.videoInputsRequest)
        : undefined,
      announcementRequest: isSet(object.announcementRequest)
        ? NetworkAPIV1_APIV1AnnouncementRequest.fromJSON(object.announcementRequest)
        : undefined,
      audioResponse: isSet(object.audioResponse)
        ? NetworkAPIV1_APIV1AudioResponse.fromJSON(object.audioResponse)
        : undefined,
      captureResponse: isSet(object.captureResponse)
        ? NetworkAPIV1_APIV1CaptureResponse.fromJSON(object.captureResponse)
        : undefined,
      clearingResponse: isSet(object.clearingResponse)
        ? NetworkAPIV1_APIV1ClearResponse.fromJSON(object.clearingResponse)
        : undefined,
      groupsResponse: isSet(object.groupsResponse)
        ? NetworkAPIV1_APIV1GroupsResponse.fromJSON(object.groupsResponse)
        : undefined,
      linkResponse: isSet(object.linkResponse)
        ? NetworkAPIV1_APIV1LinkResponse.fromJSON(object.linkResponse)
        : undefined,
      libraryResponse: isSet(object.libraryResponse)
        ? NetworkAPIV1_APIV1LibraryResponse.fromJSON(object.libraryResponse)
        : undefined,
      looksResponse: isSet(object.looksResponse)
        ? NetworkAPIV1_APIV1LooksResponse.fromJSON(object.looksResponse)
        : undefined,
      macroResponse: isSet(object.macroResponse)
        ? NetworkAPIV1_APIV1MacroResponse.fromJSON(object.macroResponse)
        : undefined,
      masksResponse: isSet(object.masksResponse)
        ? NetworkAPIV1_APIV1MasksResponse.fromJSON(object.masksResponse)
        : undefined,
      mediaResponse: isSet(object.mediaResponse)
        ? NetworkAPIV1_APIV1MediaResponse.fromJSON(object.mediaResponse)
        : undefined,
      messageResponse: isSet(object.messageResponse)
        ? NetworkAPIV1_APIV1MessageResponse.fromJSON(object.messageResponse)
        : undefined,
      miscellaneousResponse: isSet(object.miscellaneousResponse)
        ? NetworkAPIV1_APIV1MiscellaneousResponse.fromJSON(object.miscellaneousResponse)
        : undefined,
      playlistResponse: isSet(object.playlistResponse)
        ? NetworkAPIV1_APIV1PlaylistResponse.fromJSON(object.playlistResponse)
        : undefined,
      prerollResponse: isSet(object.prerollResponse)
        ? NetworkAPIV1_APIV1PrerollResponse.fromJSON(object.prerollResponse)
        : undefined,
      presentationResponse: isSet(object.presentationResponse)
        ? NetworkAPIV1_APIV1PresentationResponse.fromJSON(object.presentationResponse)
        : undefined,
      propResponse: isSet(object.propResponse)
        ? NetworkAPIV1_APIV1PropResponse.fromJSON(object.propResponse)
        : undefined,
      stageResponse: isSet(object.stageResponse)
        ? NetworkAPIV1_APIV1StageResponse.fromJSON(object.stageResponse)
        : undefined,
      statusResponse: isSet(object.statusResponse)
        ? NetworkAPIV1_APIV1StatusResponse.fromJSON(object.statusResponse)
        : undefined,
      themeResponse: isSet(object.themeResponse)
        ? NetworkAPIV1_APIV1ThemeResponse.fromJSON(object.themeResponse)
        : undefined,
      timerResponse: isSet(object.timerResponse)
        ? NetworkAPIV1_APIV1TimerResponse.fromJSON(object.timerResponse)
        : undefined,
      transportResponse: isSet(object.transportResponse)
        ? NetworkAPIV1_APIV1TransportResponse.fromJSON(object.transportResponse)
        : undefined,
      triggerResponse: isSet(object.triggerResponse)
        ? NetworkAPIV1_APIV1TriggerResponse.fromJSON(object.triggerResponse)
        : undefined,
      videoInputsResponse: isSet(object.videoInputsResponse)
        ? NetworkAPIV1_APIV1VideoInputsResponse.fromJSON(object.videoInputsResponse)
        : undefined,
      announcementResponse: isSet(object.announcementResponse)
        ? NetworkAPIV1_APIV1AnnouncementResponse.fromJSON(object.announcementResponse)
        : undefined,
      errorResponse: isSet(object.errorResponse) ? APIV1ErrorResponse.fromJSON(object.errorResponse) : undefined,
      updateIdentifier: isSet(object.updateIdentifier) ? String(object.updateIdentifier) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_Action): unknown {
    const obj: any = {};
    message.audioRequest !== undefined &&
      (obj.audioRequest = message.audioRequest
        ? NetworkAPIV1_APIV1AudioRequest.toJSON(message.audioRequest)
        : undefined);
    message.captureRequest !== undefined && (obj.captureRequest = message.captureRequest
      ? NetworkAPIV1_APIV1CaptureRequest.toJSON(message.captureRequest)
      : undefined);
    message.clearingRequest !== undefined && (obj.clearingRequest = message.clearingRequest
      ? NetworkAPIV1_APIV1ClearRequest.toJSON(message.clearingRequest)
      : undefined);
    message.groupsRequest !== undefined && (obj.groupsRequest = message.groupsRequest
      ? NetworkAPIV1_APIV1GroupsRequest.toJSON(message.groupsRequest)
      : undefined);
    message.linkRequest !== undefined &&
      (obj.linkRequest = message.linkRequest ? NetworkAPIV1_APIV1LinkRequest.toJSON(message.linkRequest) : undefined);
    message.libraryRequest !== undefined && (obj.libraryRequest = message.libraryRequest
      ? NetworkAPIV1_APIV1LibraryRequest.toJSON(message.libraryRequest)
      : undefined);
    message.looksRequest !== undefined &&
      (obj.looksRequest = message.looksRequest
        ? NetworkAPIV1_APIV1LooksRequest.toJSON(message.looksRequest)
        : undefined);
    message.macroRequest !== undefined &&
      (obj.macroRequest = message.macroRequest
        ? NetworkAPIV1_APIV1MacroRequest.toJSON(message.macroRequest)
        : undefined);
    message.masksRequest !== undefined &&
      (obj.masksRequest = message.masksRequest
        ? NetworkAPIV1_APIV1MasksRequest.toJSON(message.masksRequest)
        : undefined);
    message.mediaRequest !== undefined &&
      (obj.mediaRequest = message.mediaRequest
        ? NetworkAPIV1_APIV1MediaRequest.toJSON(message.mediaRequest)
        : undefined);
    message.messageRequest !== undefined && (obj.messageRequest = message.messageRequest
      ? NetworkAPIV1_APIV1MessageRequest.toJSON(message.messageRequest)
      : undefined);
    message.miscellaneousRequest !== undefined && (obj.miscellaneousRequest = message.miscellaneousRequest
      ? NetworkAPIV1_APIV1MiscellaneousRequest.toJSON(message.miscellaneousRequest)
      : undefined);
    message.playlistRequest !== undefined && (obj.playlistRequest = message.playlistRequest
      ? NetworkAPIV1_APIV1PlaylistRequest.toJSON(message.playlistRequest)
      : undefined);
    message.prerollRequest !== undefined && (obj.prerollRequest = message.prerollRequest
      ? NetworkAPIV1_APIV1PrerollRequest.toJSON(message.prerollRequest)
      : undefined);
    message.presentationRequest !== undefined && (obj.presentationRequest = message.presentationRequest
      ? NetworkAPIV1_APIV1PresentationRequest.toJSON(message.presentationRequest)
      : undefined);
    message.propRequest !== undefined &&
      (obj.propRequest = message.propRequest ? NetworkAPIV1_APIV1PropRequest.toJSON(message.propRequest) : undefined);
    message.stageRequest !== undefined &&
      (obj.stageRequest = message.stageRequest
        ? NetworkAPIV1_APIV1StageRequest.toJSON(message.stageRequest)
        : undefined);
    message.statusRequest !== undefined && (obj.statusRequest = message.statusRequest
      ? NetworkAPIV1_APIV1StatusRequest.toJSON(message.statusRequest)
      : undefined);
    message.themeRequest !== undefined &&
      (obj.themeRequest = message.themeRequest
        ? NetworkAPIV1_APIV1ThemeRequest.toJSON(message.themeRequest)
        : undefined);
    message.timerRequest !== undefined &&
      (obj.timerRequest = message.timerRequest
        ? NetworkAPIV1_APIV1TimerRequest.toJSON(message.timerRequest)
        : undefined);
    message.transportRequest !== undefined && (obj.transportRequest = message.transportRequest
      ? NetworkAPIV1_APIV1TransportRequest.toJSON(message.transportRequest)
      : undefined);
    message.triggerRequest !== undefined && (obj.triggerRequest = message.triggerRequest
      ? NetworkAPIV1_APIV1TriggerRequest.toJSON(message.triggerRequest)
      : undefined);
    message.videoInputsRequest !== undefined && (obj.videoInputsRequest = message.videoInputsRequest
      ? NetworkAPIV1_APIV1VideoInputsRequest.toJSON(message.videoInputsRequest)
      : undefined);
    message.announcementRequest !== undefined && (obj.announcementRequest = message.announcementRequest
      ? NetworkAPIV1_APIV1AnnouncementRequest.toJSON(message.announcementRequest)
      : undefined);
    message.audioResponse !== undefined && (obj.audioResponse = message.audioResponse
      ? NetworkAPIV1_APIV1AudioResponse.toJSON(message.audioResponse)
      : undefined);
    message.captureResponse !== undefined && (obj.captureResponse = message.captureResponse
      ? NetworkAPIV1_APIV1CaptureResponse.toJSON(message.captureResponse)
      : undefined);
    message.clearingResponse !== undefined && (obj.clearingResponse = message.clearingResponse
      ? NetworkAPIV1_APIV1ClearResponse.toJSON(message.clearingResponse)
      : undefined);
    message.groupsResponse !== undefined && (obj.groupsResponse = message.groupsResponse
      ? NetworkAPIV1_APIV1GroupsResponse.toJSON(message.groupsResponse)
      : undefined);
    message.linkResponse !== undefined &&
      (obj.linkResponse = message.linkResponse
        ? NetworkAPIV1_APIV1LinkResponse.toJSON(message.linkResponse)
        : undefined);
    message.libraryResponse !== undefined && (obj.libraryResponse = message.libraryResponse
      ? NetworkAPIV1_APIV1LibraryResponse.toJSON(message.libraryResponse)
      : undefined);
    message.looksResponse !== undefined && (obj.looksResponse = message.looksResponse
      ? NetworkAPIV1_APIV1LooksResponse.toJSON(message.looksResponse)
      : undefined);
    message.macroResponse !== undefined && (obj.macroResponse = message.macroResponse
      ? NetworkAPIV1_APIV1MacroResponse.toJSON(message.macroResponse)
      : undefined);
    message.masksResponse !== undefined && (obj.masksResponse = message.masksResponse
      ? NetworkAPIV1_APIV1MasksResponse.toJSON(message.masksResponse)
      : undefined);
    message.mediaResponse !== undefined && (obj.mediaResponse = message.mediaResponse
      ? NetworkAPIV1_APIV1MediaResponse.toJSON(message.mediaResponse)
      : undefined);
    message.messageResponse !== undefined && (obj.messageResponse = message.messageResponse
      ? NetworkAPIV1_APIV1MessageResponse.toJSON(message.messageResponse)
      : undefined);
    message.miscellaneousResponse !== undefined && (obj.miscellaneousResponse = message.miscellaneousResponse
      ? NetworkAPIV1_APIV1MiscellaneousResponse.toJSON(message.miscellaneousResponse)
      : undefined);
    message.playlistResponse !== undefined && (obj.playlistResponse = message.playlistResponse
      ? NetworkAPIV1_APIV1PlaylistResponse.toJSON(message.playlistResponse)
      : undefined);
    message.prerollResponse !== undefined && (obj.prerollResponse = message.prerollResponse
      ? NetworkAPIV1_APIV1PrerollResponse.toJSON(message.prerollResponse)
      : undefined);
    message.presentationResponse !== undefined && (obj.presentationResponse = message.presentationResponse
      ? NetworkAPIV1_APIV1PresentationResponse.toJSON(message.presentationResponse)
      : undefined);
    message.propResponse !== undefined &&
      (obj.propResponse = message.propResponse
        ? NetworkAPIV1_APIV1PropResponse.toJSON(message.propResponse)
        : undefined);
    message.stageResponse !== undefined && (obj.stageResponse = message.stageResponse
      ? NetworkAPIV1_APIV1StageResponse.toJSON(message.stageResponse)
      : undefined);
    message.statusResponse !== undefined && (obj.statusResponse = message.statusResponse
      ? NetworkAPIV1_APIV1StatusResponse.toJSON(message.statusResponse)
      : undefined);
    message.themeResponse !== undefined && (obj.themeResponse = message.themeResponse
      ? NetworkAPIV1_APIV1ThemeResponse.toJSON(message.themeResponse)
      : undefined);
    message.timerResponse !== undefined && (obj.timerResponse = message.timerResponse
      ? NetworkAPIV1_APIV1TimerResponse.toJSON(message.timerResponse)
      : undefined);
    message.transportResponse !== undefined && (obj.transportResponse = message.transportResponse
      ? NetworkAPIV1_APIV1TransportResponse.toJSON(message.transportResponse)
      : undefined);
    message.triggerResponse !== undefined && (obj.triggerResponse = message.triggerResponse
      ? NetworkAPIV1_APIV1TriggerResponse.toJSON(message.triggerResponse)
      : undefined);
    message.videoInputsResponse !== undefined && (obj.videoInputsResponse = message.videoInputsResponse
      ? NetworkAPIV1_APIV1VideoInputsResponse.toJSON(message.videoInputsResponse)
      : undefined);
    message.announcementResponse !== undefined && (obj.announcementResponse = message.announcementResponse
      ? NetworkAPIV1_APIV1AnnouncementResponse.toJSON(message.announcementResponse)
      : undefined);
    message.errorResponse !== undefined &&
      (obj.errorResponse = message.errorResponse ? APIV1ErrorResponse.toJSON(message.errorResponse) : undefined);
    message.updateIdentifier !== undefined && (obj.updateIdentifier = message.updateIdentifier);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_Action>, I>>(base?: I): NetworkAPIV1_Action {
    return NetworkAPIV1_Action.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_Action>, I>>(object: I): NetworkAPIV1_Action {
    const message = createBaseNetworkAPIV1_Action();
    message.audioRequest = (object.audioRequest !== undefined && object.audioRequest !== null)
      ? NetworkAPIV1_APIV1AudioRequest.fromPartial(object.audioRequest)
      : undefined;
    message.captureRequest = (object.captureRequest !== undefined && object.captureRequest !== null)
      ? NetworkAPIV1_APIV1CaptureRequest.fromPartial(object.captureRequest)
      : undefined;
    message.clearingRequest = (object.clearingRequest !== undefined && object.clearingRequest !== null)
      ? NetworkAPIV1_APIV1ClearRequest.fromPartial(object.clearingRequest)
      : undefined;
    message.groupsRequest = (object.groupsRequest !== undefined && object.groupsRequest !== null)
      ? NetworkAPIV1_APIV1GroupsRequest.fromPartial(object.groupsRequest)
      : undefined;
    message.linkRequest = (object.linkRequest !== undefined && object.linkRequest !== null)
      ? NetworkAPIV1_APIV1LinkRequest.fromPartial(object.linkRequest)
      : undefined;
    message.libraryRequest = (object.libraryRequest !== undefined && object.libraryRequest !== null)
      ? NetworkAPIV1_APIV1LibraryRequest.fromPartial(object.libraryRequest)
      : undefined;
    message.looksRequest = (object.looksRequest !== undefined && object.looksRequest !== null)
      ? NetworkAPIV1_APIV1LooksRequest.fromPartial(object.looksRequest)
      : undefined;
    message.macroRequest = (object.macroRequest !== undefined && object.macroRequest !== null)
      ? NetworkAPIV1_APIV1MacroRequest.fromPartial(object.macroRequest)
      : undefined;
    message.masksRequest = (object.masksRequest !== undefined && object.masksRequest !== null)
      ? NetworkAPIV1_APIV1MasksRequest.fromPartial(object.masksRequest)
      : undefined;
    message.mediaRequest = (object.mediaRequest !== undefined && object.mediaRequest !== null)
      ? NetworkAPIV1_APIV1MediaRequest.fromPartial(object.mediaRequest)
      : undefined;
    message.messageRequest = (object.messageRequest !== undefined && object.messageRequest !== null)
      ? NetworkAPIV1_APIV1MessageRequest.fromPartial(object.messageRequest)
      : undefined;
    message.miscellaneousRequest = (object.miscellaneousRequest !== undefined && object.miscellaneousRequest !== null)
      ? NetworkAPIV1_APIV1MiscellaneousRequest.fromPartial(object.miscellaneousRequest)
      : undefined;
    message.playlistRequest = (object.playlistRequest !== undefined && object.playlistRequest !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest.fromPartial(object.playlistRequest)
      : undefined;
    message.prerollRequest = (object.prerollRequest !== undefined && object.prerollRequest !== null)
      ? NetworkAPIV1_APIV1PrerollRequest.fromPartial(object.prerollRequest)
      : undefined;
    message.presentationRequest = (object.presentationRequest !== undefined && object.presentationRequest !== null)
      ? NetworkAPIV1_APIV1PresentationRequest.fromPartial(object.presentationRequest)
      : undefined;
    message.propRequest = (object.propRequest !== undefined && object.propRequest !== null)
      ? NetworkAPIV1_APIV1PropRequest.fromPartial(object.propRequest)
      : undefined;
    message.stageRequest = (object.stageRequest !== undefined && object.stageRequest !== null)
      ? NetworkAPIV1_APIV1StageRequest.fromPartial(object.stageRequest)
      : undefined;
    message.statusRequest = (object.statusRequest !== undefined && object.statusRequest !== null)
      ? NetworkAPIV1_APIV1StatusRequest.fromPartial(object.statusRequest)
      : undefined;
    message.themeRequest = (object.themeRequest !== undefined && object.themeRequest !== null)
      ? NetworkAPIV1_APIV1ThemeRequest.fromPartial(object.themeRequest)
      : undefined;
    message.timerRequest = (object.timerRequest !== undefined && object.timerRequest !== null)
      ? NetworkAPIV1_APIV1TimerRequest.fromPartial(object.timerRequest)
      : undefined;
    message.transportRequest = (object.transportRequest !== undefined && object.transportRequest !== null)
      ? NetworkAPIV1_APIV1TransportRequest.fromPartial(object.transportRequest)
      : undefined;
    message.triggerRequest = (object.triggerRequest !== undefined && object.triggerRequest !== null)
      ? NetworkAPIV1_APIV1TriggerRequest.fromPartial(object.triggerRequest)
      : undefined;
    message.videoInputsRequest = (object.videoInputsRequest !== undefined && object.videoInputsRequest !== null)
      ? NetworkAPIV1_APIV1VideoInputsRequest.fromPartial(object.videoInputsRequest)
      : undefined;
    message.announcementRequest = (object.announcementRequest !== undefined && object.announcementRequest !== null)
      ? NetworkAPIV1_APIV1AnnouncementRequest.fromPartial(object.announcementRequest)
      : undefined;
    message.audioResponse = (object.audioResponse !== undefined && object.audioResponse !== null)
      ? NetworkAPIV1_APIV1AudioResponse.fromPartial(object.audioResponse)
      : undefined;
    message.captureResponse = (object.captureResponse !== undefined && object.captureResponse !== null)
      ? NetworkAPIV1_APIV1CaptureResponse.fromPartial(object.captureResponse)
      : undefined;
    message.clearingResponse = (object.clearingResponse !== undefined && object.clearingResponse !== null)
      ? NetworkAPIV1_APIV1ClearResponse.fromPartial(object.clearingResponse)
      : undefined;
    message.groupsResponse = (object.groupsResponse !== undefined && object.groupsResponse !== null)
      ? NetworkAPIV1_APIV1GroupsResponse.fromPartial(object.groupsResponse)
      : undefined;
    message.linkResponse = (object.linkResponse !== undefined && object.linkResponse !== null)
      ? NetworkAPIV1_APIV1LinkResponse.fromPartial(object.linkResponse)
      : undefined;
    message.libraryResponse = (object.libraryResponse !== undefined && object.libraryResponse !== null)
      ? NetworkAPIV1_APIV1LibraryResponse.fromPartial(object.libraryResponse)
      : undefined;
    message.looksResponse = (object.looksResponse !== undefined && object.looksResponse !== null)
      ? NetworkAPIV1_APIV1LooksResponse.fromPartial(object.looksResponse)
      : undefined;
    message.macroResponse = (object.macroResponse !== undefined && object.macroResponse !== null)
      ? NetworkAPIV1_APIV1MacroResponse.fromPartial(object.macroResponse)
      : undefined;
    message.masksResponse = (object.masksResponse !== undefined && object.masksResponse !== null)
      ? NetworkAPIV1_APIV1MasksResponse.fromPartial(object.masksResponse)
      : undefined;
    message.mediaResponse = (object.mediaResponse !== undefined && object.mediaResponse !== null)
      ? NetworkAPIV1_APIV1MediaResponse.fromPartial(object.mediaResponse)
      : undefined;
    message.messageResponse = (object.messageResponse !== undefined && object.messageResponse !== null)
      ? NetworkAPIV1_APIV1MessageResponse.fromPartial(object.messageResponse)
      : undefined;
    message.miscellaneousResponse =
      (object.miscellaneousResponse !== undefined && object.miscellaneousResponse !== null)
        ? NetworkAPIV1_APIV1MiscellaneousResponse.fromPartial(object.miscellaneousResponse)
        : undefined;
    message.playlistResponse = (object.playlistResponse !== undefined && object.playlistResponse !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse.fromPartial(object.playlistResponse)
      : undefined;
    message.prerollResponse = (object.prerollResponse !== undefined && object.prerollResponse !== null)
      ? NetworkAPIV1_APIV1PrerollResponse.fromPartial(object.prerollResponse)
      : undefined;
    message.presentationResponse = (object.presentationResponse !== undefined && object.presentationResponse !== null)
      ? NetworkAPIV1_APIV1PresentationResponse.fromPartial(object.presentationResponse)
      : undefined;
    message.propResponse = (object.propResponse !== undefined && object.propResponse !== null)
      ? NetworkAPIV1_APIV1PropResponse.fromPartial(object.propResponse)
      : undefined;
    message.stageResponse = (object.stageResponse !== undefined && object.stageResponse !== null)
      ? NetworkAPIV1_APIV1StageResponse.fromPartial(object.stageResponse)
      : undefined;
    message.statusResponse = (object.statusResponse !== undefined && object.statusResponse !== null)
      ? NetworkAPIV1_APIV1StatusResponse.fromPartial(object.statusResponse)
      : undefined;
    message.themeResponse = (object.themeResponse !== undefined && object.themeResponse !== null)
      ? NetworkAPIV1_APIV1ThemeResponse.fromPartial(object.themeResponse)
      : undefined;
    message.timerResponse = (object.timerResponse !== undefined && object.timerResponse !== null)
      ? NetworkAPIV1_APIV1TimerResponse.fromPartial(object.timerResponse)
      : undefined;
    message.transportResponse = (object.transportResponse !== undefined && object.transportResponse !== null)
      ? NetworkAPIV1_APIV1TransportResponse.fromPartial(object.transportResponse)
      : undefined;
    message.triggerResponse = (object.triggerResponse !== undefined && object.triggerResponse !== null)
      ? NetworkAPIV1_APIV1TriggerResponse.fromPartial(object.triggerResponse)
      : undefined;
    message.videoInputsResponse = (object.videoInputsResponse !== undefined && object.videoInputsResponse !== null)
      ? NetworkAPIV1_APIV1VideoInputsResponse.fromPartial(object.videoInputsResponse)
      : undefined;
    message.announcementResponse = (object.announcementResponse !== undefined && object.announcementResponse !== null)
      ? NetworkAPIV1_APIV1AnnouncementResponse.fromPartial(object.announcementResponse)
      : undefined;
    message.errorResponse = (object.errorResponse !== undefined && object.errorResponse !== null)
      ? APIV1ErrorResponse.fromPartial(object.errorResponse)
      : undefined;
    message.updateIdentifier = object.updateIdentifier ?? undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementRequest(): NetworkAPIV1_APIV1AnnouncementRequest {
  return {
    activeTimelineOperation: undefined,
    activeTimelineStatus: undefined,
    active: undefined,
    slideIndex: undefined,
    activeFocus: undefined,
    activeTrigger: undefined,
    activeNextTrigger: undefined,
    activePreviousTrigger: undefined,
    activeIndexTrigger: undefined,
  };
}

export const NetworkAPIV1_APIV1AnnouncementRequest = {
  encode(message: NetworkAPIV1_APIV1AnnouncementRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.activeTimelineOperation !== undefined) {
      NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation.encode(
        message.activeTimelineOperation,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    if (message.activeTimelineStatus !== undefined) {
      NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus.encode(
        message.activeTimelineStatus,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    if (message.active !== undefined) {
      NetworkAPIV1_APIV1AnnouncementRequest_Active.encode(message.active, writer.uint32(26).fork()).ldelim();
    }
    if (message.slideIndex !== undefined) {
      NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex.encode(message.slideIndex, writer.uint32(34).fork())
        .ldelim();
    }
    if (message.activeFocus !== undefined) {
      NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus.encode(message.activeFocus, writer.uint32(42).fork()).ldelim();
    }
    if (message.activeTrigger !== undefined) {
      NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger.encode(message.activeTrigger, writer.uint32(50).fork())
        .ldelim();
    }
    if (message.activeNextTrigger !== undefined) {
      NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger.encode(
        message.activeNextTrigger,
        writer.uint32(58).fork(),
      ).ldelim();
    }
    if (message.activePreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger.encode(
        message.activePreviousTrigger,
        writer.uint32(66).fork(),
      ).ldelim();
    }
    if (message.activeIndexTrigger !== undefined) {
      NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger.encode(
        message.activeIndexTrigger,
        writer.uint32(74).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.activeTimelineOperation = NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.activeTimelineStatus = NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.active = NetworkAPIV1_APIV1AnnouncementRequest_Active.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.slideIndex = NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.activeFocus = NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.activeTrigger = NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.activeNextTrigger = NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.activePreviousTrigger = NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.activeIndexTrigger = NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AnnouncementRequest {
    return {
      activeTimelineOperation: isSet(object.activeTimelineOperation)
        ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation.fromJSON(object.activeTimelineOperation)
        : undefined,
      activeTimelineStatus: isSet(object.activeTimelineStatus)
        ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus.fromJSON(object.activeTimelineStatus)
        : undefined,
      active: isSet(object.active) ? NetworkAPIV1_APIV1AnnouncementRequest_Active.fromJSON(object.active) : undefined,
      slideIndex: isSet(object.slideIndex)
        ? NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex.fromJSON(object.slideIndex)
        : undefined,
      activeFocus: isSet(object.activeFocus)
        ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus.fromJSON(object.activeFocus)
        : undefined,
      activeTrigger: isSet(object.activeTrigger)
        ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger.fromJSON(object.activeTrigger)
        : undefined,
      activeNextTrigger: isSet(object.activeNextTrigger)
        ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger.fromJSON(object.activeNextTrigger)
        : undefined,
      activePreviousTrigger: isSet(object.activePreviousTrigger)
        ? NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger.fromJSON(object.activePreviousTrigger)
        : undefined,
      activeIndexTrigger: isSet(object.activeIndexTrigger)
        ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger.fromJSON(object.activeIndexTrigger)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1AnnouncementRequest): unknown {
    const obj: any = {};
    message.activeTimelineOperation !== undefined && (obj.activeTimelineOperation = message.activeTimelineOperation
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation.toJSON(message.activeTimelineOperation)
      : undefined);
    message.activeTimelineStatus !== undefined && (obj.activeTimelineStatus = message.activeTimelineStatus
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus.toJSON(message.activeTimelineStatus)
      : undefined);
    message.active !== undefined &&
      (obj.active = message.active ? NetworkAPIV1_APIV1AnnouncementRequest_Active.toJSON(message.active) : undefined);
    message.slideIndex !== undefined && (obj.slideIndex = message.slideIndex
      ? NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex.toJSON(message.slideIndex)
      : undefined);
    message.activeFocus !== undefined && (obj.activeFocus = message.activeFocus
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus.toJSON(message.activeFocus)
      : undefined);
    message.activeTrigger !== undefined && (obj.activeTrigger = message.activeTrigger
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger.toJSON(message.activeTrigger)
      : undefined);
    message.activeNextTrigger !== undefined && (obj.activeNextTrigger = message.activeNextTrigger
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger.toJSON(message.activeNextTrigger)
      : undefined);
    message.activePreviousTrigger !== undefined && (obj.activePreviousTrigger = message.activePreviousTrigger
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger.toJSON(message.activePreviousTrigger)
      : undefined);
    message.activeIndexTrigger !== undefined && (obj.activeIndexTrigger = message.activeIndexTrigger
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger.toJSON(message.activeIndexTrigger)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest {
    return NetworkAPIV1_APIV1AnnouncementRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest();
    message.activeTimelineOperation =
      (object.activeTimelineOperation !== undefined && object.activeTimelineOperation !== null)
        ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation.fromPartial(object.activeTimelineOperation)
        : undefined;
    message.activeTimelineStatus = (object.activeTimelineStatus !== undefined && object.activeTimelineStatus !== null)
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus.fromPartial(object.activeTimelineStatus)
      : undefined;
    message.active = (object.active !== undefined && object.active !== null)
      ? NetworkAPIV1_APIV1AnnouncementRequest_Active.fromPartial(object.active)
      : undefined;
    message.slideIndex = (object.slideIndex !== undefined && object.slideIndex !== null)
      ? NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex.fromPartial(object.slideIndex)
      : undefined;
    message.activeFocus = (object.activeFocus !== undefined && object.activeFocus !== null)
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus.fromPartial(object.activeFocus)
      : undefined;
    message.activeTrigger = (object.activeTrigger !== undefined && object.activeTrigger !== null)
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger.fromPartial(object.activeTrigger)
      : undefined;
    message.activeNextTrigger = (object.activeNextTrigger !== undefined && object.activeNextTrigger !== null)
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger.fromPartial(object.activeNextTrigger)
      : undefined;
    message.activePreviousTrigger =
      (object.activePreviousTrigger !== undefined && object.activePreviousTrigger !== null)
        ? NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger.fromPartial(object.activePreviousTrigger)
        : undefined;
    message.activeIndexTrigger = (object.activeIndexTrigger !== undefined && object.activeIndexTrigger !== null)
      ? NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger.fromPartial(object.activeIndexTrigger)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation(): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation {
  return { operation: 0 };
}

export const NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation = {
  encode(
    message: NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.operation !== 0) {
      writer.uint32(8).int32(message.operation);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.operation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation {
    return {
      operation: isSet(object.operation)
        ? networkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperationFromJSON(object.operation)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation): unknown {
    const obj: any = {};
    message.operation !== undefined &&
      (obj.operation = networkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation_APIV1TimelineOperationToJSON(
        message.operation,
      ));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation {
    return NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineOperation();
    message.operation = object.operation ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus(): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus = {
  encode(
    _: NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus {
    return NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveTimelineStatus();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementRequest_Active(): NetworkAPIV1_APIV1AnnouncementRequest_Active {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementRequest_Active = {
  encode(_: NetworkAPIV1_APIV1AnnouncementRequest_Active, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementRequest_Active {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_Active();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementRequest_Active {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementRequest_Active): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_Active>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_Active {
    return NetworkAPIV1_APIV1AnnouncementRequest_Active.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_Active>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_Active {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_Active();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex(): NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex = {
  encode(
    _: NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex {
    return NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_AnnouncementIndex();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus(): NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus = {
  encode(_: NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus {
    return NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveFocus();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger(): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger = {
  encode(_: NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger {
    return NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveTrigger();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger(): NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger = {
  encode(
    _: NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger {
    return NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveNextTrigger();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger(): NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger = {
  encode(
    _: NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger {
    return NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActivePreviousTrigger();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger(): NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger {
  return { index: 0 };
}

export const NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger = {
  encode(
    message: NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.index !== 0) {
      writer.uint32(8).uint32(message.index);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.index = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger {
    return { index: isSet(object.index) ? Number(object.index) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger): unknown {
    const obj: any = {};
    message.index !== undefined && (obj.index = Math.round(message.index));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger {
    return NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementRequest_ActiveIndexTrigger();
    message.index = object.index ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioRequest(): NetworkAPIV1_APIV1AudioRequest {
  return {
    playlists: undefined,
    playlist: undefined,
    playlistUpdates: undefined,
    playlistFocused: undefined,
    playlistActive: undefined,
    playlistNextFocus: undefined,
    playlistPreviousFocus: undefined,
    playlistActiveFocus: undefined,
    playlistIdFocus: undefined,
    playlistFocusedTrigger: undefined,
    playlistActiveTrigger: undefined,
    playlistIdTrigger: undefined,
    playlistFocusedNextTrigger: undefined,
    playlistFocusedPreviousTrigger: undefined,
    playlistFocusedIdTrigger: undefined,
    playlistActiveNextTrigger: undefined,
    playlistActivePreviousTrigger: undefined,
    playlistActiveIdTrigger: undefined,
    playlistIdNextTrigger: undefined,
    playlistIdPreviousTrigger: undefined,
  };
}

export const NetworkAPIV1_APIV1AudioRequest = {
  encode(message: NetworkAPIV1_APIV1AudioRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playlists !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_Playlists.encode(message.playlists, writer.uint32(10).fork()).ldelim();
    }
    if (message.playlist !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_Playlist.encode(message.playlist, writer.uint32(18).fork()).ldelim();
    }
    if (message.playlistUpdates !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates.encode(message.playlistUpdates, writer.uint32(26).fork()).ldelim();
    }
    if (message.playlistFocused !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_EmptyMessage.encode(message.playlistFocused, writer.uint32(34).fork()).ldelim();
    }
    if (message.playlistActive !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_EmptyMessage.encode(message.playlistActive, writer.uint32(42).fork()).ldelim();
    }
    if (message.playlistNextFocus !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_EmptyMessage.encode(message.playlistNextFocus, writer.uint32(50).fork()).ldelim();
    }
    if (message.playlistPreviousFocus !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_EmptyMessage.encode(message.playlistPreviousFocus, writer.uint32(58).fork())
        .ldelim();
    }
    if (message.playlistActiveFocus !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_EmptyMessage.encode(message.playlistActiveFocus, writer.uint32(66).fork())
        .ldelim();
    }
    if (message.playlistIdFocus !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.encode(message.playlistIdFocus, writer.uint32(74).fork())
        .ldelim();
    }
    if (message.playlistFocusedTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_EmptyMessage.encode(message.playlistFocusedTrigger, writer.uint32(82).fork())
        .ldelim();
    }
    if (message.playlistActiveTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_EmptyMessage.encode(message.playlistActiveTrigger, writer.uint32(90).fork())
        .ldelim();
    }
    if (message.playlistIdTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.encode(message.playlistIdTrigger, writer.uint32(98).fork())
        .ldelim();
    }
    if (message.playlistFocusedNextTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_EmptyMessage.encode(message.playlistFocusedNextTrigger, writer.uint32(106).fork())
        .ldelim();
    }
    if (message.playlistFocusedPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_EmptyMessage.encode(
        message.playlistFocusedPreviousTrigger,
        writer.uint32(114).fork(),
      ).ldelim();
    }
    if (message.playlistFocusedIdTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.encode(
        message.playlistFocusedIdTrigger,
        writer.uint32(122).fork(),
      ).ldelim();
    }
    if (message.playlistActiveNextTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_EmptyMessage.encode(message.playlistActiveNextTrigger, writer.uint32(130).fork())
        .ldelim();
    }
    if (message.playlistActivePreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_EmptyMessage.encode(
        message.playlistActivePreviousTrigger,
        writer.uint32(138).fork(),
      ).ldelim();
    }
    if (message.playlistActiveIdTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.encode(
        message.playlistActiveIdTrigger,
        writer.uint32(146).fork(),
      ).ldelim();
    }
    if (message.playlistIdNextTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.encode(message.playlistIdNextTrigger, writer.uint32(154).fork())
        .ldelim();
    }
    if (message.playlistIdPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.encode(
        message.playlistIdPreviousTrigger,
        writer.uint32(162).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlists = NetworkAPIV1_APIV1AudioRequest_Playlists.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.playlist = NetworkAPIV1_APIV1AudioRequest_Playlist.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.playlistUpdates = NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.playlistFocused = NetworkAPIV1_APIV1AudioRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.playlistActive = NetworkAPIV1_APIV1AudioRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.playlistNextFocus = NetworkAPIV1_APIV1AudioRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.playlistPreviousFocus = NetworkAPIV1_APIV1AudioRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.playlistActiveFocus = NetworkAPIV1_APIV1AudioRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.playlistIdFocus = NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.playlistFocusedTrigger = NetworkAPIV1_APIV1AudioRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.playlistActiveTrigger = NetworkAPIV1_APIV1AudioRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.playlistIdTrigger = NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 106) {
            break;
          }

          message.playlistFocusedNextTrigger = NetworkAPIV1_APIV1AudioRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 14:
          if (tag != 114) {
            break;
          }

          message.playlistFocusedPreviousTrigger = NetworkAPIV1_APIV1AudioRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 15:
          if (tag != 122) {
            break;
          }

          message.playlistFocusedIdTrigger = NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 16:
          if (tag != 130) {
            break;
          }

          message.playlistActiveNextTrigger = NetworkAPIV1_APIV1AudioRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 17:
          if (tag != 138) {
            break;
          }

          message.playlistActivePreviousTrigger = NetworkAPIV1_APIV1AudioRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 18:
          if (tag != 146) {
            break;
          }

          message.playlistActiveIdTrigger = NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 19:
          if (tag != 154) {
            break;
          }

          message.playlistIdNextTrigger = NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 20:
          if (tag != 162) {
            break;
          }

          message.playlistIdPreviousTrigger = NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AudioRequest {
    return {
      playlists: isSet(object.playlists)
        ? NetworkAPIV1_APIV1AudioRequest_Playlists.fromJSON(object.playlists)
        : undefined,
      playlist: isSet(object.playlist) ? NetworkAPIV1_APIV1AudioRequest_Playlist.fromJSON(object.playlist) : undefined,
      playlistUpdates: isSet(object.playlistUpdates)
        ? NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates.fromJSON(object.playlistUpdates)
        : undefined,
      playlistFocused: isSet(object.playlistFocused)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromJSON(object.playlistFocused)
        : undefined,
      playlistActive: isSet(object.playlistActive)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromJSON(object.playlistActive)
        : undefined,
      playlistNextFocus: isSet(object.playlistNextFocus)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromJSON(object.playlistNextFocus)
        : undefined,
      playlistPreviousFocus: isSet(object.playlistPreviousFocus)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromJSON(object.playlistPreviousFocus)
        : undefined,
      playlistActiveFocus: isSet(object.playlistActiveFocus)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromJSON(object.playlistActiveFocus)
        : undefined,
      playlistIdFocus: isSet(object.playlistIdFocus)
        ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromJSON(object.playlistIdFocus)
        : undefined,
      playlistFocusedTrigger: isSet(object.playlistFocusedTrigger)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromJSON(object.playlistFocusedTrigger)
        : undefined,
      playlistActiveTrigger: isSet(object.playlistActiveTrigger)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromJSON(object.playlistActiveTrigger)
        : undefined,
      playlistIdTrigger: isSet(object.playlistIdTrigger)
        ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromJSON(object.playlistIdTrigger)
        : undefined,
      playlistFocusedNextTrigger: isSet(object.playlistFocusedNextTrigger)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromJSON(object.playlistFocusedNextTrigger)
        : undefined,
      playlistFocusedPreviousTrigger: isSet(object.playlistFocusedPreviousTrigger)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromJSON(object.playlistFocusedPreviousTrigger)
        : undefined,
      playlistFocusedIdTrigger: isSet(object.playlistFocusedIdTrigger)
        ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromJSON(object.playlistFocusedIdTrigger)
        : undefined,
      playlistActiveNextTrigger: isSet(object.playlistActiveNextTrigger)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromJSON(object.playlistActiveNextTrigger)
        : undefined,
      playlistActivePreviousTrigger: isSet(object.playlistActivePreviousTrigger)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromJSON(object.playlistActivePreviousTrigger)
        : undefined,
      playlistActiveIdTrigger: isSet(object.playlistActiveIdTrigger)
        ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromJSON(object.playlistActiveIdTrigger)
        : undefined,
      playlistIdNextTrigger: isSet(object.playlistIdNextTrigger)
        ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromJSON(object.playlistIdNextTrigger)
        : undefined,
      playlistIdPreviousTrigger: isSet(object.playlistIdPreviousTrigger)
        ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromJSON(object.playlistIdPreviousTrigger)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1AudioRequest): unknown {
    const obj: any = {};
    message.playlists !== undefined && (obj.playlists = message.playlists
      ? NetworkAPIV1_APIV1AudioRequest_Playlists.toJSON(message.playlists)
      : undefined);
    message.playlist !== undefined &&
      (obj.playlist = message.playlist ? NetworkAPIV1_APIV1AudioRequest_Playlist.toJSON(message.playlist) : undefined);
    message.playlistUpdates !== undefined && (obj.playlistUpdates = message.playlistUpdates
      ? NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates.toJSON(message.playlistUpdates)
      : undefined);
    message.playlistFocused !== undefined && (obj.playlistFocused = message.playlistFocused
      ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.toJSON(message.playlistFocused)
      : undefined);
    message.playlistActive !== undefined && (obj.playlistActive = message.playlistActive
      ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.toJSON(message.playlistActive)
      : undefined);
    message.playlistNextFocus !== undefined && (obj.playlistNextFocus = message.playlistNextFocus
      ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.toJSON(message.playlistNextFocus)
      : undefined);
    message.playlistPreviousFocus !== undefined && (obj.playlistPreviousFocus = message.playlistPreviousFocus
      ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.toJSON(message.playlistPreviousFocus)
      : undefined);
    message.playlistActiveFocus !== undefined && (obj.playlistActiveFocus = message.playlistActiveFocus
      ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.toJSON(message.playlistActiveFocus)
      : undefined);
    message.playlistIdFocus !== undefined && (obj.playlistIdFocus = message.playlistIdFocus
      ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.toJSON(message.playlistIdFocus)
      : undefined);
    message.playlistFocusedTrigger !== undefined && (obj.playlistFocusedTrigger = message.playlistFocusedTrigger
      ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.toJSON(message.playlistFocusedTrigger)
      : undefined);
    message.playlistActiveTrigger !== undefined && (obj.playlistActiveTrigger = message.playlistActiveTrigger
      ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.toJSON(message.playlistActiveTrigger)
      : undefined);
    message.playlistIdTrigger !== undefined && (obj.playlistIdTrigger = message.playlistIdTrigger
      ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.toJSON(message.playlistIdTrigger)
      : undefined);
    message.playlistFocusedNextTrigger !== undefined &&
      (obj.playlistFocusedNextTrigger = message.playlistFocusedNextTrigger
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.toJSON(message.playlistFocusedNextTrigger)
        : undefined);
    message.playlistFocusedPreviousTrigger !== undefined &&
      (obj.playlistFocusedPreviousTrigger = message.playlistFocusedPreviousTrigger
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.toJSON(message.playlistFocusedPreviousTrigger)
        : undefined);
    message.playlistFocusedIdTrigger !== undefined && (obj.playlistFocusedIdTrigger = message.playlistFocusedIdTrigger
      ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.toJSON(message.playlistFocusedIdTrigger)
      : undefined);
    message.playlistActiveNextTrigger !== undefined &&
      (obj.playlistActiveNextTrigger = message.playlistActiveNextTrigger
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.toJSON(message.playlistActiveNextTrigger)
        : undefined);
    message.playlistActivePreviousTrigger !== undefined &&
      (obj.playlistActivePreviousTrigger = message.playlistActivePreviousTrigger
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.toJSON(message.playlistActivePreviousTrigger)
        : undefined);
    message.playlistActiveIdTrigger !== undefined && (obj.playlistActiveIdTrigger = message.playlistActiveIdTrigger
      ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.toJSON(message.playlistActiveIdTrigger)
      : undefined);
    message.playlistIdNextTrigger !== undefined && (obj.playlistIdNextTrigger = message.playlistIdNextTrigger
      ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.toJSON(message.playlistIdNextTrigger)
      : undefined);
    message.playlistIdPreviousTrigger !== undefined &&
      (obj.playlistIdPreviousTrigger = message.playlistIdPreviousTrigger
        ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.toJSON(message.playlistIdPreviousTrigger)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest>, I>>(base?: I): NetworkAPIV1_APIV1AudioRequest {
    return NetworkAPIV1_APIV1AudioRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AudioRequest {
    const message = createBaseNetworkAPIV1_APIV1AudioRequest();
    message.playlists = (object.playlists !== undefined && object.playlists !== null)
      ? NetworkAPIV1_APIV1AudioRequest_Playlists.fromPartial(object.playlists)
      : undefined;
    message.playlist = (object.playlist !== undefined && object.playlist !== null)
      ? NetworkAPIV1_APIV1AudioRequest_Playlist.fromPartial(object.playlist)
      : undefined;
    message.playlistUpdates = (object.playlistUpdates !== undefined && object.playlistUpdates !== null)
      ? NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates.fromPartial(object.playlistUpdates)
      : undefined;
    message.playlistFocused = (object.playlistFocused !== undefined && object.playlistFocused !== null)
      ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(object.playlistFocused)
      : undefined;
    message.playlistActive = (object.playlistActive !== undefined && object.playlistActive !== null)
      ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(object.playlistActive)
      : undefined;
    message.playlistNextFocus = (object.playlistNextFocus !== undefined && object.playlistNextFocus !== null)
      ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(object.playlistNextFocus)
      : undefined;
    message.playlistPreviousFocus =
      (object.playlistPreviousFocus !== undefined && object.playlistPreviousFocus !== null)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(object.playlistPreviousFocus)
        : undefined;
    message.playlistActiveFocus = (object.playlistActiveFocus !== undefined && object.playlistActiveFocus !== null)
      ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(object.playlistActiveFocus)
      : undefined;
    message.playlistIdFocus = (object.playlistIdFocus !== undefined && object.playlistIdFocus !== null)
      ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromPartial(object.playlistIdFocus)
      : undefined;
    message.playlistFocusedTrigger =
      (object.playlistFocusedTrigger !== undefined && object.playlistFocusedTrigger !== null)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(object.playlistFocusedTrigger)
        : undefined;
    message.playlistActiveTrigger =
      (object.playlistActiveTrigger !== undefined && object.playlistActiveTrigger !== null)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(object.playlistActiveTrigger)
        : undefined;
    message.playlistIdTrigger = (object.playlistIdTrigger !== undefined && object.playlistIdTrigger !== null)
      ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromPartial(object.playlistIdTrigger)
      : undefined;
    message.playlistFocusedNextTrigger =
      (object.playlistFocusedNextTrigger !== undefined && object.playlistFocusedNextTrigger !== null)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(object.playlistFocusedNextTrigger)
        : undefined;
    message.playlistFocusedPreviousTrigger =
      (object.playlistFocusedPreviousTrigger !== undefined && object.playlistFocusedPreviousTrigger !== null)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(object.playlistFocusedPreviousTrigger)
        : undefined;
    message.playlistFocusedIdTrigger =
      (object.playlistFocusedIdTrigger !== undefined && object.playlistFocusedIdTrigger !== null)
        ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromPartial(object.playlistFocusedIdTrigger)
        : undefined;
    message.playlistActiveNextTrigger =
      (object.playlistActiveNextTrigger !== undefined && object.playlistActiveNextTrigger !== null)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(object.playlistActiveNextTrigger)
        : undefined;
    message.playlistActivePreviousTrigger =
      (object.playlistActivePreviousTrigger !== undefined && object.playlistActivePreviousTrigger !== null)
        ? NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(object.playlistActivePreviousTrigger)
        : undefined;
    message.playlistActiveIdTrigger =
      (object.playlistActiveIdTrigger !== undefined && object.playlistActiveIdTrigger !== null)
        ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromPartial(object.playlistActiveIdTrigger)
        : undefined;
    message.playlistIdNextTrigger =
      (object.playlistIdNextTrigger !== undefined && object.playlistIdNextTrigger !== null)
        ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromPartial(object.playlistIdNextTrigger)
        : undefined;
    message.playlistIdPreviousTrigger =
      (object.playlistIdPreviousTrigger !== undefined && object.playlistIdPreviousTrigger !== null)
        ? NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromPartial(object.playlistIdPreviousTrigger)
        : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioRequest_Playlists(): NetworkAPIV1_APIV1AudioRequest_Playlists {
  return {};
}

export const NetworkAPIV1_APIV1AudioRequest_Playlists = {
  encode(_: NetworkAPIV1_APIV1AudioRequest_Playlists, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioRequest_Playlists {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioRequest_Playlists();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AudioRequest_Playlists {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AudioRequest_Playlists): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest_Playlists>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AudioRequest_Playlists {
    return NetworkAPIV1_APIV1AudioRequest_Playlists.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest_Playlists>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AudioRequest_Playlists {
    const message = createBaseNetworkAPIV1_APIV1AudioRequest_Playlists();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioRequest_Playlist(): NetworkAPIV1_APIV1AudioRequest_Playlist {
  return { id: "", start: 0 };
}

export const NetworkAPIV1_APIV1AudioRequest_Playlist = {
  encode(message: NetworkAPIV1_APIV1AudioRequest_Playlist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.start !== 0) {
      writer.uint32(16).uint32(message.start);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioRequest_Playlist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioRequest_Playlist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.start = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AudioRequest_Playlist {
    return { id: isSet(object.id) ? String(object.id) : "", start: isSet(object.start) ? Number(object.start) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1AudioRequest_Playlist): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.start !== undefined && (obj.start = Math.round(message.start));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest_Playlist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AudioRequest_Playlist {
    return NetworkAPIV1_APIV1AudioRequest_Playlist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest_Playlist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AudioRequest_Playlist {
    const message = createBaseNetworkAPIV1_APIV1AudioRequest_Playlist();
    message.id = object.id ?? "";
    message.start = object.start ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioRequest_PlaylistUpdates(): NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates {
  return { id: "" };
}

export const NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates = {
  encode(
    message: NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioRequest_PlaylistUpdates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates {
    return NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AudioRequest_PlaylistUpdates {
    const message = createBaseNetworkAPIV1_APIV1AudioRequest_PlaylistUpdates();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioRequest_EmptyMessage(): NetworkAPIV1_APIV1AudioRequest_EmptyMessage {
  return {};
}

export const NetworkAPIV1_APIV1AudioRequest_EmptyMessage = {
  encode(_: NetworkAPIV1_APIV1AudioRequest_EmptyMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioRequest_EmptyMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioRequest_EmptyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AudioRequest_EmptyMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AudioRequest_EmptyMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest_EmptyMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AudioRequest_EmptyMessage {
    return NetworkAPIV1_APIV1AudioRequest_EmptyMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest_EmptyMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AudioRequest_EmptyMessage {
    const message = createBaseNetworkAPIV1_APIV1AudioRequest_EmptyMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioRequest_IdentifierMessage(): NetworkAPIV1_APIV1AudioRequest_IdentifierMessage {
  return { id: "" };
}

export const NetworkAPIV1_APIV1AudioRequest_IdentifierMessage = {
  encode(
    message: NetworkAPIV1_APIV1AudioRequest_IdentifierMessage,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioRequest_IdentifierMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioRequest_IdentifierMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AudioRequest_IdentifierMessage {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1AudioRequest_IdentifierMessage): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest_IdentifierMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AudioRequest_IdentifierMessage {
    return NetworkAPIV1_APIV1AudioRequest_IdentifierMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioRequest_IdentifierMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AudioRequest_IdentifierMessage {
    const message = createBaseNetworkAPIV1_APIV1AudioRequest_IdentifierMessage();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureRequest(): NetworkAPIV1_APIV1CaptureRequest {
  return {
    getStatus: undefined,
    operation: undefined,
    getSettings: undefined,
    setSettings: undefined,
    getEncodings: undefined,
  };
}

export const NetworkAPIV1_APIV1CaptureRequest = {
  encode(message: NetworkAPIV1_APIV1CaptureRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.getStatus !== undefined) {
      NetworkAPIV1_APIV1CaptureRequest_Status.encode(message.getStatus, writer.uint32(10).fork()).ldelim();
    }
    if (message.operation !== undefined) {
      NetworkAPIV1_APIV1CaptureRequest_Operation.encode(message.operation, writer.uint32(18).fork()).ldelim();
    }
    if (message.getSettings !== undefined) {
      NetworkAPIV1_APIV1CaptureRequest_GetSettings.encode(message.getSettings, writer.uint32(26).fork()).ldelim();
    }
    if (message.setSettings !== undefined) {
      NetworkAPIV1_APIV1CaptureRequest_SetSettings.encode(message.setSettings, writer.uint32(34).fork()).ldelim();
    }
    if (message.getEncodings !== undefined) {
      NetworkAPIV1_APIV1CaptureRequest_Encodings.encode(message.getEncodings, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.getStatus = NetworkAPIV1_APIV1CaptureRequest_Status.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.operation = NetworkAPIV1_APIV1CaptureRequest_Operation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getSettings = NetworkAPIV1_APIV1CaptureRequest_GetSettings.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.setSettings = NetworkAPIV1_APIV1CaptureRequest_SetSettings.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.getEncodings = NetworkAPIV1_APIV1CaptureRequest_Encodings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1CaptureRequest {
    return {
      getStatus: isSet(object.getStatus)
        ? NetworkAPIV1_APIV1CaptureRequest_Status.fromJSON(object.getStatus)
        : undefined,
      operation: isSet(object.operation)
        ? NetworkAPIV1_APIV1CaptureRequest_Operation.fromJSON(object.operation)
        : undefined,
      getSettings: isSet(object.getSettings)
        ? NetworkAPIV1_APIV1CaptureRequest_GetSettings.fromJSON(object.getSettings)
        : undefined,
      setSettings: isSet(object.setSettings)
        ? NetworkAPIV1_APIV1CaptureRequest_SetSettings.fromJSON(object.setSettings)
        : undefined,
      getEncodings: isSet(object.getEncodings)
        ? NetworkAPIV1_APIV1CaptureRequest_Encodings.fromJSON(object.getEncodings)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1CaptureRequest): unknown {
    const obj: any = {};
    message.getStatus !== undefined &&
      (obj.getStatus = message.getStatus
        ? NetworkAPIV1_APIV1CaptureRequest_Status.toJSON(message.getStatus)
        : undefined);
    message.operation !== undefined && (obj.operation = message.operation
      ? NetworkAPIV1_APIV1CaptureRequest_Operation.toJSON(message.operation)
      : undefined);
    message.getSettings !== undefined && (obj.getSettings = message.getSettings
      ? NetworkAPIV1_APIV1CaptureRequest_GetSettings.toJSON(message.getSettings)
      : undefined);
    message.setSettings !== undefined && (obj.setSettings = message.setSettings
      ? NetworkAPIV1_APIV1CaptureRequest_SetSettings.toJSON(message.setSettings)
      : undefined);
    message.getEncodings !== undefined && (obj.getEncodings = message.getEncodings
      ? NetworkAPIV1_APIV1CaptureRequest_Encodings.toJSON(message.getEncodings)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureRequest {
    return NetworkAPIV1_APIV1CaptureRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1CaptureRequest {
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest();
    message.getStatus = (object.getStatus !== undefined && object.getStatus !== null)
      ? NetworkAPIV1_APIV1CaptureRequest_Status.fromPartial(object.getStatus)
      : undefined;
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? NetworkAPIV1_APIV1CaptureRequest_Operation.fromPartial(object.operation)
      : undefined;
    message.getSettings = (object.getSettings !== undefined && object.getSettings !== null)
      ? NetworkAPIV1_APIV1CaptureRequest_GetSettings.fromPartial(object.getSettings)
      : undefined;
    message.setSettings = (object.setSettings !== undefined && object.setSettings !== null)
      ? NetworkAPIV1_APIV1CaptureRequest_SetSettings.fromPartial(object.setSettings)
      : undefined;
    message.getEncodings = (object.getEncodings !== undefined && object.getEncodings !== null)
      ? NetworkAPIV1_APIV1CaptureRequest_Encodings.fromPartial(object.getEncodings)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureRequest_Status(): NetworkAPIV1_APIV1CaptureRequest_Status {
  return {};
}

export const NetworkAPIV1_APIV1CaptureRequest_Status = {
  encode(_: NetworkAPIV1_APIV1CaptureRequest_Status, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureRequest_Status {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest_Status();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1CaptureRequest_Status {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1CaptureRequest_Status): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest_Status>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureRequest_Status {
    return NetworkAPIV1_APIV1CaptureRequest_Status.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest_Status>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1CaptureRequest_Status {
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest_Status();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureRequest_Operation(): NetworkAPIV1_APIV1CaptureRequest_Operation {
  return { operation: 0 };
}

export const NetworkAPIV1_APIV1CaptureRequest_Operation = {
  encode(message: NetworkAPIV1_APIV1CaptureRequest_Operation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.operation !== 0) {
      writer.uint32(8).int32(message.operation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureRequest_Operation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest_Operation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.operation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1CaptureRequest_Operation {
    return {
      operation: isSet(object.operation)
        ? networkAPIV1_APIV1CaptureRequest_Operation_CaptureOperationFromJSON(object.operation)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1CaptureRequest_Operation): unknown {
    const obj: any = {};
    message.operation !== undefined &&
      (obj.operation = networkAPIV1_APIV1CaptureRequest_Operation_CaptureOperationToJSON(message.operation));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest_Operation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureRequest_Operation {
    return NetworkAPIV1_APIV1CaptureRequest_Operation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest_Operation>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1CaptureRequest_Operation {
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest_Operation();
    message.operation = object.operation ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureRequest_GetSettings(): NetworkAPIV1_APIV1CaptureRequest_GetSettings {
  return {};
}

export const NetworkAPIV1_APIV1CaptureRequest_GetSettings = {
  encode(_: NetworkAPIV1_APIV1CaptureRequest_GetSettings, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureRequest_GetSettings {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest_GetSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1CaptureRequest_GetSettings {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1CaptureRequest_GetSettings): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest_GetSettings>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureRequest_GetSettings {
    return NetworkAPIV1_APIV1CaptureRequest_GetSettings.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest_GetSettings>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1CaptureRequest_GetSettings {
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest_GetSettings();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureRequest_SetSettings(): NetworkAPIV1_APIV1CaptureRequest_SetSettings {
  return { settings: undefined };
}

export const NetworkAPIV1_APIV1CaptureRequest_SetSettings = {
  encode(message: NetworkAPIV1_APIV1CaptureRequest_SetSettings, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.settings !== undefined) {
      APIV1CaptureSettings.encode(message.settings, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureRequest_SetSettings {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest_SetSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.settings = APIV1CaptureSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1CaptureRequest_SetSettings {
    return { settings: isSet(object.settings) ? APIV1CaptureSettings.fromJSON(object.settings) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1CaptureRequest_SetSettings): unknown {
    const obj: any = {};
    message.settings !== undefined &&
      (obj.settings = message.settings ? APIV1CaptureSettings.toJSON(message.settings) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest_SetSettings>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureRequest_SetSettings {
    return NetworkAPIV1_APIV1CaptureRequest_SetSettings.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest_SetSettings>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1CaptureRequest_SetSettings {
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest_SetSettings();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? APIV1CaptureSettings.fromPartial(object.settings)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureRequest_Encodings(): NetworkAPIV1_APIV1CaptureRequest_Encodings {
  return { type: 0 };
}

export const NetworkAPIV1_APIV1CaptureRequest_Encodings = {
  encode(message: NetworkAPIV1_APIV1CaptureRequest_Encodings, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureRequest_Encodings {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest_Encodings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1CaptureRequest_Encodings {
    return {
      type: isSet(object.type)
        ? networkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestinationFromJSON(object.type)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1CaptureRequest_Encodings): unknown {
    const obj: any = {};
    message.type !== undefined &&
      (obj.type = networkAPIV1_APIV1CaptureRequest_Encodings_APIV1CaptureDestinationToJSON(message.type));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest_Encodings>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureRequest_Encodings {
    return NetworkAPIV1_APIV1CaptureRequest_Encodings.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureRequest_Encodings>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1CaptureRequest_Encodings {
    const message = createBaseNetworkAPIV1_APIV1CaptureRequest_Encodings();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearRequest(): NetworkAPIV1_APIV1ClearRequest {
  return {
    clearLayer: undefined,
    createGroup: undefined,
    getGroup: undefined,
    putGroup: undefined,
    getGroupIcon: undefined,
    putGroupIcon: undefined,
    deleteGroup: undefined,
    triggerGroup: undefined,
    getGroups: undefined,
  };
}

export const NetworkAPIV1_APIV1ClearRequest = {
  encode(message: NetworkAPIV1_APIV1ClearRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clearLayer !== undefined) {
      NetworkAPIV1_APIV1ClearRequest_ClearLayer.encode(message.clearLayer, writer.uint32(10).fork()).ldelim();
    }
    if (message.createGroup !== undefined) {
      NetworkAPIV1_APIV1ClearRequest_CreateGroup.encode(message.createGroup, writer.uint32(18).fork()).ldelim();
    }
    if (message.getGroup !== undefined) {
      NetworkAPIV1_APIV1ClearRequest_GetGroup.encode(message.getGroup, writer.uint32(26).fork()).ldelim();
    }
    if (message.putGroup !== undefined) {
      NetworkAPIV1_APIV1ClearRequest_PutGroup.encode(message.putGroup, writer.uint32(34).fork()).ldelim();
    }
    if (message.getGroupIcon !== undefined) {
      NetworkAPIV1_APIV1ClearRequest_GetGroupIcon.encode(message.getGroupIcon, writer.uint32(42).fork()).ldelim();
    }
    if (message.putGroupIcon !== undefined) {
      NetworkAPIV1_APIV1ClearRequest_PutGroupIcon.encode(message.putGroupIcon, writer.uint32(50).fork()).ldelim();
    }
    if (message.deleteGroup !== undefined) {
      NetworkAPIV1_APIV1ClearRequest_DeleteGroup.encode(message.deleteGroup, writer.uint32(58).fork()).ldelim();
    }
    if (message.triggerGroup !== undefined) {
      NetworkAPIV1_APIV1ClearRequest_TriggerGroup.encode(message.triggerGroup, writer.uint32(66).fork()).ldelim();
    }
    if (message.getGroups !== undefined) {
      NetworkAPIV1_APIV1ClearRequest_GetGroups.encode(message.getGroups, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.clearLayer = NetworkAPIV1_APIV1ClearRequest_ClearLayer.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.createGroup = NetworkAPIV1_APIV1ClearRequest_CreateGroup.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getGroup = NetworkAPIV1_APIV1ClearRequest_GetGroup.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.putGroup = NetworkAPIV1_APIV1ClearRequest_PutGroup.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.getGroupIcon = NetworkAPIV1_APIV1ClearRequest_GetGroupIcon.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.putGroupIcon = NetworkAPIV1_APIV1ClearRequest_PutGroupIcon.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.deleteGroup = NetworkAPIV1_APIV1ClearRequest_DeleteGroup.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.triggerGroup = NetworkAPIV1_APIV1ClearRequest_TriggerGroup.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.getGroups = NetworkAPIV1_APIV1ClearRequest_GetGroups.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearRequest {
    return {
      clearLayer: isSet(object.clearLayer)
        ? NetworkAPIV1_APIV1ClearRequest_ClearLayer.fromJSON(object.clearLayer)
        : undefined,
      createGroup: isSet(object.createGroup)
        ? NetworkAPIV1_APIV1ClearRequest_CreateGroup.fromJSON(object.createGroup)
        : undefined,
      getGroup: isSet(object.getGroup) ? NetworkAPIV1_APIV1ClearRequest_GetGroup.fromJSON(object.getGroup) : undefined,
      putGroup: isSet(object.putGroup) ? NetworkAPIV1_APIV1ClearRequest_PutGroup.fromJSON(object.putGroup) : undefined,
      getGroupIcon: isSet(object.getGroupIcon)
        ? NetworkAPIV1_APIV1ClearRequest_GetGroupIcon.fromJSON(object.getGroupIcon)
        : undefined,
      putGroupIcon: isSet(object.putGroupIcon)
        ? NetworkAPIV1_APIV1ClearRequest_PutGroupIcon.fromJSON(object.putGroupIcon)
        : undefined,
      deleteGroup: isSet(object.deleteGroup)
        ? NetworkAPIV1_APIV1ClearRequest_DeleteGroup.fromJSON(object.deleteGroup)
        : undefined,
      triggerGroup: isSet(object.triggerGroup)
        ? NetworkAPIV1_APIV1ClearRequest_TriggerGroup.fromJSON(object.triggerGroup)
        : undefined,
      getGroups: isSet(object.getGroups)
        ? NetworkAPIV1_APIV1ClearRequest_GetGroups.fromJSON(object.getGroups)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearRequest): unknown {
    const obj: any = {};
    message.clearLayer !== undefined && (obj.clearLayer = message.clearLayer
      ? NetworkAPIV1_APIV1ClearRequest_ClearLayer.toJSON(message.clearLayer)
      : undefined);
    message.createGroup !== undefined && (obj.createGroup = message.createGroup
      ? NetworkAPIV1_APIV1ClearRequest_CreateGroup.toJSON(message.createGroup)
      : undefined);
    message.getGroup !== undefined &&
      (obj.getGroup = message.getGroup ? NetworkAPIV1_APIV1ClearRequest_GetGroup.toJSON(message.getGroup) : undefined);
    message.putGroup !== undefined &&
      (obj.putGroup = message.putGroup ? NetworkAPIV1_APIV1ClearRequest_PutGroup.toJSON(message.putGroup) : undefined);
    message.getGroupIcon !== undefined && (obj.getGroupIcon = message.getGroupIcon
      ? NetworkAPIV1_APIV1ClearRequest_GetGroupIcon.toJSON(message.getGroupIcon)
      : undefined);
    message.putGroupIcon !== undefined && (obj.putGroupIcon = message.putGroupIcon
      ? NetworkAPIV1_APIV1ClearRequest_PutGroupIcon.toJSON(message.putGroupIcon)
      : undefined);
    message.deleteGroup !== undefined && (obj.deleteGroup = message.deleteGroup
      ? NetworkAPIV1_APIV1ClearRequest_DeleteGroup.toJSON(message.deleteGroup)
      : undefined);
    message.triggerGroup !== undefined && (obj.triggerGroup = message.triggerGroup
      ? NetworkAPIV1_APIV1ClearRequest_TriggerGroup.toJSON(message.triggerGroup)
      : undefined);
    message.getGroups !== undefined && (obj.getGroups = message.getGroups
      ? NetworkAPIV1_APIV1ClearRequest_GetGroups.toJSON(message.getGroups)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest>, I>>(base?: I): NetworkAPIV1_APIV1ClearRequest {
    return NetworkAPIV1_APIV1ClearRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearRequest {
    const message = createBaseNetworkAPIV1_APIV1ClearRequest();
    message.clearLayer = (object.clearLayer !== undefined && object.clearLayer !== null)
      ? NetworkAPIV1_APIV1ClearRequest_ClearLayer.fromPartial(object.clearLayer)
      : undefined;
    message.createGroup = (object.createGroup !== undefined && object.createGroup !== null)
      ? NetworkAPIV1_APIV1ClearRequest_CreateGroup.fromPartial(object.createGroup)
      : undefined;
    message.getGroup = (object.getGroup !== undefined && object.getGroup !== null)
      ? NetworkAPIV1_APIV1ClearRequest_GetGroup.fromPartial(object.getGroup)
      : undefined;
    message.putGroup = (object.putGroup !== undefined && object.putGroup !== null)
      ? NetworkAPIV1_APIV1ClearRequest_PutGroup.fromPartial(object.putGroup)
      : undefined;
    message.getGroupIcon = (object.getGroupIcon !== undefined && object.getGroupIcon !== null)
      ? NetworkAPIV1_APIV1ClearRequest_GetGroupIcon.fromPartial(object.getGroupIcon)
      : undefined;
    message.putGroupIcon = (object.putGroupIcon !== undefined && object.putGroupIcon !== null)
      ? NetworkAPIV1_APIV1ClearRequest_PutGroupIcon.fromPartial(object.putGroupIcon)
      : undefined;
    message.deleteGroup = (object.deleteGroup !== undefined && object.deleteGroup !== null)
      ? NetworkAPIV1_APIV1ClearRequest_DeleteGroup.fromPartial(object.deleteGroup)
      : undefined;
    message.triggerGroup = (object.triggerGroup !== undefined && object.triggerGroup !== null)
      ? NetworkAPIV1_APIV1ClearRequest_TriggerGroup.fromPartial(object.triggerGroup)
      : undefined;
    message.getGroups = (object.getGroups !== undefined && object.getGroups !== null)
      ? NetworkAPIV1_APIV1ClearRequest_GetGroups.fromPartial(object.getGroups)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearRequest_ClearLayer(): NetworkAPIV1_APIV1ClearRequest_ClearLayer {
  return { layer: 0 };
}

export const NetworkAPIV1_APIV1ClearRequest_ClearLayer = {
  encode(message: NetworkAPIV1_APIV1ClearRequest_ClearLayer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.layer !== 0) {
      writer.uint32(8).int32(message.layer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearRequest_ClearLayer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_ClearLayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearRequest_ClearLayer {
    return {
      layer: isSet(object.layer) ? networkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerTypeFromJSON(object.layer) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearRequest_ClearLayer): unknown {
    const obj: any = {};
    message.layer !== undefined &&
      (obj.layer = networkAPIV1_APIV1ClearRequest_ClearLayer_APIV1LayerTypeToJSON(message.layer));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_ClearLayer>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearRequest_ClearLayer {
    return NetworkAPIV1_APIV1ClearRequest_ClearLayer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_ClearLayer>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearRequest_ClearLayer {
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_ClearLayer();
    message.layer = object.layer ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearRequest_CreateGroup(): NetworkAPIV1_APIV1ClearRequest_CreateGroup {
  return { group: undefined };
}

export const NetworkAPIV1_APIV1ClearRequest_CreateGroup = {
  encode(message: NetworkAPIV1_APIV1ClearRequest_CreateGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.group !== undefined) {
      APIV1ClearGroup.encode(message.group, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearRequest_CreateGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_CreateGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.group = APIV1ClearGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearRequest_CreateGroup {
    return { group: isSet(object.group) ? APIV1ClearGroup.fromJSON(object.group) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearRequest_CreateGroup): unknown {
    const obj: any = {};
    message.group !== undefined && (obj.group = message.group ? APIV1ClearGroup.toJSON(message.group) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_CreateGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearRequest_CreateGroup {
    return NetworkAPIV1_APIV1ClearRequest_CreateGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_CreateGroup>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearRequest_CreateGroup {
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_CreateGroup();
    message.group = (object.group !== undefined && object.group !== null)
      ? APIV1ClearGroup.fromPartial(object.group)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearRequest_GetGroup(): NetworkAPIV1_APIV1ClearRequest_GetGroup {
  return { id: "" };
}

export const NetworkAPIV1_APIV1ClearRequest_GetGroup = {
  encode(message: NetworkAPIV1_APIV1ClearRequest_GetGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearRequest_GetGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_GetGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearRequest_GetGroup {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearRequest_GetGroup): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_GetGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearRequest_GetGroup {
    return NetworkAPIV1_APIV1ClearRequest_GetGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_GetGroup>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearRequest_GetGroup {
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_GetGroup();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearRequest_PutGroup(): NetworkAPIV1_APIV1ClearRequest_PutGroup {
  return { id: "", group: undefined };
}

export const NetworkAPIV1_APIV1ClearRequest_PutGroup = {
  encode(message: NetworkAPIV1_APIV1ClearRequest_PutGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.group !== undefined) {
      APIV1ClearGroup.encode(message.group, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearRequest_PutGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_PutGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.group = APIV1ClearGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearRequest_PutGroup {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      group: isSet(object.group) ? APIV1ClearGroup.fromJSON(object.group) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearRequest_PutGroup): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.group !== undefined && (obj.group = message.group ? APIV1ClearGroup.toJSON(message.group) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_PutGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearRequest_PutGroup {
    return NetworkAPIV1_APIV1ClearRequest_PutGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_PutGroup>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearRequest_PutGroup {
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_PutGroup();
    message.id = object.id ?? "";
    message.group = (object.group !== undefined && object.group !== null)
      ? APIV1ClearGroup.fromPartial(object.group)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearRequest_GetGroupIcon(): NetworkAPIV1_APIV1ClearRequest_GetGroupIcon {
  return { id: "" };
}

export const NetworkAPIV1_APIV1ClearRequest_GetGroupIcon = {
  encode(message: NetworkAPIV1_APIV1ClearRequest_GetGroupIcon, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearRequest_GetGroupIcon {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_GetGroupIcon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearRequest_GetGroupIcon {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearRequest_GetGroupIcon): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_GetGroupIcon>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearRequest_GetGroupIcon {
    return NetworkAPIV1_APIV1ClearRequest_GetGroupIcon.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_GetGroupIcon>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearRequest_GetGroupIcon {
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_GetGroupIcon();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearRequest_PutGroupIcon(): NetworkAPIV1_APIV1ClearRequest_PutGroupIcon {
  return { id: "", contentType: "", icon: new Uint8Array() };
}

export const NetworkAPIV1_APIV1ClearRequest_PutGroupIcon = {
  encode(message: NetworkAPIV1_APIV1ClearRequest_PutGroupIcon, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.contentType !== "") {
      writer.uint32(18).string(message.contentType);
    }
    if (message.icon.length !== 0) {
      writer.uint32(26).bytes(message.icon);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearRequest_PutGroupIcon {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_PutGroupIcon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.contentType = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.icon = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearRequest_PutGroupIcon {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      contentType: isSet(object.contentType) ? String(object.contentType) : "",
      icon: isSet(object.icon) ? bytesFromBase64(object.icon) : new Uint8Array(),
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearRequest_PutGroupIcon): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.contentType !== undefined && (obj.contentType = message.contentType);
    message.icon !== undefined &&
      (obj.icon = base64FromBytes(message.icon !== undefined ? message.icon : new Uint8Array()));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_PutGroupIcon>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearRequest_PutGroupIcon {
    return NetworkAPIV1_APIV1ClearRequest_PutGroupIcon.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_PutGroupIcon>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearRequest_PutGroupIcon {
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_PutGroupIcon();
    message.id = object.id ?? "";
    message.contentType = object.contentType ?? "";
    message.icon = object.icon ?? new Uint8Array();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearRequest_DeleteGroup(): NetworkAPIV1_APIV1ClearRequest_DeleteGroup {
  return { id: "" };
}

export const NetworkAPIV1_APIV1ClearRequest_DeleteGroup = {
  encode(message: NetworkAPIV1_APIV1ClearRequest_DeleteGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearRequest_DeleteGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_DeleteGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearRequest_DeleteGroup {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearRequest_DeleteGroup): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_DeleteGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearRequest_DeleteGroup {
    return NetworkAPIV1_APIV1ClearRequest_DeleteGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_DeleteGroup>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearRequest_DeleteGroup {
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_DeleteGroup();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearRequest_TriggerGroup(): NetworkAPIV1_APIV1ClearRequest_TriggerGroup {
  return { id: "" };
}

export const NetworkAPIV1_APIV1ClearRequest_TriggerGroup = {
  encode(message: NetworkAPIV1_APIV1ClearRequest_TriggerGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearRequest_TriggerGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_TriggerGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearRequest_TriggerGroup {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearRequest_TriggerGroup): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_TriggerGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearRequest_TriggerGroup {
    return NetworkAPIV1_APIV1ClearRequest_TriggerGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_TriggerGroup>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearRequest_TriggerGroup {
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_TriggerGroup();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearRequest_GetGroups(): NetworkAPIV1_APIV1ClearRequest_GetGroups {
  return {};
}

export const NetworkAPIV1_APIV1ClearRequest_GetGroups = {
  encode(_: NetworkAPIV1_APIV1ClearRequest_GetGroups, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearRequest_GetGroups {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_GetGroups();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1ClearRequest_GetGroups {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1ClearRequest_GetGroups): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_GetGroups>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearRequest_GetGroups {
    return NetworkAPIV1_APIV1ClearRequest_GetGroups.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearRequest_GetGroups>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1ClearRequest_GetGroups {
    const message = createBaseNetworkAPIV1_APIV1ClearRequest_GetGroups();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1GroupsRequest(): NetworkAPIV1_APIV1GroupsRequest {
  return { groupsRequest: undefined, triggerGroup: undefined };
}

export const NetworkAPIV1_APIV1GroupsRequest = {
  encode(message: NetworkAPIV1_APIV1GroupsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.groupsRequest !== undefined) {
      NetworkAPIV1_APIV1GroupsRequest_GroupsRequest.encode(message.groupsRequest, writer.uint32(10).fork()).ldelim();
    }
    if (message.triggerGroup !== undefined) {
      NetworkAPIV1_APIV1GroupsRequest_TriggerGroup.encode(message.triggerGroup, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1GroupsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1GroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.groupsRequest = NetworkAPIV1_APIV1GroupsRequest_GroupsRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.triggerGroup = NetworkAPIV1_APIV1GroupsRequest_TriggerGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1GroupsRequest {
    return {
      groupsRequest: isSet(object.groupsRequest)
        ? NetworkAPIV1_APIV1GroupsRequest_GroupsRequest.fromJSON(object.groupsRequest)
        : undefined,
      triggerGroup: isSet(object.triggerGroup)
        ? NetworkAPIV1_APIV1GroupsRequest_TriggerGroup.fromJSON(object.triggerGroup)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1GroupsRequest): unknown {
    const obj: any = {};
    message.groupsRequest !== undefined && (obj.groupsRequest = message.groupsRequest
      ? NetworkAPIV1_APIV1GroupsRequest_GroupsRequest.toJSON(message.groupsRequest)
      : undefined);
    message.triggerGroup !== undefined && (obj.triggerGroup = message.triggerGroup
      ? NetworkAPIV1_APIV1GroupsRequest_TriggerGroup.toJSON(message.triggerGroup)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsRequest>, I>>(base?: I): NetworkAPIV1_APIV1GroupsRequest {
    return NetworkAPIV1_APIV1GroupsRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1GroupsRequest {
    const message = createBaseNetworkAPIV1_APIV1GroupsRequest();
    message.groupsRequest = (object.groupsRequest !== undefined && object.groupsRequest !== null)
      ? NetworkAPIV1_APIV1GroupsRequest_GroupsRequest.fromPartial(object.groupsRequest)
      : undefined;
    message.triggerGroup = (object.triggerGroup !== undefined && object.triggerGroup !== null)
      ? NetworkAPIV1_APIV1GroupsRequest_TriggerGroup.fromPartial(object.triggerGroup)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1GroupsRequest_GroupsRequest(): NetworkAPIV1_APIV1GroupsRequest_GroupsRequest {
  return {};
}

export const NetworkAPIV1_APIV1GroupsRequest_GroupsRequest = {
  encode(_: NetworkAPIV1_APIV1GroupsRequest_GroupsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1GroupsRequest_GroupsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1GroupsRequest_GroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1GroupsRequest_GroupsRequest {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1GroupsRequest_GroupsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsRequest_GroupsRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1GroupsRequest_GroupsRequest {
    return NetworkAPIV1_APIV1GroupsRequest_GroupsRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsRequest_GroupsRequest>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1GroupsRequest_GroupsRequest {
    const message = createBaseNetworkAPIV1_APIV1GroupsRequest_GroupsRequest();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1GroupsRequest_TriggerGroup(): NetworkAPIV1_APIV1GroupsRequest_TriggerGroup {
  return { id: "" };
}

export const NetworkAPIV1_APIV1GroupsRequest_TriggerGroup = {
  encode(message: NetworkAPIV1_APIV1GroupsRequest_TriggerGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1GroupsRequest_TriggerGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1GroupsRequest_TriggerGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1GroupsRequest_TriggerGroup {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1GroupsRequest_TriggerGroup): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsRequest_TriggerGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1GroupsRequest_TriggerGroup {
    return NetworkAPIV1_APIV1GroupsRequest_TriggerGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsRequest_TriggerGroup>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1GroupsRequest_TriggerGroup {
    const message = createBaseNetworkAPIV1_APIV1GroupsRequest_TriggerGroup();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkRequest(): NetworkAPIV1_APIV1LinkRequest {
  return { heartbeat: undefined, status: undefined, addMember: undefined, removeMember: undefined };
}

export const NetworkAPIV1_APIV1LinkRequest = {
  encode(message: NetworkAPIV1_APIV1LinkRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.heartbeat !== undefined) {
      NetworkAPIV1_APIV1LinkRequest_Heartbeat.encode(message.heartbeat, writer.uint32(10).fork()).ldelim();
    }
    if (message.status !== undefined) {
      NetworkAPIV1_APIV1LinkRequest_Status.encode(message.status, writer.uint32(18).fork()).ldelim();
    }
    if (message.addMember !== undefined) {
      NetworkAPIV1_APIV1LinkRequest_AddMember.encode(message.addMember, writer.uint32(26).fork()).ldelim();
    }
    if (message.removeMember !== undefined) {
      NetworkAPIV1_APIV1LinkRequest_RemoveMember.encode(message.removeMember, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LinkRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.heartbeat = NetworkAPIV1_APIV1LinkRequest_Heartbeat.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.status = NetworkAPIV1_APIV1LinkRequest_Status.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.addMember = NetworkAPIV1_APIV1LinkRequest_AddMember.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.removeMember = NetworkAPIV1_APIV1LinkRequest_RemoveMember.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LinkRequest {
    return {
      heartbeat: isSet(object.heartbeat)
        ? NetworkAPIV1_APIV1LinkRequest_Heartbeat.fromJSON(object.heartbeat)
        : undefined,
      status: isSet(object.status) ? NetworkAPIV1_APIV1LinkRequest_Status.fromJSON(object.status) : undefined,
      addMember: isSet(object.addMember)
        ? NetworkAPIV1_APIV1LinkRequest_AddMember.fromJSON(object.addMember)
        : undefined,
      removeMember: isSet(object.removeMember)
        ? NetworkAPIV1_APIV1LinkRequest_RemoveMember.fromJSON(object.removeMember)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LinkRequest): unknown {
    const obj: any = {};
    message.heartbeat !== undefined &&
      (obj.heartbeat = message.heartbeat
        ? NetworkAPIV1_APIV1LinkRequest_Heartbeat.toJSON(message.heartbeat)
        : undefined);
    message.status !== undefined &&
      (obj.status = message.status ? NetworkAPIV1_APIV1LinkRequest_Status.toJSON(message.status) : undefined);
    message.addMember !== undefined &&
      (obj.addMember = message.addMember
        ? NetworkAPIV1_APIV1LinkRequest_AddMember.toJSON(message.addMember)
        : undefined);
    message.removeMember !== undefined && (obj.removeMember = message.removeMember
      ? NetworkAPIV1_APIV1LinkRequest_RemoveMember.toJSON(message.removeMember)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkRequest>, I>>(base?: I): NetworkAPIV1_APIV1LinkRequest {
    return NetworkAPIV1_APIV1LinkRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LinkRequest {
    const message = createBaseNetworkAPIV1_APIV1LinkRequest();
    message.heartbeat = (object.heartbeat !== undefined && object.heartbeat !== null)
      ? NetworkAPIV1_APIV1LinkRequest_Heartbeat.fromPartial(object.heartbeat)
      : undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? NetworkAPIV1_APIV1LinkRequest_Status.fromPartial(object.status)
      : undefined;
    message.addMember = (object.addMember !== undefined && object.addMember !== null)
      ? NetworkAPIV1_APIV1LinkRequest_AddMember.fromPartial(object.addMember)
      : undefined;
    message.removeMember = (object.removeMember !== undefined && object.removeMember !== null)
      ? NetworkAPIV1_APIV1LinkRequest_RemoveMember.fromPartial(object.removeMember)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkRequest_Heartbeat(): NetworkAPIV1_APIV1LinkRequest_Heartbeat {
  return { port: 0, ifModifiedSince: "" };
}

export const NetworkAPIV1_APIV1LinkRequest_Heartbeat = {
  encode(message: NetworkAPIV1_APIV1LinkRequest_Heartbeat, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.port !== 0) {
      writer.uint32(8).uint32(message.port);
    }
    if (message.ifModifiedSince !== "") {
      writer.uint32(18).string(message.ifModifiedSince);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LinkRequest_Heartbeat {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkRequest_Heartbeat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.port = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.ifModifiedSince = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LinkRequest_Heartbeat {
    return {
      port: isSet(object.port) ? Number(object.port) : 0,
      ifModifiedSince: isSet(object.ifModifiedSince) ? String(object.ifModifiedSince) : "",
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LinkRequest_Heartbeat): unknown {
    const obj: any = {};
    message.port !== undefined && (obj.port = Math.round(message.port));
    message.ifModifiedSince !== undefined && (obj.ifModifiedSince = message.ifModifiedSince);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkRequest_Heartbeat>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LinkRequest_Heartbeat {
    return NetworkAPIV1_APIV1LinkRequest_Heartbeat.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkRequest_Heartbeat>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LinkRequest_Heartbeat {
    const message = createBaseNetworkAPIV1_APIV1LinkRequest_Heartbeat();
    message.port = object.port ?? 0;
    message.ifModifiedSince = object.ifModifiedSince ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkRequest_Status(): NetworkAPIV1_APIV1LinkRequest_Status {
  return {};
}

export const NetworkAPIV1_APIV1LinkRequest_Status = {
  encode(_: NetworkAPIV1_APIV1LinkRequest_Status, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LinkRequest_Status {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkRequest_Status();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1LinkRequest_Status {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1LinkRequest_Status): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkRequest_Status>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LinkRequest_Status {
    return NetworkAPIV1_APIV1LinkRequest_Status.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkRequest_Status>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1LinkRequest_Status {
    const message = createBaseNetworkAPIV1_APIV1LinkRequest_Status();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkRequest_AddMember(): NetworkAPIV1_APIV1LinkRequest_AddMember {
  return { groupDefinition: undefined, memberDetails: undefined };
}

export const NetworkAPIV1_APIV1LinkRequest_AddMember = {
  encode(message: NetworkAPIV1_APIV1LinkRequest_AddMember, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.groupDefinition !== undefined) {
      APIV1GroupDefinition.encode(message.groupDefinition, writer.uint32(10).fork()).ldelim();
    }
    if (message.memberDetails !== undefined) {
      APIV1GroupMember.encode(message.memberDetails, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LinkRequest_AddMember {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkRequest_AddMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.groupDefinition = APIV1GroupDefinition.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.memberDetails = APIV1GroupMember.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LinkRequest_AddMember {
    return {
      groupDefinition: isSet(object.groupDefinition)
        ? APIV1GroupDefinition.fromJSON(object.groupDefinition)
        : undefined,
      memberDetails: isSet(object.memberDetails) ? APIV1GroupMember.fromJSON(object.memberDetails) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LinkRequest_AddMember): unknown {
    const obj: any = {};
    message.groupDefinition !== undefined &&
      (obj.groupDefinition = message.groupDefinition
        ? APIV1GroupDefinition.toJSON(message.groupDefinition)
        : undefined);
    message.memberDetails !== undefined &&
      (obj.memberDetails = message.memberDetails ? APIV1GroupMember.toJSON(message.memberDetails) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkRequest_AddMember>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LinkRequest_AddMember {
    return NetworkAPIV1_APIV1LinkRequest_AddMember.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkRequest_AddMember>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LinkRequest_AddMember {
    const message = createBaseNetworkAPIV1_APIV1LinkRequest_AddMember();
    message.groupDefinition = (object.groupDefinition !== undefined && object.groupDefinition !== null)
      ? APIV1GroupDefinition.fromPartial(object.groupDefinition)
      : undefined;
    message.memberDetails = (object.memberDetails !== undefined && object.memberDetails !== null)
      ? APIV1GroupMember.fromPartial(object.memberDetails)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkRequest_RemoveMember(): NetworkAPIV1_APIV1LinkRequest_RemoveMember {
  return { memberDetails: undefined };
}

export const NetworkAPIV1_APIV1LinkRequest_RemoveMember = {
  encode(message: NetworkAPIV1_APIV1LinkRequest_RemoveMember, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.memberDetails !== undefined) {
      APIV1GroupMember.encode(message.memberDetails, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LinkRequest_RemoveMember {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkRequest_RemoveMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.memberDetails = APIV1GroupMember.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LinkRequest_RemoveMember {
    return { memberDetails: isSet(object.memberDetails) ? APIV1GroupMember.fromJSON(object.memberDetails) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1LinkRequest_RemoveMember): unknown {
    const obj: any = {};
    message.memberDetails !== undefined &&
      (obj.memberDetails = message.memberDetails ? APIV1GroupMember.toJSON(message.memberDetails) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkRequest_RemoveMember>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LinkRequest_RemoveMember {
    return NetworkAPIV1_APIV1LinkRequest_RemoveMember.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkRequest_RemoveMember>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LinkRequest_RemoveMember {
    const message = createBaseNetworkAPIV1_APIV1LinkRequest_RemoveMember();
    message.memberDetails = (object.memberDetails !== undefined && object.memberDetails !== null)
      ? APIV1GroupMember.fromPartial(object.memberDetails)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LibraryRequest(): NetworkAPIV1_APIV1LibraryRequest {
  return { libraries: undefined, library: undefined, trigger: undefined };
}

export const NetworkAPIV1_APIV1LibraryRequest = {
  encode(message: NetworkAPIV1_APIV1LibraryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.libraries !== undefined) {
      NetworkAPIV1_APIV1LibraryRequest_Libraries.encode(message.libraries, writer.uint32(10).fork()).ldelim();
    }
    if (message.library !== undefined) {
      NetworkAPIV1_APIV1LibraryRequest_Library.encode(message.library, writer.uint32(18).fork()).ldelim();
    }
    if (message.trigger !== undefined) {
      NetworkAPIV1_APIV1LibraryRequest_Trigger.encode(message.trigger, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LibraryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LibraryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.libraries = NetworkAPIV1_APIV1LibraryRequest_Libraries.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.library = NetworkAPIV1_APIV1LibraryRequest_Library.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.trigger = NetworkAPIV1_APIV1LibraryRequest_Trigger.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LibraryRequest {
    return {
      libraries: isSet(object.libraries)
        ? NetworkAPIV1_APIV1LibraryRequest_Libraries.fromJSON(object.libraries)
        : undefined,
      library: isSet(object.library) ? NetworkAPIV1_APIV1LibraryRequest_Library.fromJSON(object.library) : undefined,
      trigger: isSet(object.trigger) ? NetworkAPIV1_APIV1LibraryRequest_Trigger.fromJSON(object.trigger) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LibraryRequest): unknown {
    const obj: any = {};
    message.libraries !== undefined && (obj.libraries = message.libraries
      ? NetworkAPIV1_APIV1LibraryRequest_Libraries.toJSON(message.libraries)
      : undefined);
    message.library !== undefined &&
      (obj.library = message.library ? NetworkAPIV1_APIV1LibraryRequest_Library.toJSON(message.library) : undefined);
    message.trigger !== undefined &&
      (obj.trigger = message.trigger ? NetworkAPIV1_APIV1LibraryRequest_Trigger.toJSON(message.trigger) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LibraryRequest {
    return NetworkAPIV1_APIV1LibraryRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LibraryRequest {
    const message = createBaseNetworkAPIV1_APIV1LibraryRequest();
    message.libraries = (object.libraries !== undefined && object.libraries !== null)
      ? NetworkAPIV1_APIV1LibraryRequest_Libraries.fromPartial(object.libraries)
      : undefined;
    message.library = (object.library !== undefined && object.library !== null)
      ? NetworkAPIV1_APIV1LibraryRequest_Library.fromPartial(object.library)
      : undefined;
    message.trigger = (object.trigger !== undefined && object.trigger !== null)
      ? NetworkAPIV1_APIV1LibraryRequest_Trigger.fromPartial(object.trigger)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LibraryRequest_Libraries(): NetworkAPIV1_APIV1LibraryRequest_Libraries {
  return {};
}

export const NetworkAPIV1_APIV1LibraryRequest_Libraries = {
  encode(_: NetworkAPIV1_APIV1LibraryRequest_Libraries, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LibraryRequest_Libraries {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LibraryRequest_Libraries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1LibraryRequest_Libraries {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1LibraryRequest_Libraries): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryRequest_Libraries>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LibraryRequest_Libraries {
    return NetworkAPIV1_APIV1LibraryRequest_Libraries.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryRequest_Libraries>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1LibraryRequest_Libraries {
    const message = createBaseNetworkAPIV1_APIV1LibraryRequest_Libraries();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LibraryRequest_Library(): NetworkAPIV1_APIV1LibraryRequest_Library {
  return { id: "" };
}

export const NetworkAPIV1_APIV1LibraryRequest_Library = {
  encode(message: NetworkAPIV1_APIV1LibraryRequest_Library, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LibraryRequest_Library {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LibraryRequest_Library();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LibraryRequest_Library {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1LibraryRequest_Library): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryRequest_Library>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LibraryRequest_Library {
    return NetworkAPIV1_APIV1LibraryRequest_Library.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryRequest_Library>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LibraryRequest_Library {
    const message = createBaseNetworkAPIV1_APIV1LibraryRequest_Library();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LibraryRequest_Trigger(): NetworkAPIV1_APIV1LibraryRequest_Trigger {
  return { libraryId: "", presentationId: "", index: 0 };
}

export const NetworkAPIV1_APIV1LibraryRequest_Trigger = {
  encode(message: NetworkAPIV1_APIV1LibraryRequest_Trigger, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.libraryId !== "") {
      writer.uint32(10).string(message.libraryId);
    }
    if (message.presentationId !== "") {
      writer.uint32(18).string(message.presentationId);
    }
    if (message.index !== 0) {
      writer.uint32(24).uint32(message.index);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LibraryRequest_Trigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LibraryRequest_Trigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.libraryId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.presentationId = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.index = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LibraryRequest_Trigger {
    return {
      libraryId: isSet(object.libraryId) ? String(object.libraryId) : "",
      presentationId: isSet(object.presentationId) ? String(object.presentationId) : "",
      index: isSet(object.index) ? Number(object.index) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LibraryRequest_Trigger): unknown {
    const obj: any = {};
    message.libraryId !== undefined && (obj.libraryId = message.libraryId);
    message.presentationId !== undefined && (obj.presentationId = message.presentationId);
    message.index !== undefined && (obj.index = Math.round(message.index));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryRequest_Trigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LibraryRequest_Trigger {
    return NetworkAPIV1_APIV1LibraryRequest_Trigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryRequest_Trigger>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LibraryRequest_Trigger {
    const message = createBaseNetworkAPIV1_APIV1LibraryRequest_Trigger();
    message.libraryId = object.libraryId ?? "";
    message.presentationId = object.presentationId ?? "";
    message.index = object.index ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksRequest(): NetworkAPIV1_APIV1LooksRequest {
  return {
    looks: undefined,
    createLook: undefined,
    getCurrentLook: undefined,
    putCurrentLook: undefined,
    getLook: undefined,
    putLook: undefined,
    deleteLook: undefined,
    triggerLook: undefined,
  };
}

export const NetworkAPIV1_APIV1LooksRequest = {
  encode(message: NetworkAPIV1_APIV1LooksRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.looks !== undefined) {
      NetworkAPIV1_APIV1LooksRequest_Looks.encode(message.looks, writer.uint32(10).fork()).ldelim();
    }
    if (message.createLook !== undefined) {
      NetworkAPIV1_APIV1LooksRequest_CreateLook.encode(message.createLook, writer.uint32(18).fork()).ldelim();
    }
    if (message.getCurrentLook !== undefined) {
      NetworkAPIV1_APIV1LooksRequest_GetCurrentLook.encode(message.getCurrentLook, writer.uint32(26).fork()).ldelim();
    }
    if (message.putCurrentLook !== undefined) {
      NetworkAPIV1_APIV1LooksRequest_PutCurrentLook.encode(message.putCurrentLook, writer.uint32(34).fork()).ldelim();
    }
    if (message.getLook !== undefined) {
      NetworkAPIV1_APIV1LooksRequest_GetLook.encode(message.getLook, writer.uint32(42).fork()).ldelim();
    }
    if (message.putLook !== undefined) {
      NetworkAPIV1_APIV1LooksRequest_PutLook.encode(message.putLook, writer.uint32(50).fork()).ldelim();
    }
    if (message.deleteLook !== undefined) {
      NetworkAPIV1_APIV1LooksRequest_DeleteLook.encode(message.deleteLook, writer.uint32(58).fork()).ldelim();
    }
    if (message.triggerLook !== undefined) {
      NetworkAPIV1_APIV1LooksRequest_TriggerLook.encode(message.triggerLook, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.looks = NetworkAPIV1_APIV1LooksRequest_Looks.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.createLook = NetworkAPIV1_APIV1LooksRequest_CreateLook.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getCurrentLook = NetworkAPIV1_APIV1LooksRequest_GetCurrentLook.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.putCurrentLook = NetworkAPIV1_APIV1LooksRequest_PutCurrentLook.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.getLook = NetworkAPIV1_APIV1LooksRequest_GetLook.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.putLook = NetworkAPIV1_APIV1LooksRequest_PutLook.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.deleteLook = NetworkAPIV1_APIV1LooksRequest_DeleteLook.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.triggerLook = NetworkAPIV1_APIV1LooksRequest_TriggerLook.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksRequest {
    return {
      looks: isSet(object.looks) ? NetworkAPIV1_APIV1LooksRequest_Looks.fromJSON(object.looks) : undefined,
      createLook: isSet(object.createLook)
        ? NetworkAPIV1_APIV1LooksRequest_CreateLook.fromJSON(object.createLook)
        : undefined,
      getCurrentLook: isSet(object.getCurrentLook)
        ? NetworkAPIV1_APIV1LooksRequest_GetCurrentLook.fromJSON(object.getCurrentLook)
        : undefined,
      putCurrentLook: isSet(object.putCurrentLook)
        ? NetworkAPIV1_APIV1LooksRequest_PutCurrentLook.fromJSON(object.putCurrentLook)
        : undefined,
      getLook: isSet(object.getLook) ? NetworkAPIV1_APIV1LooksRequest_GetLook.fromJSON(object.getLook) : undefined,
      putLook: isSet(object.putLook) ? NetworkAPIV1_APIV1LooksRequest_PutLook.fromJSON(object.putLook) : undefined,
      deleteLook: isSet(object.deleteLook)
        ? NetworkAPIV1_APIV1LooksRequest_DeleteLook.fromJSON(object.deleteLook)
        : undefined,
      triggerLook: isSet(object.triggerLook)
        ? NetworkAPIV1_APIV1LooksRequest_TriggerLook.fromJSON(object.triggerLook)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksRequest): unknown {
    const obj: any = {};
    message.looks !== undefined &&
      (obj.looks = message.looks ? NetworkAPIV1_APIV1LooksRequest_Looks.toJSON(message.looks) : undefined);
    message.createLook !== undefined && (obj.createLook = message.createLook
      ? NetworkAPIV1_APIV1LooksRequest_CreateLook.toJSON(message.createLook)
      : undefined);
    message.getCurrentLook !== undefined && (obj.getCurrentLook = message.getCurrentLook
      ? NetworkAPIV1_APIV1LooksRequest_GetCurrentLook.toJSON(message.getCurrentLook)
      : undefined);
    message.putCurrentLook !== undefined && (obj.putCurrentLook = message.putCurrentLook
      ? NetworkAPIV1_APIV1LooksRequest_PutCurrentLook.toJSON(message.putCurrentLook)
      : undefined);
    message.getLook !== undefined &&
      (obj.getLook = message.getLook ? NetworkAPIV1_APIV1LooksRequest_GetLook.toJSON(message.getLook) : undefined);
    message.putLook !== undefined &&
      (obj.putLook = message.putLook ? NetworkAPIV1_APIV1LooksRequest_PutLook.toJSON(message.putLook) : undefined);
    message.deleteLook !== undefined && (obj.deleteLook = message.deleteLook
      ? NetworkAPIV1_APIV1LooksRequest_DeleteLook.toJSON(message.deleteLook)
      : undefined);
    message.triggerLook !== undefined && (obj.triggerLook = message.triggerLook
      ? NetworkAPIV1_APIV1LooksRequest_TriggerLook.toJSON(message.triggerLook)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest>, I>>(base?: I): NetworkAPIV1_APIV1LooksRequest {
    return NetworkAPIV1_APIV1LooksRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksRequest {
    const message = createBaseNetworkAPIV1_APIV1LooksRequest();
    message.looks = (object.looks !== undefined && object.looks !== null)
      ? NetworkAPIV1_APIV1LooksRequest_Looks.fromPartial(object.looks)
      : undefined;
    message.createLook = (object.createLook !== undefined && object.createLook !== null)
      ? NetworkAPIV1_APIV1LooksRequest_CreateLook.fromPartial(object.createLook)
      : undefined;
    message.getCurrentLook = (object.getCurrentLook !== undefined && object.getCurrentLook !== null)
      ? NetworkAPIV1_APIV1LooksRequest_GetCurrentLook.fromPartial(object.getCurrentLook)
      : undefined;
    message.putCurrentLook = (object.putCurrentLook !== undefined && object.putCurrentLook !== null)
      ? NetworkAPIV1_APIV1LooksRequest_PutCurrentLook.fromPartial(object.putCurrentLook)
      : undefined;
    message.getLook = (object.getLook !== undefined && object.getLook !== null)
      ? NetworkAPIV1_APIV1LooksRequest_GetLook.fromPartial(object.getLook)
      : undefined;
    message.putLook = (object.putLook !== undefined && object.putLook !== null)
      ? NetworkAPIV1_APIV1LooksRequest_PutLook.fromPartial(object.putLook)
      : undefined;
    message.deleteLook = (object.deleteLook !== undefined && object.deleteLook !== null)
      ? NetworkAPIV1_APIV1LooksRequest_DeleteLook.fromPartial(object.deleteLook)
      : undefined;
    message.triggerLook = (object.triggerLook !== undefined && object.triggerLook !== null)
      ? NetworkAPIV1_APIV1LooksRequest_TriggerLook.fromPartial(object.triggerLook)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksRequest_Looks(): NetworkAPIV1_APIV1LooksRequest_Looks {
  return {};
}

export const NetworkAPIV1_APIV1LooksRequest_Looks = {
  encode(_: NetworkAPIV1_APIV1LooksRequest_Looks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksRequest_Looks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_Looks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1LooksRequest_Looks {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1LooksRequest_Looks): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_Looks>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksRequest_Looks {
    return NetworkAPIV1_APIV1LooksRequest_Looks.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_Looks>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1LooksRequest_Looks {
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_Looks();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksRequest_CreateLook(): NetworkAPIV1_APIV1LooksRequest_CreateLook {
  return { look: undefined };
}

export const NetworkAPIV1_APIV1LooksRequest_CreateLook = {
  encode(message: NetworkAPIV1_APIV1LooksRequest_CreateLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.look !== undefined) {
      APIV1Look.encode(message.look, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksRequest_CreateLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_CreateLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.look = APIV1Look.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksRequest_CreateLook {
    return { look: isSet(object.look) ? APIV1Look.fromJSON(object.look) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksRequest_CreateLook): unknown {
    const obj: any = {};
    message.look !== undefined && (obj.look = message.look ? APIV1Look.toJSON(message.look) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_CreateLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksRequest_CreateLook {
    return NetworkAPIV1_APIV1LooksRequest_CreateLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_CreateLook>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksRequest_CreateLook {
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_CreateLook();
    message.look = (object.look !== undefined && object.look !== null) ? APIV1Look.fromPartial(object.look) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksRequest_GetCurrentLook(): NetworkAPIV1_APIV1LooksRequest_GetCurrentLook {
  return {};
}

export const NetworkAPIV1_APIV1LooksRequest_GetCurrentLook = {
  encode(_: NetworkAPIV1_APIV1LooksRequest_GetCurrentLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksRequest_GetCurrentLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_GetCurrentLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1LooksRequest_GetCurrentLook {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1LooksRequest_GetCurrentLook): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_GetCurrentLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksRequest_GetCurrentLook {
    return NetworkAPIV1_APIV1LooksRequest_GetCurrentLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_GetCurrentLook>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1LooksRequest_GetCurrentLook {
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_GetCurrentLook();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksRequest_PutCurrentLook(): NetworkAPIV1_APIV1LooksRequest_PutCurrentLook {
  return { look: undefined };
}

export const NetworkAPIV1_APIV1LooksRequest_PutCurrentLook = {
  encode(message: NetworkAPIV1_APIV1LooksRequest_PutCurrentLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.look !== undefined) {
      APIV1Look.encode(message.look, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksRequest_PutCurrentLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_PutCurrentLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.look = APIV1Look.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksRequest_PutCurrentLook {
    return { look: isSet(object.look) ? APIV1Look.fromJSON(object.look) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksRequest_PutCurrentLook): unknown {
    const obj: any = {};
    message.look !== undefined && (obj.look = message.look ? APIV1Look.toJSON(message.look) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_PutCurrentLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksRequest_PutCurrentLook {
    return NetworkAPIV1_APIV1LooksRequest_PutCurrentLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_PutCurrentLook>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksRequest_PutCurrentLook {
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_PutCurrentLook();
    message.look = (object.look !== undefined && object.look !== null) ? APIV1Look.fromPartial(object.look) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksRequest_GetLook(): NetworkAPIV1_APIV1LooksRequest_GetLook {
  return { id: "" };
}

export const NetworkAPIV1_APIV1LooksRequest_GetLook = {
  encode(message: NetworkAPIV1_APIV1LooksRequest_GetLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksRequest_GetLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_GetLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksRequest_GetLook {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksRequest_GetLook): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_GetLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksRequest_GetLook {
    return NetworkAPIV1_APIV1LooksRequest_GetLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_GetLook>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksRequest_GetLook {
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_GetLook();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksRequest_PutLook(): NetworkAPIV1_APIV1LooksRequest_PutLook {
  return { id: "", look: undefined };
}

export const NetworkAPIV1_APIV1LooksRequest_PutLook = {
  encode(message: NetworkAPIV1_APIV1LooksRequest_PutLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.look !== undefined) {
      APIV1Look.encode(message.look, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksRequest_PutLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_PutLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.look = APIV1Look.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksRequest_PutLook {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      look: isSet(object.look) ? APIV1Look.fromJSON(object.look) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksRequest_PutLook): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.look !== undefined && (obj.look = message.look ? APIV1Look.toJSON(message.look) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_PutLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksRequest_PutLook {
    return NetworkAPIV1_APIV1LooksRequest_PutLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_PutLook>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksRequest_PutLook {
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_PutLook();
    message.id = object.id ?? "";
    message.look = (object.look !== undefined && object.look !== null) ? APIV1Look.fromPartial(object.look) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksRequest_DeleteLook(): NetworkAPIV1_APIV1LooksRequest_DeleteLook {
  return { id: "" };
}

export const NetworkAPIV1_APIV1LooksRequest_DeleteLook = {
  encode(message: NetworkAPIV1_APIV1LooksRequest_DeleteLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksRequest_DeleteLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_DeleteLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksRequest_DeleteLook {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksRequest_DeleteLook): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_DeleteLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksRequest_DeleteLook {
    return NetworkAPIV1_APIV1LooksRequest_DeleteLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_DeleteLook>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksRequest_DeleteLook {
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_DeleteLook();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksRequest_TriggerLook(): NetworkAPIV1_APIV1LooksRequest_TriggerLook {
  return { id: "" };
}

export const NetworkAPIV1_APIV1LooksRequest_TriggerLook = {
  encode(message: NetworkAPIV1_APIV1LooksRequest_TriggerLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksRequest_TriggerLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_TriggerLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksRequest_TriggerLook {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksRequest_TriggerLook): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_TriggerLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksRequest_TriggerLook {
    return NetworkAPIV1_APIV1LooksRequest_TriggerLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksRequest_TriggerLook>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksRequest_TriggerLook {
    const message = createBaseNetworkAPIV1_APIV1LooksRequest_TriggerLook();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroRequest(): NetworkAPIV1_APIV1MacroRequest {
  return {
    macros: undefined,
    getMacro: undefined,
    putMacro: undefined,
    deleteMacro: undefined,
    triggerMacro: undefined,
  };
}

export const NetworkAPIV1_APIV1MacroRequest = {
  encode(message: NetworkAPIV1_APIV1MacroRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.macros !== undefined) {
      NetworkAPIV1_APIV1MacroRequest_Macros.encode(message.macros, writer.uint32(10).fork()).ldelim();
    }
    if (message.getMacro !== undefined) {
      NetworkAPIV1_APIV1MacroRequest_GetMacro.encode(message.getMacro, writer.uint32(18).fork()).ldelim();
    }
    if (message.putMacro !== undefined) {
      NetworkAPIV1_APIV1MacroRequest_PutMacro.encode(message.putMacro, writer.uint32(26).fork()).ldelim();
    }
    if (message.deleteMacro !== undefined) {
      NetworkAPIV1_APIV1MacroRequest_DeleteMacro.encode(message.deleteMacro, writer.uint32(34).fork()).ldelim();
    }
    if (message.triggerMacro !== undefined) {
      NetworkAPIV1_APIV1MacroRequest_TriggerMacro.encode(message.triggerMacro, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.macros = NetworkAPIV1_APIV1MacroRequest_Macros.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getMacro = NetworkAPIV1_APIV1MacroRequest_GetMacro.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.putMacro = NetworkAPIV1_APIV1MacroRequest_PutMacro.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.deleteMacro = NetworkAPIV1_APIV1MacroRequest_DeleteMacro.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.triggerMacro = NetworkAPIV1_APIV1MacroRequest_TriggerMacro.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MacroRequest {
    return {
      macros: isSet(object.macros) ? NetworkAPIV1_APIV1MacroRequest_Macros.fromJSON(object.macros) : undefined,
      getMacro: isSet(object.getMacro) ? NetworkAPIV1_APIV1MacroRequest_GetMacro.fromJSON(object.getMacro) : undefined,
      putMacro: isSet(object.putMacro) ? NetworkAPIV1_APIV1MacroRequest_PutMacro.fromJSON(object.putMacro) : undefined,
      deleteMacro: isSet(object.deleteMacro)
        ? NetworkAPIV1_APIV1MacroRequest_DeleteMacro.fromJSON(object.deleteMacro)
        : undefined,
      triggerMacro: isSet(object.triggerMacro)
        ? NetworkAPIV1_APIV1MacroRequest_TriggerMacro.fromJSON(object.triggerMacro)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MacroRequest): unknown {
    const obj: any = {};
    message.macros !== undefined &&
      (obj.macros = message.macros ? NetworkAPIV1_APIV1MacroRequest_Macros.toJSON(message.macros) : undefined);
    message.getMacro !== undefined &&
      (obj.getMacro = message.getMacro ? NetworkAPIV1_APIV1MacroRequest_GetMacro.toJSON(message.getMacro) : undefined);
    message.putMacro !== undefined &&
      (obj.putMacro = message.putMacro ? NetworkAPIV1_APIV1MacroRequest_PutMacro.toJSON(message.putMacro) : undefined);
    message.deleteMacro !== undefined && (obj.deleteMacro = message.deleteMacro
      ? NetworkAPIV1_APIV1MacroRequest_DeleteMacro.toJSON(message.deleteMacro)
      : undefined);
    message.triggerMacro !== undefined && (obj.triggerMacro = message.triggerMacro
      ? NetworkAPIV1_APIV1MacroRequest_TriggerMacro.toJSON(message.triggerMacro)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest>, I>>(base?: I): NetworkAPIV1_APIV1MacroRequest {
    return NetworkAPIV1_APIV1MacroRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MacroRequest {
    const message = createBaseNetworkAPIV1_APIV1MacroRequest();
    message.macros = (object.macros !== undefined && object.macros !== null)
      ? NetworkAPIV1_APIV1MacroRequest_Macros.fromPartial(object.macros)
      : undefined;
    message.getMacro = (object.getMacro !== undefined && object.getMacro !== null)
      ? NetworkAPIV1_APIV1MacroRequest_GetMacro.fromPartial(object.getMacro)
      : undefined;
    message.putMacro = (object.putMacro !== undefined && object.putMacro !== null)
      ? NetworkAPIV1_APIV1MacroRequest_PutMacro.fromPartial(object.putMacro)
      : undefined;
    message.deleteMacro = (object.deleteMacro !== undefined && object.deleteMacro !== null)
      ? NetworkAPIV1_APIV1MacroRequest_DeleteMacro.fromPartial(object.deleteMacro)
      : undefined;
    message.triggerMacro = (object.triggerMacro !== undefined && object.triggerMacro !== null)
      ? NetworkAPIV1_APIV1MacroRequest_TriggerMacro.fromPartial(object.triggerMacro)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroRequest_Macros(): NetworkAPIV1_APIV1MacroRequest_Macros {
  return {};
}

export const NetworkAPIV1_APIV1MacroRequest_Macros = {
  encode(_: NetworkAPIV1_APIV1MacroRequest_Macros, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroRequest_Macros {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroRequest_Macros();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MacroRequest_Macros {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MacroRequest_Macros): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest_Macros>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MacroRequest_Macros {
    return NetworkAPIV1_APIV1MacroRequest_Macros.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest_Macros>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MacroRequest_Macros {
    const message = createBaseNetworkAPIV1_APIV1MacroRequest_Macros();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroRequest_GetMacro(): NetworkAPIV1_APIV1MacroRequest_GetMacro {
  return { id: "" };
}

export const NetworkAPIV1_APIV1MacroRequest_GetMacro = {
  encode(message: NetworkAPIV1_APIV1MacroRequest_GetMacro, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroRequest_GetMacro {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroRequest_GetMacro();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MacroRequest_GetMacro {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1MacroRequest_GetMacro): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest_GetMacro>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MacroRequest_GetMacro {
    return NetworkAPIV1_APIV1MacroRequest_GetMacro.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest_GetMacro>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MacroRequest_GetMacro {
    const message = createBaseNetworkAPIV1_APIV1MacroRequest_GetMacro();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroRequest_PutMacro(): NetworkAPIV1_APIV1MacroRequest_PutMacro {
  return { id: "", nameChange: "", colorChange: undefined };
}

export const NetworkAPIV1_APIV1MacroRequest_PutMacro = {
  encode(message: NetworkAPIV1_APIV1MacroRequest_PutMacro, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.nameChange !== "") {
      writer.uint32(18).string(message.nameChange);
    }
    if (message.colorChange !== undefined) {
      APIV1Color.encode(message.colorChange, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroRequest_PutMacro {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroRequest_PutMacro();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.nameChange = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.colorChange = APIV1Color.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MacroRequest_PutMacro {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      nameChange: isSet(object.nameChange) ? String(object.nameChange) : "",
      colorChange: isSet(object.colorChange) ? APIV1Color.fromJSON(object.colorChange) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MacroRequest_PutMacro): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.nameChange !== undefined && (obj.nameChange = message.nameChange);
    message.colorChange !== undefined &&
      (obj.colorChange = message.colorChange ? APIV1Color.toJSON(message.colorChange) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest_PutMacro>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MacroRequest_PutMacro {
    return NetworkAPIV1_APIV1MacroRequest_PutMacro.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest_PutMacro>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MacroRequest_PutMacro {
    const message = createBaseNetworkAPIV1_APIV1MacroRequest_PutMacro();
    message.id = object.id ?? "";
    message.nameChange = object.nameChange ?? "";
    message.colorChange = (object.colorChange !== undefined && object.colorChange !== null)
      ? APIV1Color.fromPartial(object.colorChange)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroRequest_DeleteMacro(): NetworkAPIV1_APIV1MacroRequest_DeleteMacro {
  return { id: "" };
}

export const NetworkAPIV1_APIV1MacroRequest_DeleteMacro = {
  encode(message: NetworkAPIV1_APIV1MacroRequest_DeleteMacro, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroRequest_DeleteMacro {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroRequest_DeleteMacro();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MacroRequest_DeleteMacro {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1MacroRequest_DeleteMacro): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest_DeleteMacro>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MacroRequest_DeleteMacro {
    return NetworkAPIV1_APIV1MacroRequest_DeleteMacro.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest_DeleteMacro>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MacroRequest_DeleteMacro {
    const message = createBaseNetworkAPIV1_APIV1MacroRequest_DeleteMacro();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroRequest_TriggerMacro(): NetworkAPIV1_APIV1MacroRequest_TriggerMacro {
  return { id: "" };
}

export const NetworkAPIV1_APIV1MacroRequest_TriggerMacro = {
  encode(message: NetworkAPIV1_APIV1MacroRequest_TriggerMacro, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroRequest_TriggerMacro {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroRequest_TriggerMacro();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MacroRequest_TriggerMacro {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1MacroRequest_TriggerMacro): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest_TriggerMacro>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MacroRequest_TriggerMacro {
    return NetworkAPIV1_APIV1MacroRequest_TriggerMacro.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroRequest_TriggerMacro>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MacroRequest_TriggerMacro {
    const message = createBaseNetworkAPIV1_APIV1MacroRequest_TriggerMacro();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MasksRequest(): NetworkAPIV1_APIV1MasksRequest {
  return { masks: undefined, getMask: undefined, getThumbnail: undefined };
}

export const NetworkAPIV1_APIV1MasksRequest = {
  encode(message: NetworkAPIV1_APIV1MasksRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.masks !== undefined) {
      NetworkAPIV1_APIV1MasksRequest_Masks.encode(message.masks, writer.uint32(10).fork()).ldelim();
    }
    if (message.getMask !== undefined) {
      NetworkAPIV1_APIV1MasksRequest_GetMask.encode(message.getMask, writer.uint32(18).fork()).ldelim();
    }
    if (message.getThumbnail !== undefined) {
      NetworkAPIV1_APIV1MasksRequest_GetThumbnail.encode(message.getThumbnail, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MasksRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MasksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.masks = NetworkAPIV1_APIV1MasksRequest_Masks.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getMask = NetworkAPIV1_APIV1MasksRequest_GetMask.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getThumbnail = NetworkAPIV1_APIV1MasksRequest_GetThumbnail.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MasksRequest {
    return {
      masks: isSet(object.masks) ? NetworkAPIV1_APIV1MasksRequest_Masks.fromJSON(object.masks) : undefined,
      getMask: isSet(object.getMask) ? NetworkAPIV1_APIV1MasksRequest_GetMask.fromJSON(object.getMask) : undefined,
      getThumbnail: isSet(object.getThumbnail)
        ? NetworkAPIV1_APIV1MasksRequest_GetThumbnail.fromJSON(object.getThumbnail)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MasksRequest): unknown {
    const obj: any = {};
    message.masks !== undefined &&
      (obj.masks = message.masks ? NetworkAPIV1_APIV1MasksRequest_Masks.toJSON(message.masks) : undefined);
    message.getMask !== undefined &&
      (obj.getMask = message.getMask ? NetworkAPIV1_APIV1MasksRequest_GetMask.toJSON(message.getMask) : undefined);
    message.getThumbnail !== undefined && (obj.getThumbnail = message.getThumbnail
      ? NetworkAPIV1_APIV1MasksRequest_GetThumbnail.toJSON(message.getThumbnail)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksRequest>, I>>(base?: I): NetworkAPIV1_APIV1MasksRequest {
    return NetworkAPIV1_APIV1MasksRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MasksRequest {
    const message = createBaseNetworkAPIV1_APIV1MasksRequest();
    message.masks = (object.masks !== undefined && object.masks !== null)
      ? NetworkAPIV1_APIV1MasksRequest_Masks.fromPartial(object.masks)
      : undefined;
    message.getMask = (object.getMask !== undefined && object.getMask !== null)
      ? NetworkAPIV1_APIV1MasksRequest_GetMask.fromPartial(object.getMask)
      : undefined;
    message.getThumbnail = (object.getThumbnail !== undefined && object.getThumbnail !== null)
      ? NetworkAPIV1_APIV1MasksRequest_GetThumbnail.fromPartial(object.getThumbnail)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MasksRequest_Masks(): NetworkAPIV1_APIV1MasksRequest_Masks {
  return {};
}

export const NetworkAPIV1_APIV1MasksRequest_Masks = {
  encode(_: NetworkAPIV1_APIV1MasksRequest_Masks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MasksRequest_Masks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MasksRequest_Masks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MasksRequest_Masks {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MasksRequest_Masks): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksRequest_Masks>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MasksRequest_Masks {
    return NetworkAPIV1_APIV1MasksRequest_Masks.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksRequest_Masks>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MasksRequest_Masks {
    const message = createBaseNetworkAPIV1_APIV1MasksRequest_Masks();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MasksRequest_GetMask(): NetworkAPIV1_APIV1MasksRequest_GetMask {
  return { id: "" };
}

export const NetworkAPIV1_APIV1MasksRequest_GetMask = {
  encode(message: NetworkAPIV1_APIV1MasksRequest_GetMask, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MasksRequest_GetMask {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MasksRequest_GetMask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MasksRequest_GetMask {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1MasksRequest_GetMask): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksRequest_GetMask>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MasksRequest_GetMask {
    return NetworkAPIV1_APIV1MasksRequest_GetMask.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksRequest_GetMask>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MasksRequest_GetMask {
    const message = createBaseNetworkAPIV1_APIV1MasksRequest_GetMask();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MasksRequest_GetThumbnail(): NetworkAPIV1_APIV1MasksRequest_GetThumbnail {
  return { id: "", quality: 0 };
}

export const NetworkAPIV1_APIV1MasksRequest_GetThumbnail = {
  encode(message: NetworkAPIV1_APIV1MasksRequest_GetThumbnail, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.quality !== 0) {
      writer.uint32(16).int32(message.quality);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MasksRequest_GetThumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MasksRequest_GetThumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.quality = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MasksRequest_GetThumbnail {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      quality: isSet(object.quality) ? Number(object.quality) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MasksRequest_GetThumbnail): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.quality !== undefined && (obj.quality = Math.round(message.quality));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksRequest_GetThumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MasksRequest_GetThumbnail {
    return NetworkAPIV1_APIV1MasksRequest_GetThumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksRequest_GetThumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MasksRequest_GetThumbnail {
    const message = createBaseNetworkAPIV1_APIV1MasksRequest_GetThumbnail();
    message.id = object.id ?? "";
    message.quality = object.quality ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaRequest(): NetworkAPIV1_APIV1MediaRequest {
  return {
    playlists: undefined,
    getPlaylist: undefined,
    getPlaylistUpdates: undefined,
    getThumbnail: undefined,
    playlistFocused: undefined,
    playlistActive: undefined,
    focus: undefined,
    trigger: undefined,
  };
}

export const NetworkAPIV1_APIV1MediaRequest = {
  encode(message: NetworkAPIV1_APIV1MediaRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playlists !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_Playlists.encode(message.playlists, writer.uint32(10).fork()).ldelim();
    }
    if (message.getPlaylist !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_GetPlaylist.encode(message.getPlaylist, writer.uint32(18).fork()).ldelim();
    }
    if (message.getPlaylistUpdates !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates.encode(message.getPlaylistUpdates, writer.uint32(26).fork())
        .ldelim();
    }
    if (message.getThumbnail !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_GetThumbnail.encode(message.getThumbnail, writer.uint32(34).fork()).ldelim();
    }
    if (message.playlistFocused !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_EmptyMessage.encode(message.playlistFocused, writer.uint32(42).fork()).ldelim();
    }
    if (message.playlistActive !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_EmptyMessage.encode(message.playlistActive, writer.uint32(50).fork()).ldelim();
    }
    if (message.focus !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_FocusMessage.encode(message.focus, writer.uint32(58).fork()).ldelim();
    }
    if (message.trigger !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_TriggerMessage.encode(message.trigger, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlists = NetworkAPIV1_APIV1MediaRequest_Playlists.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getPlaylist = NetworkAPIV1_APIV1MediaRequest_GetPlaylist.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getPlaylistUpdates = NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.getThumbnail = NetworkAPIV1_APIV1MediaRequest_GetThumbnail.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.playlistFocused = NetworkAPIV1_APIV1MediaRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.playlistActive = NetworkAPIV1_APIV1MediaRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.focus = NetworkAPIV1_APIV1MediaRequest_FocusMessage.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.trigger = NetworkAPIV1_APIV1MediaRequest_TriggerMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaRequest {
    return {
      playlists: isSet(object.playlists)
        ? NetworkAPIV1_APIV1MediaRequest_Playlists.fromJSON(object.playlists)
        : undefined,
      getPlaylist: isSet(object.getPlaylist)
        ? NetworkAPIV1_APIV1MediaRequest_GetPlaylist.fromJSON(object.getPlaylist)
        : undefined,
      getPlaylistUpdates: isSet(object.getPlaylistUpdates)
        ? NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates.fromJSON(object.getPlaylistUpdates)
        : undefined,
      getThumbnail: isSet(object.getThumbnail)
        ? NetworkAPIV1_APIV1MediaRequest_GetThumbnail.fromJSON(object.getThumbnail)
        : undefined,
      playlistFocused: isSet(object.playlistFocused)
        ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromJSON(object.playlistFocused)
        : undefined,
      playlistActive: isSet(object.playlistActive)
        ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromJSON(object.playlistActive)
        : undefined,
      focus: isSet(object.focus) ? NetworkAPIV1_APIV1MediaRequest_FocusMessage.fromJSON(object.focus) : undefined,
      trigger: isSet(object.trigger)
        ? NetworkAPIV1_APIV1MediaRequest_TriggerMessage.fromJSON(object.trigger)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaRequest): unknown {
    const obj: any = {};
    message.playlists !== undefined && (obj.playlists = message.playlists
      ? NetworkAPIV1_APIV1MediaRequest_Playlists.toJSON(message.playlists)
      : undefined);
    message.getPlaylist !== undefined && (obj.getPlaylist = message.getPlaylist
      ? NetworkAPIV1_APIV1MediaRequest_GetPlaylist.toJSON(message.getPlaylist)
      : undefined);
    message.getPlaylistUpdates !== undefined && (obj.getPlaylistUpdates = message.getPlaylistUpdates
      ? NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates.toJSON(message.getPlaylistUpdates)
      : undefined);
    message.getThumbnail !== undefined && (obj.getThumbnail = message.getThumbnail
      ? NetworkAPIV1_APIV1MediaRequest_GetThumbnail.toJSON(message.getThumbnail)
      : undefined);
    message.playlistFocused !== undefined && (obj.playlistFocused = message.playlistFocused
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.toJSON(message.playlistFocused)
      : undefined);
    message.playlistActive !== undefined && (obj.playlistActive = message.playlistActive
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.toJSON(message.playlistActive)
      : undefined);
    message.focus !== undefined &&
      (obj.focus = message.focus ? NetworkAPIV1_APIV1MediaRequest_FocusMessage.toJSON(message.focus) : undefined);
    message.trigger !== undefined &&
      (obj.trigger = message.trigger
        ? NetworkAPIV1_APIV1MediaRequest_TriggerMessage.toJSON(message.trigger)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest>, I>>(base?: I): NetworkAPIV1_APIV1MediaRequest {
    return NetworkAPIV1_APIV1MediaRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaRequest {
    const message = createBaseNetworkAPIV1_APIV1MediaRequest();
    message.playlists = (object.playlists !== undefined && object.playlists !== null)
      ? NetworkAPIV1_APIV1MediaRequest_Playlists.fromPartial(object.playlists)
      : undefined;
    message.getPlaylist = (object.getPlaylist !== undefined && object.getPlaylist !== null)
      ? NetworkAPIV1_APIV1MediaRequest_GetPlaylist.fromPartial(object.getPlaylist)
      : undefined;
    message.getPlaylistUpdates = (object.getPlaylistUpdates !== undefined && object.getPlaylistUpdates !== null)
      ? NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates.fromPartial(object.getPlaylistUpdates)
      : undefined;
    message.getThumbnail = (object.getThumbnail !== undefined && object.getThumbnail !== null)
      ? NetworkAPIV1_APIV1MediaRequest_GetThumbnail.fromPartial(object.getThumbnail)
      : undefined;
    message.playlistFocused = (object.playlistFocused !== undefined && object.playlistFocused !== null)
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromPartial(object.playlistFocused)
      : undefined;
    message.playlistActive = (object.playlistActive !== undefined && object.playlistActive !== null)
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromPartial(object.playlistActive)
      : undefined;
    message.focus = (object.focus !== undefined && object.focus !== null)
      ? NetworkAPIV1_APIV1MediaRequest_FocusMessage.fromPartial(object.focus)
      : undefined;
    message.trigger = (object.trigger !== undefined && object.trigger !== null)
      ? NetworkAPIV1_APIV1MediaRequest_TriggerMessage.fromPartial(object.trigger)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaRequest_Playlists(): NetworkAPIV1_APIV1MediaRequest_Playlists {
  return {};
}

export const NetworkAPIV1_APIV1MediaRequest_Playlists = {
  encode(_: NetworkAPIV1_APIV1MediaRequest_Playlists, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaRequest_Playlists {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_Playlists();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MediaRequest_Playlists {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MediaRequest_Playlists): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_Playlists>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaRequest_Playlists {
    return NetworkAPIV1_APIV1MediaRequest_Playlists.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_Playlists>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MediaRequest_Playlists {
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_Playlists();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaRequest_GetPlaylist(): NetworkAPIV1_APIV1MediaRequest_GetPlaylist {
  return { id: "", start: 0 };
}

export const NetworkAPIV1_APIV1MediaRequest_GetPlaylist = {
  encode(message: NetworkAPIV1_APIV1MediaRequest_GetPlaylist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.start !== 0) {
      writer.uint32(32).uint32(message.start);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaRequest_GetPlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_GetPlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.start = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaRequest_GetPlaylist {
    return { id: isSet(object.id) ? String(object.id) : "", start: isSet(object.start) ? Number(object.start) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaRequest_GetPlaylist): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.start !== undefined && (obj.start = Math.round(message.start));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_GetPlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaRequest_GetPlaylist {
    return NetworkAPIV1_APIV1MediaRequest_GetPlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_GetPlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaRequest_GetPlaylist {
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_GetPlaylist();
    message.id = object.id ?? "";
    message.start = object.start ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates(): NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates {
  return { id: "" };
}

export const NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates = {
  encode(
    message: NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates {
    return NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates {
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_GetPlaylistUpdates();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaRequest_GetThumbnail(): NetworkAPIV1_APIV1MediaRequest_GetThumbnail {
  return { uuid: undefined, quality: 0 };
}

export const NetworkAPIV1_APIV1MediaRequest_GetThumbnail = {
  encode(message: NetworkAPIV1_APIV1MediaRequest_GetThumbnail, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== undefined) {
      UUID.encode(message.uuid, writer.uint32(10).fork()).ldelim();
    }
    if (message.quality !== 0) {
      writer.uint32(16).int32(message.quality);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaRequest_GetThumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_GetThumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.uuid = UUID.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.quality = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaRequest_GetThumbnail {
    return {
      uuid: isSet(object.uuid) ? UUID.fromJSON(object.uuid) : undefined,
      quality: isSet(object.quality) ? Number(object.quality) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaRequest_GetThumbnail): unknown {
    const obj: any = {};
    message.uuid !== undefined && (obj.uuid = message.uuid ? UUID.toJSON(message.uuid) : undefined);
    message.quality !== undefined && (obj.quality = Math.round(message.quality));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_GetThumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaRequest_GetThumbnail {
    return NetworkAPIV1_APIV1MediaRequest_GetThumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_GetThumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaRequest_GetThumbnail {
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_GetThumbnail();
    message.uuid = (object.uuid !== undefined && object.uuid !== null) ? UUID.fromPartial(object.uuid) : undefined;
    message.quality = object.quality ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaRequest_EmptyMessage(): NetworkAPIV1_APIV1MediaRequest_EmptyMessage {
  return {};
}

export const NetworkAPIV1_APIV1MediaRequest_EmptyMessage = {
  encode(_: NetworkAPIV1_APIV1MediaRequest_EmptyMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaRequest_EmptyMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_EmptyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MediaRequest_EmptyMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MediaRequest_EmptyMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_EmptyMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaRequest_EmptyMessage {
    return NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_EmptyMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MediaRequest_EmptyMessage {
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_EmptyMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaRequest_FocusMessage(): NetworkAPIV1_APIV1MediaRequest_FocusMessage {
  return { next: undefined, previous: undefined, active: undefined, id: undefined };
}

export const NetworkAPIV1_APIV1MediaRequest_FocusMessage = {
  encode(message: NetworkAPIV1_APIV1MediaRequest_FocusMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.next !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_EmptyMessage.encode(message.next, writer.uint32(10).fork()).ldelim();
    }
    if (message.previous !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_EmptyMessage.encode(message.previous, writer.uint32(18).fork()).ldelim();
    }
    if (message.active !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_EmptyMessage.encode(message.active, writer.uint32(26).fork()).ldelim();
    }
    if (message.id !== undefined) {
      StringValue.encode({ value: message.id! }, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaRequest_FocusMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_FocusMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.next = NetworkAPIV1_APIV1MediaRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.previous = NetworkAPIV1_APIV1MediaRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.active = NetworkAPIV1_APIV1MediaRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.id = StringValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaRequest_FocusMessage {
    return {
      next: isSet(object.next) ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromJSON(object.next) : undefined,
      previous: isSet(object.previous)
        ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromJSON(object.previous)
        : undefined,
      active: isSet(object.active) ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromJSON(object.active) : undefined,
      id: isSet(object.id) ? String(object.id) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaRequest_FocusMessage): unknown {
    const obj: any = {};
    message.next !== undefined &&
      (obj.next = message.next ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.toJSON(message.next) : undefined);
    message.previous !== undefined && (obj.previous = message.previous
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.toJSON(message.previous)
      : undefined);
    message.active !== undefined &&
      (obj.active = message.active ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.toJSON(message.active) : undefined);
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_FocusMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaRequest_FocusMessage {
    return NetworkAPIV1_APIV1MediaRequest_FocusMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_FocusMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaRequest_FocusMessage {
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_FocusMessage();
    message.next = (object.next !== undefined && object.next !== null)
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromPartial(object.next)
      : undefined;
    message.previous = (object.previous !== undefined && object.previous !== null)
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromPartial(object.previous)
      : undefined;
    message.active = (object.active !== undefined && object.active !== null)
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromPartial(object.active)
      : undefined;
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaRequest_TriggerMessage(): NetworkAPIV1_APIV1MediaRequest_TriggerMessage {
  return {
    focused: undefined,
    active: undefined,
    playlistId: undefined,
    start: undefined,
    next: undefined,
    previous: undefined,
    mediaId: undefined,
  };
}

export const NetworkAPIV1_APIV1MediaRequest_TriggerMessage = {
  encode(message: NetworkAPIV1_APIV1MediaRequest_TriggerMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.focused !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_EmptyMessage.encode(message.focused, writer.uint32(10).fork()).ldelim();
    }
    if (message.active !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_EmptyMessage.encode(message.active, writer.uint32(18).fork()).ldelim();
    }
    if (message.playlistId !== undefined) {
      StringValue.encode({ value: message.playlistId! }, writer.uint32(26).fork()).ldelim();
    }
    if (message.start !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_EmptyMessage.encode(message.start, writer.uint32(34).fork()).ldelim();
    }
    if (message.next !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_EmptyMessage.encode(message.next, writer.uint32(42).fork()).ldelim();
    }
    if (message.previous !== undefined) {
      NetworkAPIV1_APIV1MediaRequest_EmptyMessage.encode(message.previous, writer.uint32(50).fork()).ldelim();
    }
    if (message.mediaId !== undefined) {
      StringValue.encode({ value: message.mediaId! }, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaRequest_TriggerMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_TriggerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.focused = NetworkAPIV1_APIV1MediaRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.active = NetworkAPIV1_APIV1MediaRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.playlistId = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.start = NetworkAPIV1_APIV1MediaRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.next = NetworkAPIV1_APIV1MediaRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.previous = NetworkAPIV1_APIV1MediaRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.mediaId = StringValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaRequest_TriggerMessage {
    return {
      focused: isSet(object.focused) ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromJSON(object.focused) : undefined,
      active: isSet(object.active) ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromJSON(object.active) : undefined,
      playlistId: isSet(object.playlistId) ? String(object.playlistId) : undefined,
      start: isSet(object.start) ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromJSON(object.start) : undefined,
      next: isSet(object.next) ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromJSON(object.next) : undefined,
      previous: isSet(object.previous)
        ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromJSON(object.previous)
        : undefined,
      mediaId: isSet(object.mediaId) ? String(object.mediaId) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaRequest_TriggerMessage): unknown {
    const obj: any = {};
    message.focused !== undefined &&
      (obj.focused = message.focused ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.toJSON(message.focused) : undefined);
    message.active !== undefined &&
      (obj.active = message.active ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.toJSON(message.active) : undefined);
    message.playlistId !== undefined && (obj.playlistId = message.playlistId);
    message.start !== undefined &&
      (obj.start = message.start ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.toJSON(message.start) : undefined);
    message.next !== undefined &&
      (obj.next = message.next ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.toJSON(message.next) : undefined);
    message.previous !== undefined && (obj.previous = message.previous
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.toJSON(message.previous)
      : undefined);
    message.mediaId !== undefined && (obj.mediaId = message.mediaId);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_TriggerMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaRequest_TriggerMessage {
    return NetworkAPIV1_APIV1MediaRequest_TriggerMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaRequest_TriggerMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaRequest_TriggerMessage {
    const message = createBaseNetworkAPIV1_APIV1MediaRequest_TriggerMessage();
    message.focused = (object.focused !== undefined && object.focused !== null)
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromPartial(object.focused)
      : undefined;
    message.active = (object.active !== undefined && object.active !== null)
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromPartial(object.active)
      : undefined;
    message.playlistId = object.playlistId ?? undefined;
    message.start = (object.start !== undefined && object.start !== null)
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromPartial(object.start)
      : undefined;
    message.next = (object.next !== undefined && object.next !== null)
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromPartial(object.next)
      : undefined;
    message.previous = (object.previous !== undefined && object.previous !== null)
      ? NetworkAPIV1_APIV1MediaRequest_EmptyMessage.fromPartial(object.previous)
      : undefined;
    message.mediaId = object.mediaId ?? undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageRequest(): NetworkAPIV1_APIV1MessageRequest {
  return {
    messages: undefined,
    createMessage: undefined,
    getMessage: undefined,
    putMessage: undefined,
    deleteMessage: undefined,
    triggerMessage: undefined,
    clearMessage: undefined,
  };
}

export const NetworkAPIV1_APIV1MessageRequest = {
  encode(message: NetworkAPIV1_APIV1MessageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.messages !== undefined) {
      NetworkAPIV1_APIV1MessageRequest_Messages.encode(message.messages, writer.uint32(10).fork()).ldelim();
    }
    if (message.createMessage !== undefined) {
      NetworkAPIV1_APIV1MessageRequest_CreateMessage.encode(message.createMessage, writer.uint32(18).fork()).ldelim();
    }
    if (message.getMessage !== undefined) {
      NetworkAPIV1_APIV1MessageRequest_GetMessage.encode(message.getMessage, writer.uint32(26).fork()).ldelim();
    }
    if (message.putMessage !== undefined) {
      NetworkAPIV1_APIV1MessageRequest_PutMessage.encode(message.putMessage, writer.uint32(34).fork()).ldelim();
    }
    if (message.deleteMessage !== undefined) {
      NetworkAPIV1_APIV1MessageRequest_DeleteMessage.encode(message.deleteMessage, writer.uint32(42).fork()).ldelim();
    }
    if (message.triggerMessage !== undefined) {
      NetworkAPIV1_APIV1MessageRequest_TriggerMessage.encode(message.triggerMessage, writer.uint32(50).fork()).ldelim();
    }
    if (message.clearMessage !== undefined) {
      NetworkAPIV1_APIV1MessageRequest_ClearMessage.encode(message.clearMessage, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.messages = NetworkAPIV1_APIV1MessageRequest_Messages.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.createMessage = NetworkAPIV1_APIV1MessageRequest_CreateMessage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getMessage = NetworkAPIV1_APIV1MessageRequest_GetMessage.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.putMessage = NetworkAPIV1_APIV1MessageRequest_PutMessage.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.deleteMessage = NetworkAPIV1_APIV1MessageRequest_DeleteMessage.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.triggerMessage = NetworkAPIV1_APIV1MessageRequest_TriggerMessage.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.clearMessage = NetworkAPIV1_APIV1MessageRequest_ClearMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageRequest {
    return {
      messages: isSet(object.messages)
        ? NetworkAPIV1_APIV1MessageRequest_Messages.fromJSON(object.messages)
        : undefined,
      createMessage: isSet(object.createMessage)
        ? NetworkAPIV1_APIV1MessageRequest_CreateMessage.fromJSON(object.createMessage)
        : undefined,
      getMessage: isSet(object.getMessage)
        ? NetworkAPIV1_APIV1MessageRequest_GetMessage.fromJSON(object.getMessage)
        : undefined,
      putMessage: isSet(object.putMessage)
        ? NetworkAPIV1_APIV1MessageRequest_PutMessage.fromJSON(object.putMessage)
        : undefined,
      deleteMessage: isSet(object.deleteMessage)
        ? NetworkAPIV1_APIV1MessageRequest_DeleteMessage.fromJSON(object.deleteMessage)
        : undefined,
      triggerMessage: isSet(object.triggerMessage)
        ? NetworkAPIV1_APIV1MessageRequest_TriggerMessage.fromJSON(object.triggerMessage)
        : undefined,
      clearMessage: isSet(object.clearMessage)
        ? NetworkAPIV1_APIV1MessageRequest_ClearMessage.fromJSON(object.clearMessage)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageRequest): unknown {
    const obj: any = {};
    message.messages !== undefined &&
      (obj.messages = message.messages
        ? NetworkAPIV1_APIV1MessageRequest_Messages.toJSON(message.messages)
        : undefined);
    message.createMessage !== undefined && (obj.createMessage = message.createMessage
      ? NetworkAPIV1_APIV1MessageRequest_CreateMessage.toJSON(message.createMessage)
      : undefined);
    message.getMessage !== undefined && (obj.getMessage = message.getMessage
      ? NetworkAPIV1_APIV1MessageRequest_GetMessage.toJSON(message.getMessage)
      : undefined);
    message.putMessage !== undefined && (obj.putMessage = message.putMessage
      ? NetworkAPIV1_APIV1MessageRequest_PutMessage.toJSON(message.putMessage)
      : undefined);
    message.deleteMessage !== undefined && (obj.deleteMessage = message.deleteMessage
      ? NetworkAPIV1_APIV1MessageRequest_DeleteMessage.toJSON(message.deleteMessage)
      : undefined);
    message.triggerMessage !== undefined && (obj.triggerMessage = message.triggerMessage
      ? NetworkAPIV1_APIV1MessageRequest_TriggerMessage.toJSON(message.triggerMessage)
      : undefined);
    message.clearMessage !== undefined && (obj.clearMessage = message.clearMessage
      ? NetworkAPIV1_APIV1MessageRequest_ClearMessage.toJSON(message.clearMessage)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageRequest {
    return NetworkAPIV1_APIV1MessageRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageRequest {
    const message = createBaseNetworkAPIV1_APIV1MessageRequest();
    message.messages = (object.messages !== undefined && object.messages !== null)
      ? NetworkAPIV1_APIV1MessageRequest_Messages.fromPartial(object.messages)
      : undefined;
    message.createMessage = (object.createMessage !== undefined && object.createMessage !== null)
      ? NetworkAPIV1_APIV1MessageRequest_CreateMessage.fromPartial(object.createMessage)
      : undefined;
    message.getMessage = (object.getMessage !== undefined && object.getMessage !== null)
      ? NetworkAPIV1_APIV1MessageRequest_GetMessage.fromPartial(object.getMessage)
      : undefined;
    message.putMessage = (object.putMessage !== undefined && object.putMessage !== null)
      ? NetworkAPIV1_APIV1MessageRequest_PutMessage.fromPartial(object.putMessage)
      : undefined;
    message.deleteMessage = (object.deleteMessage !== undefined && object.deleteMessage !== null)
      ? NetworkAPIV1_APIV1MessageRequest_DeleteMessage.fromPartial(object.deleteMessage)
      : undefined;
    message.triggerMessage = (object.triggerMessage !== undefined && object.triggerMessage !== null)
      ? NetworkAPIV1_APIV1MessageRequest_TriggerMessage.fromPartial(object.triggerMessage)
      : undefined;
    message.clearMessage = (object.clearMessage !== undefined && object.clearMessage !== null)
      ? NetworkAPIV1_APIV1MessageRequest_ClearMessage.fromPartial(object.clearMessage)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageRequest_Messages(): NetworkAPIV1_APIV1MessageRequest_Messages {
  return {};
}

export const NetworkAPIV1_APIV1MessageRequest_Messages = {
  encode(_: NetworkAPIV1_APIV1MessageRequest_Messages, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageRequest_Messages {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_Messages();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MessageRequest_Messages {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MessageRequest_Messages): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_Messages>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageRequest_Messages {
    return NetworkAPIV1_APIV1MessageRequest_Messages.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_Messages>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MessageRequest_Messages {
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_Messages();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageRequest_CreateMessage(): NetworkAPIV1_APIV1MessageRequest_CreateMessage {
  return { message: undefined };
}

export const NetworkAPIV1_APIV1MessageRequest_CreateMessage = {
  encode(
    message: NetworkAPIV1_APIV1MessageRequest_CreateMessage,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.message !== undefined) {
      APIV1Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageRequest_CreateMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_CreateMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.message = APIV1Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageRequest_CreateMessage {
    return { message: isSet(object.message) ? APIV1Message.fromJSON(object.message) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageRequest_CreateMessage): unknown {
    const obj: any = {};
    message.message !== undefined && (obj.message = message.message ? APIV1Message.toJSON(message.message) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_CreateMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageRequest_CreateMessage {
    return NetworkAPIV1_APIV1MessageRequest_CreateMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_CreateMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageRequest_CreateMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_CreateMessage();
    message.message = (object.message !== undefined && object.message !== null)
      ? APIV1Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageRequest_GetMessage(): NetworkAPIV1_APIV1MessageRequest_GetMessage {
  return { id: "" };
}

export const NetworkAPIV1_APIV1MessageRequest_GetMessage = {
  encode(message: NetworkAPIV1_APIV1MessageRequest_GetMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageRequest_GetMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_GetMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageRequest_GetMessage {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageRequest_GetMessage): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_GetMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageRequest_GetMessage {
    return NetworkAPIV1_APIV1MessageRequest_GetMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_GetMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageRequest_GetMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_GetMessage();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageRequest_PutMessage(): NetworkAPIV1_APIV1MessageRequest_PutMessage {
  return { id: "", message: undefined };
}

export const NetworkAPIV1_APIV1MessageRequest_PutMessage = {
  encode(message: NetworkAPIV1_APIV1MessageRequest_PutMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.message !== undefined) {
      APIV1Message.encode(message.message, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageRequest_PutMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_PutMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.message = APIV1Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageRequest_PutMessage {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      message: isSet(object.message) ? APIV1Message.fromJSON(object.message) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageRequest_PutMessage): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.message !== undefined && (obj.message = message.message ? APIV1Message.toJSON(message.message) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_PutMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageRequest_PutMessage {
    return NetworkAPIV1_APIV1MessageRequest_PutMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_PutMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageRequest_PutMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_PutMessage();
    message.id = object.id ?? "";
    message.message = (object.message !== undefined && object.message !== null)
      ? APIV1Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageRequest_DeleteMessage(): NetworkAPIV1_APIV1MessageRequest_DeleteMessage {
  return { id: "" };
}

export const NetworkAPIV1_APIV1MessageRequest_DeleteMessage = {
  encode(
    message: NetworkAPIV1_APIV1MessageRequest_DeleteMessage,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageRequest_DeleteMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_DeleteMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageRequest_DeleteMessage {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageRequest_DeleteMessage): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_DeleteMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageRequest_DeleteMessage {
    return NetworkAPIV1_APIV1MessageRequest_DeleteMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_DeleteMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageRequest_DeleteMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_DeleteMessage();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageRequest_TriggerMessage(): NetworkAPIV1_APIV1MessageRequest_TriggerMessage {
  return { id: "", tokens: [] };
}

export const NetworkAPIV1_APIV1MessageRequest_TriggerMessage = {
  encode(
    message: NetworkAPIV1_APIV1MessageRequest_TriggerMessage,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.tokens) {
      APIV1Message_APIV1MessageToken.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageRequest_TriggerMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_TriggerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.tokens.push(APIV1Message_APIV1MessageToken.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageRequest_TriggerMessage {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      tokens: Array.isArray(object?.tokens)
        ? object.tokens.map((e: any) => APIV1Message_APIV1MessageToken.fromJSON(e))
        : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageRequest_TriggerMessage): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    if (message.tokens) {
      obj.tokens = message.tokens.map((e) => e ? APIV1Message_APIV1MessageToken.toJSON(e) : undefined);
    } else {
      obj.tokens = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_TriggerMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageRequest_TriggerMessage {
    return NetworkAPIV1_APIV1MessageRequest_TriggerMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_TriggerMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageRequest_TriggerMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_TriggerMessage();
    message.id = object.id ?? "";
    message.tokens = object.tokens?.map((e) => APIV1Message_APIV1MessageToken.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageRequest_ClearMessage(): NetworkAPIV1_APIV1MessageRequest_ClearMessage {
  return { id: "" };
}

export const NetworkAPIV1_APIV1MessageRequest_ClearMessage = {
  encode(message: NetworkAPIV1_APIV1MessageRequest_ClearMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageRequest_ClearMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_ClearMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageRequest_ClearMessage {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageRequest_ClearMessage): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_ClearMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageRequest_ClearMessage {
    return NetworkAPIV1_APIV1MessageRequest_ClearMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageRequest_ClearMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageRequest_ClearMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageRequest_ClearMessage();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MiscellaneousRequest(): NetworkAPIV1_APIV1MiscellaneousRequest {
  return { findMyMouse: undefined };
}

export const NetworkAPIV1_APIV1MiscellaneousRequest = {
  encode(message: NetworkAPIV1_APIV1MiscellaneousRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.findMyMouse !== undefined) {
      NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse.encode(message.findMyMouse, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MiscellaneousRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MiscellaneousRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.findMyMouse = NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MiscellaneousRequest {
    return {
      findMyMouse: isSet(object.findMyMouse)
        ? NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse.fromJSON(object.findMyMouse)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MiscellaneousRequest): unknown {
    const obj: any = {};
    message.findMyMouse !== undefined && (obj.findMyMouse = message.findMyMouse
      ? NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse.toJSON(message.findMyMouse)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MiscellaneousRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MiscellaneousRequest {
    return NetworkAPIV1_APIV1MiscellaneousRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MiscellaneousRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MiscellaneousRequest {
    const message = createBaseNetworkAPIV1_APIV1MiscellaneousRequest();
    message.findMyMouse = (object.findMyMouse !== undefined && object.findMyMouse !== null)
      ? NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse.fromPartial(object.findMyMouse)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse(): NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse {
  return {};
}

export const NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse = {
  encode(_: NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse {
    return NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse {
    const message = createBaseNetworkAPIV1_APIV1MiscellaneousRequest_FindMyMouse();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistRequest(): NetworkAPIV1_APIV1PlaylistRequest {
  return {
    playlists: undefined,
    createPlaylist: undefined,
    getPlaylist: undefined,
    putPlaylist: undefined,
    postPlaylist: undefined,
    getActivePlaylist: undefined,
    focused: undefined,
    nextFocus: undefined,
    previousFocus: undefined,
    activePresentationFocus: undefined,
    activeAnnouncementFocus: undefined,
    focusedTrigger: undefined,
    activePresentationTrigger: undefined,
    activeAnnouncementTrigger: undefined,
    focusedNextTrigger: undefined,
    focusedPreviousTrigger: undefined,
    activePresentationNextTrigger: undefined,
    activeAnnouncementNextTrigger: undefined,
    activePresentationPreviousTrigger: undefined,
    activeAnnouncementPreviousTrigger: undefined,
    idFocus: undefined,
    idTrigger: undefined,
    idNextTrigger: undefined,
    idPreviousTrigger: undefined,
    focusedIndexTrigger: undefined,
    activePresentationIndexTrigger: undefined,
    activeAnnouncementIndexTrigger: undefined,
    idUpdates: undefined,
  };
}

export const NetworkAPIV1_APIV1PlaylistRequest = {
  encode(message: NetworkAPIV1_APIV1PlaylistRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playlists !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_Playlists.encode(message.playlists, writer.uint32(10).fork()).ldelim();
    }
    if (message.createPlaylist !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist.encode(message.createPlaylist, writer.uint32(18).fork())
        .ldelim();
    }
    if (message.getPlaylist !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist.encode(message.getPlaylist, writer.uint32(26).fork()).ldelim();
    }
    if (message.putPlaylist !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist.encode(message.putPlaylist, writer.uint32(34).fork()).ldelim();
    }
    if (message.postPlaylist !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist.encode(message.postPlaylist, writer.uint32(42).fork()).ldelim();
    }
    if (message.getActivePlaylist !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist.encode(message.getActivePlaylist, writer.uint32(50).fork())
        .ldelim();
    }
    if (message.focused !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist.encode(message.focused, writer.uint32(58).fork()).ldelim();
    }
    if (message.nextFocus !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(message.nextFocus, writer.uint32(66).fork()).ldelim();
    }
    if (message.previousFocus !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(message.previousFocus, writer.uint32(74).fork()).ldelim();
    }
    if (message.activePresentationFocus !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(message.activePresentationFocus, writer.uint32(82).fork())
        .ldelim();
    }
    if (message.activeAnnouncementFocus !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(message.activeAnnouncementFocus, writer.uint32(90).fork())
        .ldelim();
    }
    if (message.focusedTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(message.focusedTrigger, writer.uint32(98).fork()).ldelim();
    }
    if (message.activePresentationTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(
        message.activePresentationTrigger,
        writer.uint32(106).fork(),
      ).ldelim();
    }
    if (message.activeAnnouncementTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(
        message.activeAnnouncementTrigger,
        writer.uint32(114).fork(),
      ).ldelim();
    }
    if (message.focusedNextTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(message.focusedNextTrigger, writer.uint32(122).fork())
        .ldelim();
    }
    if (message.focusedPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(message.focusedPreviousTrigger, writer.uint32(130).fork())
        .ldelim();
    }
    if (message.activePresentationNextTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(
        message.activePresentationNextTrigger,
        writer.uint32(138).fork(),
      ).ldelim();
    }
    if (message.activeAnnouncementNextTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(
        message.activeAnnouncementNextTrigger,
        writer.uint32(146).fork(),
      ).ldelim();
    }
    if (message.activePresentationPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(
        message.activePresentationPreviousTrigger,
        writer.uint32(154).fork(),
      ).ldelim();
    }
    if (message.activeAnnouncementPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.encode(
        message.activeAnnouncementPreviousTrigger,
        writer.uint32(162).fork(),
      ).ldelim();
    }
    if (message.idFocus !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_IdMessage.encode(message.idFocus, writer.uint32(170).fork()).ldelim();
    }
    if (message.idTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_IdMessage.encode(message.idTrigger, writer.uint32(178).fork()).ldelim();
    }
    if (message.idNextTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_IdMessage.encode(message.idNextTrigger, writer.uint32(186).fork()).ldelim();
    }
    if (message.idPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_IdMessage.encode(message.idPreviousTrigger, writer.uint32(194).fork()).ldelim();
    }
    if (message.focusedIndexTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.encode(message.focusedIndexTrigger, writer.uint32(202).fork())
        .ldelim();
    }
    if (message.activePresentationIndexTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.encode(
        message.activePresentationIndexTrigger,
        writer.uint32(210).fork(),
      ).ldelim();
    }
    if (message.activeAnnouncementIndexTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.encode(
        message.activeAnnouncementIndexTrigger,
        writer.uint32(218).fork(),
      ).ldelim();
    }
    if (message.idUpdates !== undefined) {
      NetworkAPIV1_APIV1PlaylistRequest_IdMessage.encode(message.idUpdates, writer.uint32(226).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlists = NetworkAPIV1_APIV1PlaylistRequest_Playlists.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.createPlaylist = NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getPlaylist = NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.putPlaylist = NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.postPlaylist = NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getActivePlaylist = NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.focused = NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.nextFocus = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.previousFocus = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.activePresentationFocus = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.activeAnnouncementFocus = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.focusedTrigger = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 106) {
            break;
          }

          message.activePresentationTrigger = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 14:
          if (tag != 114) {
            break;
          }

          message.activeAnnouncementTrigger = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 15:
          if (tag != 122) {
            break;
          }

          message.focusedNextTrigger = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag != 130) {
            break;
          }

          message.focusedPreviousTrigger = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 17:
          if (tag != 138) {
            break;
          }

          message.activePresentationNextTrigger = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 18:
          if (tag != 146) {
            break;
          }

          message.activeAnnouncementNextTrigger = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 19:
          if (tag != 154) {
            break;
          }

          message.activePresentationPreviousTrigger = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 20:
          if (tag != 162) {
            break;
          }

          message.activeAnnouncementPreviousTrigger = NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 21:
          if (tag != 170) {
            break;
          }

          message.idFocus = NetworkAPIV1_APIV1PlaylistRequest_IdMessage.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag != 178) {
            break;
          }

          message.idTrigger = NetworkAPIV1_APIV1PlaylistRequest_IdMessage.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag != 186) {
            break;
          }

          message.idNextTrigger = NetworkAPIV1_APIV1PlaylistRequest_IdMessage.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag != 194) {
            break;
          }

          message.idPreviousTrigger = NetworkAPIV1_APIV1PlaylistRequest_IdMessage.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag != 202) {
            break;
          }

          message.focusedIndexTrigger = NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag != 210) {
            break;
          }

          message.activePresentationIndexTrigger = NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 27:
          if (tag != 218) {
            break;
          }

          message.activeAnnouncementIndexTrigger = NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 28:
          if (tag != 226) {
            break;
          }

          message.idUpdates = NetworkAPIV1_APIV1PlaylistRequest_IdMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistRequest {
    return {
      playlists: isSet(object.playlists)
        ? NetworkAPIV1_APIV1PlaylistRequest_Playlists.fromJSON(object.playlists)
        : undefined,
      createPlaylist: isSet(object.createPlaylist)
        ? NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist.fromJSON(object.createPlaylist)
        : undefined,
      getPlaylist: isSet(object.getPlaylist)
        ? NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist.fromJSON(object.getPlaylist)
        : undefined,
      putPlaylist: isSet(object.putPlaylist)
        ? NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist.fromJSON(object.putPlaylist)
        : undefined,
      postPlaylist: isSet(object.postPlaylist)
        ? NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist.fromJSON(object.postPlaylist)
        : undefined,
      getActivePlaylist: isSet(object.getActivePlaylist)
        ? NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist.fromJSON(object.getActivePlaylist)
        : undefined,
      focused: isSet(object.focused)
        ? NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist.fromJSON(object.focused)
        : undefined,
      nextFocus: isSet(object.nextFocus)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.nextFocus)
        : undefined,
      previousFocus: isSet(object.previousFocus)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.previousFocus)
        : undefined,
      activePresentationFocus: isSet(object.activePresentationFocus)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.activePresentationFocus)
        : undefined,
      activeAnnouncementFocus: isSet(object.activeAnnouncementFocus)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.activeAnnouncementFocus)
        : undefined,
      focusedTrigger: isSet(object.focusedTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.focusedTrigger)
        : undefined,
      activePresentationTrigger: isSet(object.activePresentationTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.activePresentationTrigger)
        : undefined,
      activeAnnouncementTrigger: isSet(object.activeAnnouncementTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.activeAnnouncementTrigger)
        : undefined,
      focusedNextTrigger: isSet(object.focusedNextTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.focusedNextTrigger)
        : undefined,
      focusedPreviousTrigger: isSet(object.focusedPreviousTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.focusedPreviousTrigger)
        : undefined,
      activePresentationNextTrigger: isSet(object.activePresentationNextTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.activePresentationNextTrigger)
        : undefined,
      activeAnnouncementNextTrigger: isSet(object.activeAnnouncementNextTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.activeAnnouncementNextTrigger)
        : undefined,
      activePresentationPreviousTrigger: isSet(object.activePresentationPreviousTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.activePresentationPreviousTrigger)
        : undefined,
      activeAnnouncementPreviousTrigger: isSet(object.activeAnnouncementPreviousTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromJSON(object.activeAnnouncementPreviousTrigger)
        : undefined,
      idFocus: isSet(object.idFocus) ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.fromJSON(object.idFocus) : undefined,
      idTrigger: isSet(object.idTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.fromJSON(object.idTrigger)
        : undefined,
      idNextTrigger: isSet(object.idNextTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.fromJSON(object.idNextTrigger)
        : undefined,
      idPreviousTrigger: isSet(object.idPreviousTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.fromJSON(object.idPreviousTrigger)
        : undefined,
      focusedIndexTrigger: isSet(object.focusedIndexTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.fromJSON(object.focusedIndexTrigger)
        : undefined,
      activePresentationIndexTrigger: isSet(object.activePresentationIndexTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.fromJSON(object.activePresentationIndexTrigger)
        : undefined,
      activeAnnouncementIndexTrigger: isSet(object.activeAnnouncementIndexTrigger)
        ? NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.fromJSON(object.activeAnnouncementIndexTrigger)
        : undefined,
      idUpdates: isSet(object.idUpdates)
        ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.fromJSON(object.idUpdates)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistRequest): unknown {
    const obj: any = {};
    message.playlists !== undefined && (obj.playlists = message.playlists
      ? NetworkAPIV1_APIV1PlaylistRequest_Playlists.toJSON(message.playlists)
      : undefined);
    message.createPlaylist !== undefined && (obj.createPlaylist = message.createPlaylist
      ? NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist.toJSON(message.createPlaylist)
      : undefined);
    message.getPlaylist !== undefined && (obj.getPlaylist = message.getPlaylist
      ? NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist.toJSON(message.getPlaylist)
      : undefined);
    message.putPlaylist !== undefined && (obj.putPlaylist = message.putPlaylist
      ? NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist.toJSON(message.putPlaylist)
      : undefined);
    message.postPlaylist !== undefined && (obj.postPlaylist = message.postPlaylist
      ? NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist.toJSON(message.postPlaylist)
      : undefined);
    message.getActivePlaylist !== undefined && (obj.getActivePlaylist = message.getActivePlaylist
      ? NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist.toJSON(message.getActivePlaylist)
      : undefined);
    message.focused !== undefined && (obj.focused = message.focused
      ? NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist.toJSON(message.focused)
      : undefined);
    message.nextFocus !== undefined && (obj.nextFocus = message.nextFocus
      ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.nextFocus)
      : undefined);
    message.previousFocus !== undefined && (obj.previousFocus = message.previousFocus
      ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.previousFocus)
      : undefined);
    message.activePresentationFocus !== undefined && (obj.activePresentationFocus = message.activePresentationFocus
      ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.activePresentationFocus)
      : undefined);
    message.activeAnnouncementFocus !== undefined && (obj.activeAnnouncementFocus = message.activeAnnouncementFocus
      ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.activeAnnouncementFocus)
      : undefined);
    message.focusedTrigger !== undefined && (obj.focusedTrigger = message.focusedTrigger
      ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.focusedTrigger)
      : undefined);
    message.activePresentationTrigger !== undefined &&
      (obj.activePresentationTrigger = message.activePresentationTrigger
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.activePresentationTrigger)
        : undefined);
    message.activeAnnouncementTrigger !== undefined &&
      (obj.activeAnnouncementTrigger = message.activeAnnouncementTrigger
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.activeAnnouncementTrigger)
        : undefined);
    message.focusedNextTrigger !== undefined && (obj.focusedNextTrigger = message.focusedNextTrigger
      ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.focusedNextTrigger)
      : undefined);
    message.focusedPreviousTrigger !== undefined && (obj.focusedPreviousTrigger = message.focusedPreviousTrigger
      ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.focusedPreviousTrigger)
      : undefined);
    message.activePresentationNextTrigger !== undefined &&
      (obj.activePresentationNextTrigger = message.activePresentationNextTrigger
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.activePresentationNextTrigger)
        : undefined);
    message.activeAnnouncementNextTrigger !== undefined &&
      (obj.activeAnnouncementNextTrigger = message.activeAnnouncementNextTrigger
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.activeAnnouncementNextTrigger)
        : undefined);
    message.activePresentationPreviousTrigger !== undefined &&
      (obj.activePresentationPreviousTrigger = message.activePresentationPreviousTrigger
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.activePresentationPreviousTrigger)
        : undefined);
    message.activeAnnouncementPreviousTrigger !== undefined &&
      (obj.activeAnnouncementPreviousTrigger = message.activeAnnouncementPreviousTrigger
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.toJSON(message.activeAnnouncementPreviousTrigger)
        : undefined);
    message.idFocus !== undefined &&
      (obj.idFocus = message.idFocus ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.toJSON(message.idFocus) : undefined);
    message.idTrigger !== undefined && (obj.idTrigger = message.idTrigger
      ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.toJSON(message.idTrigger)
      : undefined);
    message.idNextTrigger !== undefined && (obj.idNextTrigger = message.idNextTrigger
      ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.toJSON(message.idNextTrigger)
      : undefined);
    message.idPreviousTrigger !== undefined && (obj.idPreviousTrigger = message.idPreviousTrigger
      ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.toJSON(message.idPreviousTrigger)
      : undefined);
    message.focusedIndexTrigger !== undefined && (obj.focusedIndexTrigger = message.focusedIndexTrigger
      ? NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.toJSON(message.focusedIndexTrigger)
      : undefined);
    message.activePresentationIndexTrigger !== undefined &&
      (obj.activePresentationIndexTrigger = message.activePresentationIndexTrigger
        ? NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.toJSON(message.activePresentationIndexTrigger)
        : undefined);
    message.activeAnnouncementIndexTrigger !== undefined &&
      (obj.activeAnnouncementIndexTrigger = message.activeAnnouncementIndexTrigger
        ? NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.toJSON(message.activeAnnouncementIndexTrigger)
        : undefined);
    message.idUpdates !== undefined && (obj.idUpdates = message.idUpdates
      ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.toJSON(message.idUpdates)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistRequest {
    return NetworkAPIV1_APIV1PlaylistRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistRequest {
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest();
    message.playlists = (object.playlists !== undefined && object.playlists !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_Playlists.fromPartial(object.playlists)
      : undefined;
    message.createPlaylist = (object.createPlaylist !== undefined && object.createPlaylist !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist.fromPartial(object.createPlaylist)
      : undefined;
    message.getPlaylist = (object.getPlaylist !== undefined && object.getPlaylist !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist.fromPartial(object.getPlaylist)
      : undefined;
    message.putPlaylist = (object.putPlaylist !== undefined && object.putPlaylist !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist.fromPartial(object.putPlaylist)
      : undefined;
    message.postPlaylist = (object.postPlaylist !== undefined && object.postPlaylist !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist.fromPartial(object.postPlaylist)
      : undefined;
    message.getActivePlaylist = (object.getActivePlaylist !== undefined && object.getActivePlaylist !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist.fromPartial(object.getActivePlaylist)
      : undefined;
    message.focused = (object.focused !== undefined && object.focused !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist.fromPartial(object.focused)
      : undefined;
    message.nextFocus = (object.nextFocus !== undefined && object.nextFocus !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.nextFocus)
      : undefined;
    message.previousFocus = (object.previousFocus !== undefined && object.previousFocus !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.previousFocus)
      : undefined;
    message.activePresentationFocus =
      (object.activePresentationFocus !== undefined && object.activePresentationFocus !== null)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.activePresentationFocus)
        : undefined;
    message.activeAnnouncementFocus =
      (object.activeAnnouncementFocus !== undefined && object.activeAnnouncementFocus !== null)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.activeAnnouncementFocus)
        : undefined;
    message.focusedTrigger = (object.focusedTrigger !== undefined && object.focusedTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.focusedTrigger)
      : undefined;
    message.activePresentationTrigger =
      (object.activePresentationTrigger !== undefined && object.activePresentationTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.activePresentationTrigger)
        : undefined;
    message.activeAnnouncementTrigger =
      (object.activeAnnouncementTrigger !== undefined && object.activeAnnouncementTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.activeAnnouncementTrigger)
        : undefined;
    message.focusedNextTrigger = (object.focusedNextTrigger !== undefined && object.focusedNextTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.focusedNextTrigger)
      : undefined;
    message.focusedPreviousTrigger =
      (object.focusedPreviousTrigger !== undefined && object.focusedPreviousTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.focusedPreviousTrigger)
        : undefined;
    message.activePresentationNextTrigger =
      (object.activePresentationNextTrigger !== undefined && object.activePresentationNextTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.activePresentationNextTrigger)
        : undefined;
    message.activeAnnouncementNextTrigger =
      (object.activeAnnouncementNextTrigger !== undefined && object.activeAnnouncementNextTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.activeAnnouncementNextTrigger)
        : undefined;
    message.activePresentationPreviousTrigger =
      (object.activePresentationPreviousTrigger !== undefined && object.activePresentationPreviousTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.activePresentationPreviousTrigger)
        : undefined;
    message.activeAnnouncementPreviousTrigger =
      (object.activeAnnouncementPreviousTrigger !== undefined && object.activeAnnouncementPreviousTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(object.activeAnnouncementPreviousTrigger)
        : undefined;
    message.idFocus = (object.idFocus !== undefined && object.idFocus !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.fromPartial(object.idFocus)
      : undefined;
    message.idTrigger = (object.idTrigger !== undefined && object.idTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.fromPartial(object.idTrigger)
      : undefined;
    message.idNextTrigger = (object.idNextTrigger !== undefined && object.idNextTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.fromPartial(object.idNextTrigger)
      : undefined;
    message.idPreviousTrigger = (object.idPreviousTrigger !== undefined && object.idPreviousTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.fromPartial(object.idPreviousTrigger)
      : undefined;
    message.focusedIndexTrigger = (object.focusedIndexTrigger !== undefined && object.focusedIndexTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.fromPartial(object.focusedIndexTrigger)
      : undefined;
    message.activePresentationIndexTrigger =
      (object.activePresentationIndexTrigger !== undefined && object.activePresentationIndexTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.fromPartial(object.activePresentationIndexTrigger)
        : undefined;
    message.activeAnnouncementIndexTrigger =
      (object.activeAnnouncementIndexTrigger !== undefined && object.activeAnnouncementIndexTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.fromPartial(object.activeAnnouncementIndexTrigger)
        : undefined;
    message.idUpdates = (object.idUpdates !== undefined && object.idUpdates !== null)
      ? NetworkAPIV1_APIV1PlaylistRequest_IdMessage.fromPartial(object.idUpdates)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistRequest_Playlists(): NetworkAPIV1_APIV1PlaylistRequest_Playlists {
  return {};
}

export const NetworkAPIV1_APIV1PlaylistRequest_Playlists = {
  encode(_: NetworkAPIV1_APIV1PlaylistRequest_Playlists, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistRequest_Playlists {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_Playlists();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PlaylistRequest_Playlists {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PlaylistRequest_Playlists): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_Playlists>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_Playlists {
    return NetworkAPIV1_APIV1PlaylistRequest_Playlists.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_Playlists>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_Playlists {
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_Playlists();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist(): NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist {
  return { name: "", type: 0 };
}

export const NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist = {
  encode(
    message: NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      type: isSet(object.type)
        ? networkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistTypeFromJSON(object.type)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.type !== undefined &&
      (obj.type = networkAPIV1_APIV1PlaylistRequest_CreatePlaylist_APIV1PlaylistTypeToJSON(message.type));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist {
    return NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist {
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_CreatePlaylist();
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist(): NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist {
  return {};
}

export const NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist = {
  encode(_: NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist {
    return NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist {
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_GetActivePlaylist();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistRequest_GetPlaylist(): NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist {
  return { id: "" };
}

export const NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist = {
  encode(message: NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_GetPlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist {
    return NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_GetPlaylist {
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_GetPlaylist();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistRequest_PutPlaylist(): NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist {
  return { id: "", items: [] };
}

export const NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist = {
  encode(message: NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.items) {
      APIV1PlaylistItem.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_PutPlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.items.push(APIV1PlaylistItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      items: Array.isArray(object?.items) ? object.items.map((e: any) => APIV1PlaylistItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    if (message.items) {
      obj.items = message.items.map((e) => e ? APIV1PlaylistItem.toJSON(e) : undefined);
    } else {
      obj.items = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist {
    return NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_PutPlaylist {
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_PutPlaylist();
    message.id = object.id ?? "";
    message.items = object.items?.map((e) => APIV1PlaylistItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistRequest_PostPlaylist(): NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist {
  return { id: "", name: "", type: 0 };
}

export const NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist = {
  encode(
    message: NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_PostPlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      type: isSet(object.type)
        ? networkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistTypeFromJSON(object.type)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.name !== undefined && (obj.name = message.name);
    message.type !== undefined &&
      (obj.type = networkAPIV1_APIV1PlaylistRequest_PostPlaylist_APIV1PlaylistTypeToJSON(message.type));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist {
    return NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_PostPlaylist {
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_PostPlaylist();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistRequest_EmptyMessage(): NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage {
  return {};
}

export const NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage = {
  encode(_: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_EmptyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage {
    return NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_EmptyMessage {
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_EmptyMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistRequest_IdMessage(): NetworkAPIV1_APIV1PlaylistRequest_IdMessage {
  return { id: "" };
}

export const NetworkAPIV1_APIV1PlaylistRequest_IdMessage = {
  encode(message: NetworkAPIV1_APIV1PlaylistRequest_IdMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistRequest_IdMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_IdMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistRequest_IdMessage {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistRequest_IdMessage): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_IdMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_IdMessage {
    return NetworkAPIV1_APIV1PlaylistRequest_IdMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_IdMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_IdMessage {
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_IdMessage();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistRequest_IndexMessage(): NetworkAPIV1_APIV1PlaylistRequest_IndexMessage {
  return { index: 0 };
}

export const NetworkAPIV1_APIV1PlaylistRequest_IndexMessage = {
  encode(
    message: NetworkAPIV1_APIV1PlaylistRequest_IndexMessage,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.index !== 0) {
      writer.uint32(8).uint32(message.index);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistRequest_IndexMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_IndexMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.index = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistRequest_IndexMessage {
    return { index: isSet(object.index) ? Number(object.index) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistRequest_IndexMessage): unknown {
    const obj: any = {};
    message.index !== undefined && (obj.index = Math.round(message.index));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_IndexMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_IndexMessage {
    return NetworkAPIV1_APIV1PlaylistRequest_IndexMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistRequest_IndexMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistRequest_IndexMessage {
    const message = createBaseNetworkAPIV1_APIV1PlaylistRequest_IndexMessage();
    message.index = object.index ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollRequest(): NetworkAPIV1_APIV1PrerollRequest {
  return {
    prerollCue: undefined,
    prerollPlaylistItem: undefined,
    prerollMediaItem: undefined,
    prerollAudioItem: undefined,
    prerollVideoInput: undefined,
    prerollLibraryItem: undefined,
    prerollNext: undefined,
    prerollPrevious: undefined,
    activatePrerollItem: undefined,
    cancelPrerollItem: undefined,
  };
}

export const NetworkAPIV1_APIV1PrerollRequest = {
  encode(message: NetworkAPIV1_APIV1PrerollRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.prerollCue !== undefined) {
      NetworkAPIV1_APIV1PrerollRequest_PrerollCue.encode(message.prerollCue, writer.uint32(10).fork()).ldelim();
    }
    if (message.prerollPlaylistItem !== undefined) {
      NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem.encode(message.prerollPlaylistItem, writer.uint32(18).fork())
        .ldelim();
    }
    if (message.prerollMediaItem !== undefined) {
      NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem.encode(message.prerollMediaItem, writer.uint32(26).fork())
        .ldelim();
    }
    if (message.prerollAudioItem !== undefined) {
      NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem.encode(message.prerollAudioItem, writer.uint32(34).fork())
        .ldelim();
    }
    if (message.prerollVideoInput !== undefined) {
      NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput.encode(message.prerollVideoInput, writer.uint32(42).fork())
        .ldelim();
    }
    if (message.prerollLibraryItem !== undefined) {
      NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem.encode(message.prerollLibraryItem, writer.uint32(50).fork())
        .ldelim();
    }
    if (message.prerollNext !== undefined) {
      NetworkAPIV1_APIV1PrerollRequest_PrerollNext.encode(message.prerollNext, writer.uint32(58).fork()).ldelim();
    }
    if (message.prerollPrevious !== undefined) {
      NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious.encode(message.prerollPrevious, writer.uint32(66).fork())
        .ldelim();
    }
    if (message.activatePrerollItem !== undefined) {
      NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem.encode(message.activatePrerollItem, writer.uint32(74).fork())
        .ldelim();
    }
    if (message.cancelPrerollItem !== undefined) {
      NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem.encode(message.cancelPrerollItem, writer.uint32(82).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.prerollCue = NetworkAPIV1_APIV1PrerollRequest_PrerollCue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.prerollPlaylistItem = NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.prerollMediaItem = NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.prerollAudioItem = NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.prerollVideoInput = NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.prerollLibraryItem = NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.prerollNext = NetworkAPIV1_APIV1PrerollRequest_PrerollNext.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.prerollPrevious = NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.activatePrerollItem = NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.cancelPrerollItem = NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollRequest {
    return {
      prerollCue: isSet(object.prerollCue)
        ? NetworkAPIV1_APIV1PrerollRequest_PrerollCue.fromJSON(object.prerollCue)
        : undefined,
      prerollPlaylistItem: isSet(object.prerollPlaylistItem)
        ? NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem.fromJSON(object.prerollPlaylistItem)
        : undefined,
      prerollMediaItem: isSet(object.prerollMediaItem)
        ? NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem.fromJSON(object.prerollMediaItem)
        : undefined,
      prerollAudioItem: isSet(object.prerollAudioItem)
        ? NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem.fromJSON(object.prerollAudioItem)
        : undefined,
      prerollVideoInput: isSet(object.prerollVideoInput)
        ? NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput.fromJSON(object.prerollVideoInput)
        : undefined,
      prerollLibraryItem: isSet(object.prerollLibraryItem)
        ? NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem.fromJSON(object.prerollLibraryItem)
        : undefined,
      prerollNext: isSet(object.prerollNext)
        ? NetworkAPIV1_APIV1PrerollRequest_PrerollNext.fromJSON(object.prerollNext)
        : undefined,
      prerollPrevious: isSet(object.prerollPrevious)
        ? NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious.fromJSON(object.prerollPrevious)
        : undefined,
      activatePrerollItem: isSet(object.activatePrerollItem)
        ? NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem.fromJSON(object.activatePrerollItem)
        : undefined,
      cancelPrerollItem: isSet(object.cancelPrerollItem)
        ? NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem.fromJSON(object.cancelPrerollItem)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollRequest): unknown {
    const obj: any = {};
    message.prerollCue !== undefined && (obj.prerollCue = message.prerollCue
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollCue.toJSON(message.prerollCue)
      : undefined);
    message.prerollPlaylistItem !== undefined && (obj.prerollPlaylistItem = message.prerollPlaylistItem
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem.toJSON(message.prerollPlaylistItem)
      : undefined);
    message.prerollMediaItem !== undefined && (obj.prerollMediaItem = message.prerollMediaItem
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem.toJSON(message.prerollMediaItem)
      : undefined);
    message.prerollAudioItem !== undefined && (obj.prerollAudioItem = message.prerollAudioItem
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem.toJSON(message.prerollAudioItem)
      : undefined);
    message.prerollVideoInput !== undefined && (obj.prerollVideoInput = message.prerollVideoInput
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput.toJSON(message.prerollVideoInput)
      : undefined);
    message.prerollLibraryItem !== undefined && (obj.prerollLibraryItem = message.prerollLibraryItem
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem.toJSON(message.prerollLibraryItem)
      : undefined);
    message.prerollNext !== undefined && (obj.prerollNext = message.prerollNext
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollNext.toJSON(message.prerollNext)
      : undefined);
    message.prerollPrevious !== undefined && (obj.prerollPrevious = message.prerollPrevious
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious.toJSON(message.prerollPrevious)
      : undefined);
    message.activatePrerollItem !== undefined && (obj.activatePrerollItem = message.activatePrerollItem
      ? NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem.toJSON(message.activatePrerollItem)
      : undefined);
    message.cancelPrerollItem !== undefined && (obj.cancelPrerollItem = message.cancelPrerollItem
      ? NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem.toJSON(message.cancelPrerollItem)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollRequest {
    return NetworkAPIV1_APIV1PrerollRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollRequest {
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest();
    message.prerollCue = (object.prerollCue !== undefined && object.prerollCue !== null)
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollCue.fromPartial(object.prerollCue)
      : undefined;
    message.prerollPlaylistItem = (object.prerollPlaylistItem !== undefined && object.prerollPlaylistItem !== null)
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem.fromPartial(object.prerollPlaylistItem)
      : undefined;
    message.prerollMediaItem = (object.prerollMediaItem !== undefined && object.prerollMediaItem !== null)
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem.fromPartial(object.prerollMediaItem)
      : undefined;
    message.prerollAudioItem = (object.prerollAudioItem !== undefined && object.prerollAudioItem !== null)
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem.fromPartial(object.prerollAudioItem)
      : undefined;
    message.prerollVideoInput = (object.prerollVideoInput !== undefined && object.prerollVideoInput !== null)
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput.fromPartial(object.prerollVideoInput)
      : undefined;
    message.prerollLibraryItem = (object.prerollLibraryItem !== undefined && object.prerollLibraryItem !== null)
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem.fromPartial(object.prerollLibraryItem)
      : undefined;
    message.prerollNext = (object.prerollNext !== undefined && object.prerollNext !== null)
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollNext.fromPartial(object.prerollNext)
      : undefined;
    message.prerollPrevious = (object.prerollPrevious !== undefined && object.prerollPrevious !== null)
      ? NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious.fromPartial(object.prerollPrevious)
      : undefined;
    message.activatePrerollItem = (object.activatePrerollItem !== undefined && object.activatePrerollItem !== null)
      ? NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem.fromPartial(object.activatePrerollItem)
      : undefined;
    message.cancelPrerollItem = (object.cancelPrerollItem !== undefined && object.cancelPrerollItem !== null)
      ? NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem.fromPartial(object.cancelPrerollItem)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollCue(): NetworkAPIV1_APIV1PrerollRequest_PrerollCue {
  return { index: 0, prerollId: 0 };
}

export const NetworkAPIV1_APIV1PrerollRequest_PrerollCue = {
  encode(message: NetworkAPIV1_APIV1PrerollRequest_PrerollCue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.index !== 0) {
      writer.uint32(8).int32(message.index);
    }
    if (message.prerollId !== 0) {
      writer.uint32(16).uint64(message.prerollId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollRequest_PrerollCue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollCue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.index = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.prerollId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollRequest_PrerollCue {
    return {
      index: isSet(object.index) ? Number(object.index) : 0,
      prerollId: isSet(object.prerollId) ? Number(object.prerollId) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollRequest_PrerollCue): unknown {
    const obj: any = {};
    message.index !== undefined && (obj.index = Math.round(message.index));
    message.prerollId !== undefined && (obj.prerollId = Math.round(message.prerollId));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollCue>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollCue {
    return NetworkAPIV1_APIV1PrerollRequest_PrerollCue.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollCue>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollCue {
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollCue();
    message.index = object.index ?? 0;
    message.prerollId = object.prerollId ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem(): NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem {
  return { path: [], prerollId: 0 };
}

export const NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem = {
  encode(
    message: NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.path) {
      APIV1Identifier.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.prerollId !== 0) {
      writer.uint32(16).uint64(message.prerollId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.path.push(APIV1Identifier.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.prerollId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem {
    return {
      path: Array.isArray(object?.path) ? object.path.map((e: any) => APIV1Identifier.fromJSON(e)) : [],
      prerollId: isSet(object.prerollId) ? Number(object.prerollId) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem): unknown {
    const obj: any = {};
    if (message.path) {
      obj.path = message.path.map((e) => e ? APIV1Identifier.toJSON(e) : undefined);
    } else {
      obj.path = [];
    }
    message.prerollId !== undefined && (obj.prerollId = Math.round(message.prerollId));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem {
    return NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem {
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollPlaylistItem();
    message.path = object.path?.map((e) => APIV1Identifier.fromPartial(e)) || [];
    message.prerollId = object.prerollId ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem(): NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem {
  return { path: [], prerollId: 0 };
}

export const NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem = {
  encode(
    message: NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.path) {
      APIV1Identifier.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.prerollId !== 0) {
      writer.uint32(16).uint64(message.prerollId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.path.push(APIV1Identifier.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.prerollId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem {
    return {
      path: Array.isArray(object?.path) ? object.path.map((e: any) => APIV1Identifier.fromJSON(e)) : [],
      prerollId: isSet(object.prerollId) ? Number(object.prerollId) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem): unknown {
    const obj: any = {};
    if (message.path) {
      obj.path = message.path.map((e) => e ? APIV1Identifier.toJSON(e) : undefined);
    } else {
      obj.path = [];
    }
    message.prerollId !== undefined && (obj.prerollId = Math.round(message.prerollId));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem {
    return NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem {
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollMediaItem();
    message.path = object.path?.map((e) => APIV1Identifier.fromPartial(e)) || [];
    message.prerollId = object.prerollId ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem(): NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem {
  return { path: [], prerollId: 0 };
}

export const NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem = {
  encode(
    message: NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.path) {
      APIV1Identifier.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.prerollId !== 0) {
      writer.uint32(16).uint64(message.prerollId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.path.push(APIV1Identifier.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.prerollId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem {
    return {
      path: Array.isArray(object?.path) ? object.path.map((e: any) => APIV1Identifier.fromJSON(e)) : [],
      prerollId: isSet(object.prerollId) ? Number(object.prerollId) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem): unknown {
    const obj: any = {};
    if (message.path) {
      obj.path = message.path.map((e) => e ? APIV1Identifier.toJSON(e) : undefined);
    } else {
      obj.path = [];
    }
    message.prerollId !== undefined && (obj.prerollId = Math.round(message.prerollId));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem {
    return NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem {
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollAudioItem();
    message.path = object.path?.map((e) => APIV1Identifier.fromPartial(e)) || [];
    message.prerollId = object.prerollId ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput(): NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput {
  return { id: "", prerollId: 0 };
}

export const NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput = {
  encode(
    message: NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.prerollId !== 0) {
      writer.uint32(16).uint64(message.prerollId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.prerollId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      prerollId: isSet(object.prerollId) ? Number(object.prerollId) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.prerollId !== undefined && (obj.prerollId = Math.round(message.prerollId));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput {
    return NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput {
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollVideoInput();
    message.id = object.id ?? "";
    message.prerollId = object.prerollId ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem(): NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem {
  return { path: [], prerollId: 0 };
}

export const NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem = {
  encode(
    message: NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.path) {
      APIV1Identifier.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.prerollId !== 0) {
      writer.uint32(16).uint64(message.prerollId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.path.push(APIV1Identifier.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.prerollId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem {
    return {
      path: Array.isArray(object?.path) ? object.path.map((e: any) => APIV1Identifier.fromJSON(e)) : [],
      prerollId: isSet(object.prerollId) ? Number(object.prerollId) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem): unknown {
    const obj: any = {};
    if (message.path) {
      obj.path = message.path.map((e) => e ? APIV1Identifier.toJSON(e) : undefined);
    } else {
      obj.path = [];
    }
    message.prerollId !== undefined && (obj.prerollId = Math.round(message.prerollId));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem {
    return NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem {
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollLibraryItem();
    message.path = object.path?.map((e) => APIV1Identifier.fromPartial(e)) || [];
    message.prerollId = object.prerollId ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollNext(): NetworkAPIV1_APIV1PrerollRequest_PrerollNext {
  return { prerollId: 0 };
}

export const NetworkAPIV1_APIV1PrerollRequest_PrerollNext = {
  encode(message: NetworkAPIV1_APIV1PrerollRequest_PrerollNext, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.prerollId !== 0) {
      writer.uint32(8).uint64(message.prerollId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollRequest_PrerollNext {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollNext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.prerollId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollRequest_PrerollNext {
    return { prerollId: isSet(object.prerollId) ? Number(object.prerollId) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollRequest_PrerollNext): unknown {
    const obj: any = {};
    message.prerollId !== undefined && (obj.prerollId = Math.round(message.prerollId));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollNext>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollNext {
    return NetworkAPIV1_APIV1PrerollRequest_PrerollNext.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollNext>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollNext {
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollNext();
    message.prerollId = object.prerollId ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollPrevious(): NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious {
  return { prerollId: 0 };
}

export const NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious = {
  encode(
    message: NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.prerollId !== 0) {
      writer.uint32(8).uint64(message.prerollId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollPrevious();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.prerollId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious {
    return { prerollId: isSet(object.prerollId) ? Number(object.prerollId) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious): unknown {
    const obj: any = {};
    message.prerollId !== undefined && (obj.prerollId = Math.round(message.prerollId));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious {
    return NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollRequest_PrerollPrevious {
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_PrerollPrevious();
    message.prerollId = object.prerollId ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem(): NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem {
  return { id: 0, time: 0 };
}

export const NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem = {
  encode(
    message: NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.time !== 0) {
      writer.uint32(16).uint64(message.time);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.time = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem {
    return { id: isSet(object.id) ? Number(object.id) : 0, time: isSet(object.time) ? Number(object.time) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    message.time !== undefined && (obj.time = Math.round(message.time));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem {
    return NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem {
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_ActivatePrerollItem();
    message.id = object.id ?? 0;
    message.time = object.time ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem(): NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem {
  return { id: 0 };
}

export const NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem = {
  encode(
    message: NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem {
    return { id: isSet(object.id) ? Number(object.id) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem {
    return NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem {
    const message = createBaseNetworkAPIV1_APIV1PrerollRequest_CancelPrerollItem();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest(): NetworkAPIV1_APIV1PresentationRequest {
  return {
    active: undefined,
    focused: undefined,
    slideIndex: undefined,
    chordChart: undefined,
    chordChartUpdates: undefined,
    presentation: undefined,
    deletePresentation: undefined,
    timelineOperation: undefined,
    activePresentationTimelineOperation: undefined,
    focusedPresentationTimelineOperation: undefined,
    activePresentationTimelineStatus: undefined,
    focusedPresentationTimelineStatus: undefined,
    thumbnail: undefined,
    focus: undefined,
    trigger: undefined,
  };
}

export const NetworkAPIV1_APIV1PresentationRequest = {
  encode(message: NetworkAPIV1_APIV1PresentationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.active !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_Active.encode(message.active, writer.uint32(10).fork()).ldelim();
    }
    if (message.focused !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.encode(message.focused, writer.uint32(18).fork()).ldelim();
    }
    if (message.slideIndex !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_SlideIndex.encode(message.slideIndex, writer.uint32(26).fork()).ldelim();
    }
    if (message.chordChart !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_ChordChart.encode(message.chordChart, writer.uint32(34).fork()).ldelim();
    }
    if (message.chordChartUpdates !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates.encode(
        message.chordChartUpdates,
        writer.uint32(42).fork(),
      ).ldelim();
    }
    if (message.presentation !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_Presentation.encode(message.presentation, writer.uint32(50).fork())
        .ldelim();
    }
    if (message.deletePresentation !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_DeletePresentation.encode(
        message.deletePresentation,
        writer.uint32(58).fork(),
      ).ldelim();
    }
    if (message.timelineOperation !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_TimelineOperation.encode(
        message.timelineOperation,
        writer.uint32(66).fork(),
      ).ldelim();
    }
    if (message.activePresentationTimelineOperation !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation.encode(
        message.activePresentationTimelineOperation,
        writer.uint32(74).fork(),
      ).ldelim();
    }
    if (message.focusedPresentationTimelineOperation !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation.encode(
        message.focusedPresentationTimelineOperation,
        writer.uint32(82).fork(),
      ).ldelim();
    }
    if (message.activePresentationTimelineStatus !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus.encode(
        message.activePresentationTimelineStatus,
        writer.uint32(90).fork(),
      ).ldelim();
    }
    if (message.focusedPresentationTimelineStatus !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus.encode(
        message.focusedPresentationTimelineStatus,
        writer.uint32(98).fork(),
      ).ldelim();
    }
    if (message.thumbnail !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_Thumbnail.encode(message.thumbnail, writer.uint32(106).fork()).ldelim();
    }
    if (message.focus !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_FocusMessage.encode(message.focus, writer.uint32(114).fork()).ldelim();
    }
    if (message.trigger !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_TriggerMessage.encode(message.trigger, writer.uint32(122).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.active = NetworkAPIV1_APIV1PresentationRequest_Active.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.focused = NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.slideIndex = NetworkAPIV1_APIV1PresentationRequest_SlideIndex.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.chordChart = NetworkAPIV1_APIV1PresentationRequest_ChordChart.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.chordChartUpdates = NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.presentation = NetworkAPIV1_APIV1PresentationRequest_Presentation.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.deletePresentation = NetworkAPIV1_APIV1PresentationRequest_DeletePresentation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.timelineOperation = NetworkAPIV1_APIV1PresentationRequest_TimelineOperation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.activePresentationTimelineOperation =
            NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.focusedPresentationTimelineOperation =
            NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.activePresentationTimelineStatus =
            NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.focusedPresentationTimelineStatus =
            NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 106) {
            break;
          }

          message.thumbnail = NetworkAPIV1_APIV1PresentationRequest_Thumbnail.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag != 114) {
            break;
          }

          message.focus = NetworkAPIV1_APIV1PresentationRequest_FocusMessage.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag != 122) {
            break;
          }

          message.trigger = NetworkAPIV1_APIV1PresentationRequest_TriggerMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationRequest {
    return {
      active: isSet(object.active) ? NetworkAPIV1_APIV1PresentationRequest_Active.fromJSON(object.active) : undefined,
      focused: isSet(object.focused)
        ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromJSON(object.focused)
        : undefined,
      slideIndex: isSet(object.slideIndex)
        ? NetworkAPIV1_APIV1PresentationRequest_SlideIndex.fromJSON(object.slideIndex)
        : undefined,
      chordChart: isSet(object.chordChart)
        ? NetworkAPIV1_APIV1PresentationRequest_ChordChart.fromJSON(object.chordChart)
        : undefined,
      chordChartUpdates: isSet(object.chordChartUpdates)
        ? NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates.fromJSON(object.chordChartUpdates)
        : undefined,
      presentation: isSet(object.presentation)
        ? NetworkAPIV1_APIV1PresentationRequest_Presentation.fromJSON(object.presentation)
        : undefined,
      deletePresentation: isSet(object.deletePresentation)
        ? NetworkAPIV1_APIV1PresentationRequest_DeletePresentation.fromJSON(object.deletePresentation)
        : undefined,
      timelineOperation: isSet(object.timelineOperation)
        ? NetworkAPIV1_APIV1PresentationRequest_TimelineOperation.fromJSON(object.timelineOperation)
        : undefined,
      activePresentationTimelineOperation: isSet(object.activePresentationTimelineOperation)
        ? NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation.fromJSON(
          object.activePresentationTimelineOperation,
        )
        : undefined,
      focusedPresentationTimelineOperation: isSet(object.focusedPresentationTimelineOperation)
        ? NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation.fromJSON(
          object.focusedPresentationTimelineOperation,
        )
        : undefined,
      activePresentationTimelineStatus: isSet(object.activePresentationTimelineStatus)
        ? NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus.fromJSON(
          object.activePresentationTimelineStatus,
        )
        : undefined,
      focusedPresentationTimelineStatus: isSet(object.focusedPresentationTimelineStatus)
        ? NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus.fromJSON(
          object.focusedPresentationTimelineStatus,
        )
        : undefined,
      thumbnail: isSet(object.thumbnail)
        ? NetworkAPIV1_APIV1PresentationRequest_Thumbnail.fromJSON(object.thumbnail)
        : undefined,
      focus: isSet(object.focus)
        ? NetworkAPIV1_APIV1PresentationRequest_FocusMessage.fromJSON(object.focus)
        : undefined,
      trigger: isSet(object.trigger)
        ? NetworkAPIV1_APIV1PresentationRequest_TriggerMessage.fromJSON(object.trigger)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationRequest): unknown {
    const obj: any = {};
    message.active !== undefined &&
      (obj.active = message.active ? NetworkAPIV1_APIV1PresentationRequest_Active.toJSON(message.active) : undefined);
    message.focused !== undefined && (obj.focused = message.focused
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.toJSON(message.focused)
      : undefined);
    message.slideIndex !== undefined && (obj.slideIndex = message.slideIndex
      ? NetworkAPIV1_APIV1PresentationRequest_SlideIndex.toJSON(message.slideIndex)
      : undefined);
    message.chordChart !== undefined && (obj.chordChart = message.chordChart
      ? NetworkAPIV1_APIV1PresentationRequest_ChordChart.toJSON(message.chordChart)
      : undefined);
    message.chordChartUpdates !== undefined && (obj.chordChartUpdates = message.chordChartUpdates
      ? NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates.toJSON(message.chordChartUpdates)
      : undefined);
    message.presentation !== undefined && (obj.presentation = message.presentation
      ? NetworkAPIV1_APIV1PresentationRequest_Presentation.toJSON(message.presentation)
      : undefined);
    message.deletePresentation !== undefined && (obj.deletePresentation = message.deletePresentation
      ? NetworkAPIV1_APIV1PresentationRequest_DeletePresentation.toJSON(message.deletePresentation)
      : undefined);
    message.timelineOperation !== undefined && (obj.timelineOperation = message.timelineOperation
      ? NetworkAPIV1_APIV1PresentationRequest_TimelineOperation.toJSON(message.timelineOperation)
      : undefined);
    message.activePresentationTimelineOperation !== undefined &&
      (obj.activePresentationTimelineOperation = message.activePresentationTimelineOperation
        ? NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation.toJSON(
          message.activePresentationTimelineOperation,
        )
        : undefined);
    message.focusedPresentationTimelineOperation !== undefined &&
      (obj.focusedPresentationTimelineOperation = message.focusedPresentationTimelineOperation
        ? NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation.toJSON(
          message.focusedPresentationTimelineOperation,
        )
        : undefined);
    message.activePresentationTimelineStatus !== undefined &&
      (obj.activePresentationTimelineStatus = message.activePresentationTimelineStatus
        ? NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus.toJSON(
          message.activePresentationTimelineStatus,
        )
        : undefined);
    message.focusedPresentationTimelineStatus !== undefined &&
      (obj.focusedPresentationTimelineStatus = message.focusedPresentationTimelineStatus
        ? NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus.toJSON(
          message.focusedPresentationTimelineStatus,
        )
        : undefined);
    message.thumbnail !== undefined && (obj.thumbnail = message.thumbnail
      ? NetworkAPIV1_APIV1PresentationRequest_Thumbnail.toJSON(message.thumbnail)
      : undefined);
    message.focus !== undefined &&
      (obj.focus = message.focus
        ? NetworkAPIV1_APIV1PresentationRequest_FocusMessage.toJSON(message.focus)
        : undefined);
    message.trigger !== undefined && (obj.trigger = message.trigger
      ? NetworkAPIV1_APIV1PresentationRequest_TriggerMessage.toJSON(message.trigger)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest {
    return NetworkAPIV1_APIV1PresentationRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationRequest {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest();
    message.active = (object.active !== undefined && object.active !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_Active.fromPartial(object.active)
      : undefined;
    message.focused = (object.focused !== undefined && object.focused !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromPartial(object.focused)
      : undefined;
    message.slideIndex = (object.slideIndex !== undefined && object.slideIndex !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_SlideIndex.fromPartial(object.slideIndex)
      : undefined;
    message.chordChart = (object.chordChart !== undefined && object.chordChart !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_ChordChart.fromPartial(object.chordChart)
      : undefined;
    message.chordChartUpdates = (object.chordChartUpdates !== undefined && object.chordChartUpdates !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates.fromPartial(object.chordChartUpdates)
      : undefined;
    message.presentation = (object.presentation !== undefined && object.presentation !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_Presentation.fromPartial(object.presentation)
      : undefined;
    message.deletePresentation = (object.deletePresentation !== undefined && object.deletePresentation !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_DeletePresentation.fromPartial(object.deletePresentation)
      : undefined;
    message.timelineOperation = (object.timelineOperation !== undefined && object.timelineOperation !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_TimelineOperation.fromPartial(object.timelineOperation)
      : undefined;
    message.activePresentationTimelineOperation =
      (object.activePresentationTimelineOperation !== undefined && object.activePresentationTimelineOperation !== null)
        ? NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation.fromPartial(
          object.activePresentationTimelineOperation,
        )
        : undefined;
    message.focusedPresentationTimelineOperation =
      (object.focusedPresentationTimelineOperation !== undefined &&
          object.focusedPresentationTimelineOperation !== null)
        ? NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation.fromPartial(
          object.focusedPresentationTimelineOperation,
        )
        : undefined;
    message.activePresentationTimelineStatus =
      (object.activePresentationTimelineStatus !== undefined && object.activePresentationTimelineStatus !== null)
        ? NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus.fromPartial(
          object.activePresentationTimelineStatus,
        )
        : undefined;
    message.focusedPresentationTimelineStatus =
      (object.focusedPresentationTimelineStatus !== undefined && object.focusedPresentationTimelineStatus !== null)
        ? NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus.fromPartial(
          object.focusedPresentationTimelineStatus,
        )
        : undefined;
    message.thumbnail = (object.thumbnail !== undefined && object.thumbnail !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_Thumbnail.fromPartial(object.thumbnail)
      : undefined;
    message.focus = (object.focus !== undefined && object.focus !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_FocusMessage.fromPartial(object.focus)
      : undefined;
    message.trigger = (object.trigger !== undefined && object.trigger !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_TriggerMessage.fromPartial(object.trigger)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_Active(): NetworkAPIV1_APIV1PresentationRequest_Active {
  return {};
}

export const NetworkAPIV1_APIV1PresentationRequest_Active = {
  encode(_: NetworkAPIV1_APIV1PresentationRequest_Active, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest_Active {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_Active();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationRequest_Active {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationRequest_Active): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_Active>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_Active {
    return NetworkAPIV1_APIV1PresentationRequest_Active.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_Active>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationRequest_Active {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_Active();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_SlideIndex(): NetworkAPIV1_APIV1PresentationRequest_SlideIndex {
  return {};
}

export const NetworkAPIV1_APIV1PresentationRequest_SlideIndex = {
  encode(_: NetworkAPIV1_APIV1PresentationRequest_SlideIndex, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest_SlideIndex {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_SlideIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationRequest_SlideIndex {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationRequest_SlideIndex): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_SlideIndex>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_SlideIndex {
    return NetworkAPIV1_APIV1PresentationRequest_SlideIndex.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_SlideIndex>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationRequest_SlideIndex {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_SlideIndex();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_ChordChart(): NetworkAPIV1_APIV1PresentationRequest_ChordChart {
  return { quality: 0 };
}

export const NetworkAPIV1_APIV1PresentationRequest_ChordChart = {
  encode(
    message: NetworkAPIV1_APIV1PresentationRequest_ChordChart,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.quality !== 0) {
      writer.uint32(8).int32(message.quality);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest_ChordChart {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_ChordChart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.quality = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationRequest_ChordChart {
    return { quality: isSet(object.quality) ? Number(object.quality) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationRequest_ChordChart): unknown {
    const obj: any = {};
    message.quality !== undefined && (obj.quality = Math.round(message.quality));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_ChordChart>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_ChordChart {
    return NetworkAPIV1_APIV1PresentationRequest_ChordChart.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_ChordChart>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationRequest_ChordChart {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_ChordChart();
    message.quality = object.quality ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates(): NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates {
  return {};
}

export const NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates = {
  encode(
    _: NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates {
    return NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_ChordChartUpdates();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_Presentation(): NetworkAPIV1_APIV1PresentationRequest_Presentation {
  return { uuid: undefined };
}

export const NetworkAPIV1_APIV1PresentationRequest_Presentation = {
  encode(
    message: NetworkAPIV1_APIV1PresentationRequest_Presentation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.uuid !== undefined) {
      UUID.encode(message.uuid, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest_Presentation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_Presentation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.uuid = UUID.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationRequest_Presentation {
    return { uuid: isSet(object.uuid) ? UUID.fromJSON(object.uuid) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationRequest_Presentation): unknown {
    const obj: any = {};
    message.uuid !== undefined && (obj.uuid = message.uuid ? UUID.toJSON(message.uuid) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_Presentation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_Presentation {
    return NetworkAPIV1_APIV1PresentationRequest_Presentation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_Presentation>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationRequest_Presentation {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_Presentation();
    message.uuid = (object.uuid !== undefined && object.uuid !== null) ? UUID.fromPartial(object.uuid) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_DeletePresentation(): NetworkAPIV1_APIV1PresentationRequest_DeletePresentation {
  return { uuid: undefined };
}

export const NetworkAPIV1_APIV1PresentationRequest_DeletePresentation = {
  encode(
    message: NetworkAPIV1_APIV1PresentationRequest_DeletePresentation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.uuid !== undefined) {
      UUID.encode(message.uuid, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest_DeletePresentation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_DeletePresentation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.uuid = UUID.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationRequest_DeletePresentation {
    return { uuid: isSet(object.uuid) ? UUID.fromJSON(object.uuid) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationRequest_DeletePresentation): unknown {
    const obj: any = {};
    message.uuid !== undefined && (obj.uuid = message.uuid ? UUID.toJSON(message.uuid) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_DeletePresentation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_DeletePresentation {
    return NetworkAPIV1_APIV1PresentationRequest_DeletePresentation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_DeletePresentation>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationRequest_DeletePresentation {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_DeletePresentation();
    message.uuid = (object.uuid !== undefined && object.uuid !== null) ? UUID.fromPartial(object.uuid) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_TimelineOperation(): NetworkAPIV1_APIV1PresentationRequest_TimelineOperation {
  return { uuid: undefined, operation: 0 };
}

export const NetworkAPIV1_APIV1PresentationRequest_TimelineOperation = {
  encode(
    message: NetworkAPIV1_APIV1PresentationRequest_TimelineOperation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.uuid !== undefined) {
      UUID.encode(message.uuid, writer.uint32(10).fork()).ldelim();
    }
    if (message.operation !== 0) {
      writer.uint32(16).int32(message.operation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest_TimelineOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_TimelineOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.uuid = UUID.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.operation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationRequest_TimelineOperation {
    return {
      uuid: isSet(object.uuid) ? UUID.fromJSON(object.uuid) : undefined,
      operation: isSet(object.operation)
        ? networkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperationFromJSON(object.operation)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationRequest_TimelineOperation): unknown {
    const obj: any = {};
    message.uuid !== undefined && (obj.uuid = message.uuid ? UUID.toJSON(message.uuid) : undefined);
    message.operation !== undefined &&
      (obj.operation = networkAPIV1_APIV1PresentationRequest_TimelineOperation_APIV1TimelineOperationToJSON(
        message.operation,
      ));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_TimelineOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_TimelineOperation {
    return NetworkAPIV1_APIV1PresentationRequest_TimelineOperation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_TimelineOperation>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationRequest_TimelineOperation {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_TimelineOperation();
    message.uuid = (object.uuid !== undefined && object.uuid !== null) ? UUID.fromPartial(object.uuid) : undefined;
    message.operation = object.operation ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation(): NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation {
  return { operation: 0 };
}

export const NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation = {
  encode(
    message: NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.operation !== 0) {
      writer.uint32(8).int32(message.operation);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.operation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation {
    return {
      operation: isSet(object.operation)
        ? networkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperationFromJSON(
          object.operation,
        )
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation): unknown {
    const obj: any = {};
    message.operation !== undefined &&
      (obj.operation =
        networkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation_APIV1TimelineOperationToJSON(
          message.operation,
        ));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation {
    return NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation.fromPartial(base ?? {});
  },

  fromPartial<
    I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation>, I>,
  >(object: I): NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineOperation();
    message.operation = object.operation ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation(): NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation {
  return { operation: 0 };
}

export const NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation = {
  encode(
    message: NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.operation !== 0) {
      writer.uint32(8).int32(message.operation);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.operation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation {
    return {
      operation: isSet(object.operation)
        ? networkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperationFromJSON(
          object.operation,
        )
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation): unknown {
    const obj: any = {};
    message.operation !== undefined &&
      (obj.operation =
        networkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation_APIV1TimelineOperationToJSON(
          message.operation,
        ));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation {
    return NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation.fromPartial(base ?? {});
  },

  fromPartial<
    I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation>, I>,
  >(object: I): NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineOperation();
    message.operation = object.operation ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus(): NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus {
  return {};
}

export const NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus = {
  encode(
    _: NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus {
    return NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_ActivePresentationTimelineStatus();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus(): NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus {
  return {};
}

export const NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus = {
  encode(
    _: NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus {
    return NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_FocusedPresentationTimelineStatus();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_Thumbnail(): NetworkAPIV1_APIV1PresentationRequest_Thumbnail {
  return { uuid: undefined, cueIndex: 0, quality: 0, contentType: 0 };
}

export const NetworkAPIV1_APIV1PresentationRequest_Thumbnail = {
  encode(
    message: NetworkAPIV1_APIV1PresentationRequest_Thumbnail,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.uuid !== undefined) {
      UUID.encode(message.uuid, writer.uint32(10).fork()).ldelim();
    }
    if (message.cueIndex !== 0) {
      writer.uint32(16).uint32(message.cueIndex);
    }
    if (message.quality !== 0) {
      writer.uint32(24).int32(message.quality);
    }
    if (message.contentType !== 0) {
      writer.uint32(32).int32(message.contentType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest_Thumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_Thumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.uuid = UUID.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.cueIndex = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.quality = reader.int32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.contentType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationRequest_Thumbnail {
    return {
      uuid: isSet(object.uuid) ? UUID.fromJSON(object.uuid) : undefined,
      cueIndex: isSet(object.cueIndex) ? Number(object.cueIndex) : 0,
      quality: isSet(object.quality) ? Number(object.quality) : 0,
      contentType: isSet(object.contentType)
        ? networkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentTypeFromJSON(object.contentType)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationRequest_Thumbnail): unknown {
    const obj: any = {};
    message.uuid !== undefined && (obj.uuid = message.uuid ? UUID.toJSON(message.uuid) : undefined);
    message.cueIndex !== undefined && (obj.cueIndex = Math.round(message.cueIndex));
    message.quality !== undefined && (obj.quality = Math.round(message.quality));
    message.contentType !== undefined &&
      (obj.contentType = networkAPIV1_APIV1PresentationRequest_Thumbnail_APIV1ContentTypeToJSON(message.contentType));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_Thumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_Thumbnail {
    return NetworkAPIV1_APIV1PresentationRequest_Thumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_Thumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationRequest_Thumbnail {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_Thumbnail();
    message.uuid = (object.uuid !== undefined && object.uuid !== null) ? UUID.fromPartial(object.uuid) : undefined;
    message.cueIndex = object.cueIndex ?? 0;
    message.quality = object.quality ?? 0;
    message.contentType = object.contentType ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_EmptyMessage(): NetworkAPIV1_APIV1PresentationRequest_EmptyMessage {
  return {};
}

export const NetworkAPIV1_APIV1PresentationRequest_EmptyMessage = {
  encode(_: NetworkAPIV1_APIV1PresentationRequest_EmptyMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest_EmptyMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_EmptyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationRequest_EmptyMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationRequest_EmptyMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_EmptyMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_EmptyMessage {
    return NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_EmptyMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationRequest_EmptyMessage {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_EmptyMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_FocusMessage(): NetworkAPIV1_APIV1PresentationRequest_FocusMessage {
  return { next: undefined, previous: undefined, active: undefined, uuid: undefined };
}

export const NetworkAPIV1_APIV1PresentationRequest_FocusMessage = {
  encode(
    message: NetworkAPIV1_APIV1PresentationRequest_FocusMessage,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.next !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.encode(message.next, writer.uint32(10).fork()).ldelim();
    }
    if (message.previous !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.encode(message.previous, writer.uint32(18).fork()).ldelim();
    }
    if (message.active !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.encode(message.active, writer.uint32(26).fork()).ldelim();
    }
    if (message.uuid !== undefined) {
      writer.uint32(34).string(message.uuid);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest_FocusMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_FocusMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.next = NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.previous = NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.active = NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.uuid = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationRequest_FocusMessage {
    return {
      next: isSet(object.next) ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromJSON(object.next) : undefined,
      previous: isSet(object.previous)
        ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromJSON(object.previous)
        : undefined,
      active: isSet(object.active)
        ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromJSON(object.active)
        : undefined,
      uuid: isSet(object.uuid) ? String(object.uuid) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationRequest_FocusMessage): unknown {
    const obj: any = {};
    message.next !== undefined &&
      (obj.next = message.next ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.toJSON(message.next) : undefined);
    message.previous !== undefined && (obj.previous = message.previous
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.toJSON(message.previous)
      : undefined);
    message.active !== undefined && (obj.active = message.active
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.toJSON(message.active)
      : undefined);
    message.uuid !== undefined && (obj.uuid = message.uuid);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_FocusMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_FocusMessage {
    return NetworkAPIV1_APIV1PresentationRequest_FocusMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_FocusMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationRequest_FocusMessage {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_FocusMessage();
    message.next = (object.next !== undefined && object.next !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromPartial(object.next)
      : undefined;
    message.previous = (object.previous !== undefined && object.previous !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromPartial(object.previous)
      : undefined;
    message.active = (object.active !== undefined && object.active !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromPartial(object.active)
      : undefined;
    message.uuid = object.uuid ?? undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationRequest_TriggerMessage(): NetworkAPIV1_APIV1PresentationRequest_TriggerMessage {
  return {
    focused: undefined,
    active: undefined,
    uuid: undefined,
    first: undefined,
    next: undefined,
    previous: undefined,
    index: undefined,
    group: undefined,
  };
}

export const NetworkAPIV1_APIV1PresentationRequest_TriggerMessage = {
  encode(
    message: NetworkAPIV1_APIV1PresentationRequest_TriggerMessage,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.focused !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.encode(message.focused, writer.uint32(10).fork()).ldelim();
    }
    if (message.active !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.encode(message.active, writer.uint32(18).fork()).ldelim();
    }
    if (message.uuid !== undefined) {
      StringValue.encode({ value: message.uuid! }, writer.uint32(26).fork()).ldelim();
    }
    if (message.first !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.encode(message.first, writer.uint32(34).fork()).ldelim();
    }
    if (message.next !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.encode(message.next, writer.uint32(42).fork()).ldelim();
    }
    if (message.previous !== undefined) {
      NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.encode(message.previous, writer.uint32(50).fork()).ldelim();
    }
    if (message.index !== undefined) {
      UInt32Value.encode({ value: message.index! }, writer.uint32(58).fork()).ldelim();
    }
    if (message.group !== undefined) {
      StringValue.encode({ value: message.group! }, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationRequest_TriggerMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_TriggerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.focused = NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.active = NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.uuid = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.first = NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.next = NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.previous = NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.index = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.group = StringValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationRequest_TriggerMessage {
    return {
      focused: isSet(object.focused)
        ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromJSON(object.focused)
        : undefined,
      active: isSet(object.active)
        ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromJSON(object.active)
        : undefined,
      uuid: isSet(object.uuid) ? String(object.uuid) : undefined,
      first: isSet(object.first)
        ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromJSON(object.first)
        : undefined,
      next: isSet(object.next) ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromJSON(object.next) : undefined,
      previous: isSet(object.previous)
        ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromJSON(object.previous)
        : undefined,
      index: isSet(object.index) ? Number(object.index) : undefined,
      group: isSet(object.group) ? String(object.group) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationRequest_TriggerMessage): unknown {
    const obj: any = {};
    message.focused !== undefined && (obj.focused = message.focused
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.toJSON(message.focused)
      : undefined);
    message.active !== undefined && (obj.active = message.active
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.toJSON(message.active)
      : undefined);
    message.uuid !== undefined && (obj.uuid = message.uuid);
    message.first !== undefined &&
      (obj.first = message.first
        ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.toJSON(message.first)
        : undefined);
    message.next !== undefined &&
      (obj.next = message.next ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.toJSON(message.next) : undefined);
    message.previous !== undefined && (obj.previous = message.previous
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.toJSON(message.previous)
      : undefined);
    message.index !== undefined && (obj.index = message.index);
    message.group !== undefined && (obj.group = message.group);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_TriggerMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationRequest_TriggerMessage {
    return NetworkAPIV1_APIV1PresentationRequest_TriggerMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationRequest_TriggerMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationRequest_TriggerMessage {
    const message = createBaseNetworkAPIV1_APIV1PresentationRequest_TriggerMessage();
    message.focused = (object.focused !== undefined && object.focused !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromPartial(object.focused)
      : undefined;
    message.active = (object.active !== undefined && object.active !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromPartial(object.active)
      : undefined;
    message.uuid = object.uuid ?? undefined;
    message.first = (object.first !== undefined && object.first !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromPartial(object.first)
      : undefined;
    message.next = (object.next !== undefined && object.next !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromPartial(object.next)
      : undefined;
    message.previous = (object.previous !== undefined && object.previous !== null)
      ? NetworkAPIV1_APIV1PresentationRequest_EmptyMessage.fromPartial(object.previous)
      : undefined;
    message.index = object.index ?? undefined;
    message.group = object.group ?? undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropRequest(): NetworkAPIV1_APIV1PropRequest {
  return {
    props: undefined,
    getProp: undefined,
    deleteProp: undefined,
    triggerProp: undefined,
    clearProp: undefined,
    getThumbnail: undefined,
  };
}

export const NetworkAPIV1_APIV1PropRequest = {
  encode(message: NetworkAPIV1_APIV1PropRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.props !== undefined) {
      NetworkAPIV1_APIV1PropRequest_Props.encode(message.props, writer.uint32(10).fork()).ldelim();
    }
    if (message.getProp !== undefined) {
      NetworkAPIV1_APIV1PropRequest_GetProp.encode(message.getProp, writer.uint32(18).fork()).ldelim();
    }
    if (message.deleteProp !== undefined) {
      NetworkAPIV1_APIV1PropRequest_DeleteProp.encode(message.deleteProp, writer.uint32(26).fork()).ldelim();
    }
    if (message.triggerProp !== undefined) {
      NetworkAPIV1_APIV1PropRequest_TriggerProp.encode(message.triggerProp, writer.uint32(34).fork()).ldelim();
    }
    if (message.clearProp !== undefined) {
      NetworkAPIV1_APIV1PropRequest_ClearProp.encode(message.clearProp, writer.uint32(42).fork()).ldelim();
    }
    if (message.getThumbnail !== undefined) {
      NetworkAPIV1_APIV1PropRequest_GetThumbnail.encode(message.getThumbnail, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.props = NetworkAPIV1_APIV1PropRequest_Props.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getProp = NetworkAPIV1_APIV1PropRequest_GetProp.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.deleteProp = NetworkAPIV1_APIV1PropRequest_DeleteProp.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.triggerProp = NetworkAPIV1_APIV1PropRequest_TriggerProp.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.clearProp = NetworkAPIV1_APIV1PropRequest_ClearProp.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getThumbnail = NetworkAPIV1_APIV1PropRequest_GetThumbnail.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PropRequest {
    return {
      props: isSet(object.props) ? NetworkAPIV1_APIV1PropRequest_Props.fromJSON(object.props) : undefined,
      getProp: isSet(object.getProp) ? NetworkAPIV1_APIV1PropRequest_GetProp.fromJSON(object.getProp) : undefined,
      deleteProp: isSet(object.deleteProp)
        ? NetworkAPIV1_APIV1PropRequest_DeleteProp.fromJSON(object.deleteProp)
        : undefined,
      triggerProp: isSet(object.triggerProp)
        ? NetworkAPIV1_APIV1PropRequest_TriggerProp.fromJSON(object.triggerProp)
        : undefined,
      clearProp: isSet(object.clearProp)
        ? NetworkAPIV1_APIV1PropRequest_ClearProp.fromJSON(object.clearProp)
        : undefined,
      getThumbnail: isSet(object.getThumbnail)
        ? NetworkAPIV1_APIV1PropRequest_GetThumbnail.fromJSON(object.getThumbnail)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PropRequest): unknown {
    const obj: any = {};
    message.props !== undefined &&
      (obj.props = message.props ? NetworkAPIV1_APIV1PropRequest_Props.toJSON(message.props) : undefined);
    message.getProp !== undefined &&
      (obj.getProp = message.getProp ? NetworkAPIV1_APIV1PropRequest_GetProp.toJSON(message.getProp) : undefined);
    message.deleteProp !== undefined && (obj.deleteProp = message.deleteProp
      ? NetworkAPIV1_APIV1PropRequest_DeleteProp.toJSON(message.deleteProp)
      : undefined);
    message.triggerProp !== undefined && (obj.triggerProp = message.triggerProp
      ? NetworkAPIV1_APIV1PropRequest_TriggerProp.toJSON(message.triggerProp)
      : undefined);
    message.clearProp !== undefined &&
      (obj.clearProp = message.clearProp
        ? NetworkAPIV1_APIV1PropRequest_ClearProp.toJSON(message.clearProp)
        : undefined);
    message.getThumbnail !== undefined && (obj.getThumbnail = message.getThumbnail
      ? NetworkAPIV1_APIV1PropRequest_GetThumbnail.toJSON(message.getThumbnail)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest>, I>>(base?: I): NetworkAPIV1_APIV1PropRequest {
    return NetworkAPIV1_APIV1PropRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PropRequest {
    const message = createBaseNetworkAPIV1_APIV1PropRequest();
    message.props = (object.props !== undefined && object.props !== null)
      ? NetworkAPIV1_APIV1PropRequest_Props.fromPartial(object.props)
      : undefined;
    message.getProp = (object.getProp !== undefined && object.getProp !== null)
      ? NetworkAPIV1_APIV1PropRequest_GetProp.fromPartial(object.getProp)
      : undefined;
    message.deleteProp = (object.deleteProp !== undefined && object.deleteProp !== null)
      ? NetworkAPIV1_APIV1PropRequest_DeleteProp.fromPartial(object.deleteProp)
      : undefined;
    message.triggerProp = (object.triggerProp !== undefined && object.triggerProp !== null)
      ? NetworkAPIV1_APIV1PropRequest_TriggerProp.fromPartial(object.triggerProp)
      : undefined;
    message.clearProp = (object.clearProp !== undefined && object.clearProp !== null)
      ? NetworkAPIV1_APIV1PropRequest_ClearProp.fromPartial(object.clearProp)
      : undefined;
    message.getThumbnail = (object.getThumbnail !== undefined && object.getThumbnail !== null)
      ? NetworkAPIV1_APIV1PropRequest_GetThumbnail.fromPartial(object.getThumbnail)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropRequest_Props(): NetworkAPIV1_APIV1PropRequest_Props {
  return {};
}

export const NetworkAPIV1_APIV1PropRequest_Props = {
  encode(_: NetworkAPIV1_APIV1PropRequest_Props, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropRequest_Props {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropRequest_Props();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PropRequest_Props {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PropRequest_Props): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_Props>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropRequest_Props {
    return NetworkAPIV1_APIV1PropRequest_Props.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_Props>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PropRequest_Props {
    const message = createBaseNetworkAPIV1_APIV1PropRequest_Props();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropRequest_GetProp(): NetworkAPIV1_APIV1PropRequest_GetProp {
  return { id: "" };
}

export const NetworkAPIV1_APIV1PropRequest_GetProp = {
  encode(message: NetworkAPIV1_APIV1PropRequest_GetProp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropRequest_GetProp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropRequest_GetProp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PropRequest_GetProp {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1PropRequest_GetProp): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_GetProp>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropRequest_GetProp {
    return NetworkAPIV1_APIV1PropRequest_GetProp.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_GetProp>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PropRequest_GetProp {
    const message = createBaseNetworkAPIV1_APIV1PropRequest_GetProp();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropRequest_DeleteProp(): NetworkAPIV1_APIV1PropRequest_DeleteProp {
  return { id: "" };
}

export const NetworkAPIV1_APIV1PropRequest_DeleteProp = {
  encode(message: NetworkAPIV1_APIV1PropRequest_DeleteProp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropRequest_DeleteProp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropRequest_DeleteProp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PropRequest_DeleteProp {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1PropRequest_DeleteProp): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_DeleteProp>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropRequest_DeleteProp {
    return NetworkAPIV1_APIV1PropRequest_DeleteProp.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_DeleteProp>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PropRequest_DeleteProp {
    const message = createBaseNetworkAPIV1_APIV1PropRequest_DeleteProp();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropRequest_TriggerProp(): NetworkAPIV1_APIV1PropRequest_TriggerProp {
  return { id: "" };
}

export const NetworkAPIV1_APIV1PropRequest_TriggerProp = {
  encode(message: NetworkAPIV1_APIV1PropRequest_TriggerProp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropRequest_TriggerProp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropRequest_TriggerProp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PropRequest_TriggerProp {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1PropRequest_TriggerProp): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_TriggerProp>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropRequest_TriggerProp {
    return NetworkAPIV1_APIV1PropRequest_TriggerProp.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_TriggerProp>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PropRequest_TriggerProp {
    const message = createBaseNetworkAPIV1_APIV1PropRequest_TriggerProp();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropRequest_ClearProp(): NetworkAPIV1_APIV1PropRequest_ClearProp {
  return { id: "" };
}

export const NetworkAPIV1_APIV1PropRequest_ClearProp = {
  encode(message: NetworkAPIV1_APIV1PropRequest_ClearProp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropRequest_ClearProp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropRequest_ClearProp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PropRequest_ClearProp {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1PropRequest_ClearProp): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_ClearProp>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropRequest_ClearProp {
    return NetworkAPIV1_APIV1PropRequest_ClearProp.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_ClearProp>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PropRequest_ClearProp {
    const message = createBaseNetworkAPIV1_APIV1PropRequest_ClearProp();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropRequest_GetThumbnail(): NetworkAPIV1_APIV1PropRequest_GetThumbnail {
  return { id: "", quality: 0 };
}

export const NetworkAPIV1_APIV1PropRequest_GetThumbnail = {
  encode(message: NetworkAPIV1_APIV1PropRequest_GetThumbnail, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.quality !== 0) {
      writer.uint32(16).int32(message.quality);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropRequest_GetThumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropRequest_GetThumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.quality = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PropRequest_GetThumbnail {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      quality: isSet(object.quality) ? Number(object.quality) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PropRequest_GetThumbnail): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.quality !== undefined && (obj.quality = Math.round(message.quality));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_GetThumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropRequest_GetThumbnail {
    return NetworkAPIV1_APIV1PropRequest_GetThumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropRequest_GetThumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PropRequest_GetThumbnail {
    const message = createBaseNetworkAPIV1_APIV1PropRequest_GetThumbnail();
    message.id = object.id ?? "";
    message.quality = object.quality ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest(): NetworkAPIV1_APIV1StageRequest {
  return {
    getLayoutMap: undefined,
    setLayoutMap: undefined,
    getMessage: undefined,
    putMessage: undefined,
    deleteMessage: undefined,
    getScreens: undefined,
    getScreenLayout: undefined,
    setScreenLayout: undefined,
    getLayouts: undefined,
    deleteLayout: undefined,
    getLayoutThumbnail: undefined,
  };
}

export const NetworkAPIV1_APIV1StageRequest = {
  encode(message: NetworkAPIV1_APIV1StageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.getLayoutMap !== undefined) {
      NetworkAPIV1_APIV1StageRequest_GetLayoutMap.encode(message.getLayoutMap, writer.uint32(10).fork()).ldelim();
    }
    if (message.setLayoutMap !== undefined) {
      NetworkAPIV1_APIV1StageRequest_SetLayoutMap.encode(message.setLayoutMap, writer.uint32(18).fork()).ldelim();
    }
    if (message.getMessage !== undefined) {
      NetworkAPIV1_APIV1StageRequest_GetMessage.encode(message.getMessage, writer.uint32(26).fork()).ldelim();
    }
    if (message.putMessage !== undefined) {
      NetworkAPIV1_APIV1StageRequest_PutMessage.encode(message.putMessage, writer.uint32(34).fork()).ldelim();
    }
    if (message.deleteMessage !== undefined) {
      NetworkAPIV1_APIV1StageRequest_DeleteMessage.encode(message.deleteMessage, writer.uint32(42).fork()).ldelim();
    }
    if (message.getScreens !== undefined) {
      NetworkAPIV1_APIV1StageRequest_GetScreens.encode(message.getScreens, writer.uint32(50).fork()).ldelim();
    }
    if (message.getScreenLayout !== undefined) {
      NetworkAPIV1_APIV1StageRequest_GetScreenLayout.encode(message.getScreenLayout, writer.uint32(58).fork()).ldelim();
    }
    if (message.setScreenLayout !== undefined) {
      NetworkAPIV1_APIV1StageRequest_SetScreenLayout.encode(message.setScreenLayout, writer.uint32(66).fork()).ldelim();
    }
    if (message.getLayouts !== undefined) {
      NetworkAPIV1_APIV1StageRequest_GetLayouts.encode(message.getLayouts, writer.uint32(74).fork()).ldelim();
    }
    if (message.deleteLayout !== undefined) {
      NetworkAPIV1_APIV1StageRequest_DeleteLayout.encode(message.deleteLayout, writer.uint32(82).fork()).ldelim();
    }
    if (message.getLayoutThumbnail !== undefined) {
      NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail.encode(message.getLayoutThumbnail, writer.uint32(90).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.getLayoutMap = NetworkAPIV1_APIV1StageRequest_GetLayoutMap.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.setLayoutMap = NetworkAPIV1_APIV1StageRequest_SetLayoutMap.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getMessage = NetworkAPIV1_APIV1StageRequest_GetMessage.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.putMessage = NetworkAPIV1_APIV1StageRequest_PutMessage.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.deleteMessage = NetworkAPIV1_APIV1StageRequest_DeleteMessage.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getScreens = NetworkAPIV1_APIV1StageRequest_GetScreens.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.getScreenLayout = NetworkAPIV1_APIV1StageRequest_GetScreenLayout.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.setScreenLayout = NetworkAPIV1_APIV1StageRequest_SetScreenLayout.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.getLayouts = NetworkAPIV1_APIV1StageRequest_GetLayouts.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.deleteLayout = NetworkAPIV1_APIV1StageRequest_DeleteLayout.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.getLayoutThumbnail = NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageRequest {
    return {
      getLayoutMap: isSet(object.getLayoutMap)
        ? NetworkAPIV1_APIV1StageRequest_GetLayoutMap.fromJSON(object.getLayoutMap)
        : undefined,
      setLayoutMap: isSet(object.setLayoutMap)
        ? NetworkAPIV1_APIV1StageRequest_SetLayoutMap.fromJSON(object.setLayoutMap)
        : undefined,
      getMessage: isSet(object.getMessage)
        ? NetworkAPIV1_APIV1StageRequest_GetMessage.fromJSON(object.getMessage)
        : undefined,
      putMessage: isSet(object.putMessage)
        ? NetworkAPIV1_APIV1StageRequest_PutMessage.fromJSON(object.putMessage)
        : undefined,
      deleteMessage: isSet(object.deleteMessage)
        ? NetworkAPIV1_APIV1StageRequest_DeleteMessage.fromJSON(object.deleteMessage)
        : undefined,
      getScreens: isSet(object.getScreens)
        ? NetworkAPIV1_APIV1StageRequest_GetScreens.fromJSON(object.getScreens)
        : undefined,
      getScreenLayout: isSet(object.getScreenLayout)
        ? NetworkAPIV1_APIV1StageRequest_GetScreenLayout.fromJSON(object.getScreenLayout)
        : undefined,
      setScreenLayout: isSet(object.setScreenLayout)
        ? NetworkAPIV1_APIV1StageRequest_SetScreenLayout.fromJSON(object.setScreenLayout)
        : undefined,
      getLayouts: isSet(object.getLayouts)
        ? NetworkAPIV1_APIV1StageRequest_GetLayouts.fromJSON(object.getLayouts)
        : undefined,
      deleteLayout: isSet(object.deleteLayout)
        ? NetworkAPIV1_APIV1StageRequest_DeleteLayout.fromJSON(object.deleteLayout)
        : undefined,
      getLayoutThumbnail: isSet(object.getLayoutThumbnail)
        ? NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail.fromJSON(object.getLayoutThumbnail)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1StageRequest): unknown {
    const obj: any = {};
    message.getLayoutMap !== undefined && (obj.getLayoutMap = message.getLayoutMap
      ? NetworkAPIV1_APIV1StageRequest_GetLayoutMap.toJSON(message.getLayoutMap)
      : undefined);
    message.setLayoutMap !== undefined && (obj.setLayoutMap = message.setLayoutMap
      ? NetworkAPIV1_APIV1StageRequest_SetLayoutMap.toJSON(message.setLayoutMap)
      : undefined);
    message.getMessage !== undefined && (obj.getMessage = message.getMessage
      ? NetworkAPIV1_APIV1StageRequest_GetMessage.toJSON(message.getMessage)
      : undefined);
    message.putMessage !== undefined && (obj.putMessage = message.putMessage
      ? NetworkAPIV1_APIV1StageRequest_PutMessage.toJSON(message.putMessage)
      : undefined);
    message.deleteMessage !== undefined && (obj.deleteMessage = message.deleteMessage
      ? NetworkAPIV1_APIV1StageRequest_DeleteMessage.toJSON(message.deleteMessage)
      : undefined);
    message.getScreens !== undefined && (obj.getScreens = message.getScreens
      ? NetworkAPIV1_APIV1StageRequest_GetScreens.toJSON(message.getScreens)
      : undefined);
    message.getScreenLayout !== undefined && (obj.getScreenLayout = message.getScreenLayout
      ? NetworkAPIV1_APIV1StageRequest_GetScreenLayout.toJSON(message.getScreenLayout)
      : undefined);
    message.setScreenLayout !== undefined && (obj.setScreenLayout = message.setScreenLayout
      ? NetworkAPIV1_APIV1StageRequest_SetScreenLayout.toJSON(message.setScreenLayout)
      : undefined);
    message.getLayouts !== undefined && (obj.getLayouts = message.getLayouts
      ? NetworkAPIV1_APIV1StageRequest_GetLayouts.toJSON(message.getLayouts)
      : undefined);
    message.deleteLayout !== undefined && (obj.deleteLayout = message.deleteLayout
      ? NetworkAPIV1_APIV1StageRequest_DeleteLayout.toJSON(message.deleteLayout)
      : undefined);
    message.getLayoutThumbnail !== undefined && (obj.getLayoutThumbnail = message.getLayoutThumbnail
      ? NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail.toJSON(message.getLayoutThumbnail)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest>, I>>(base?: I): NetworkAPIV1_APIV1StageRequest {
    return NetworkAPIV1_APIV1StageRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageRequest {
    const message = createBaseNetworkAPIV1_APIV1StageRequest();
    message.getLayoutMap = (object.getLayoutMap !== undefined && object.getLayoutMap !== null)
      ? NetworkAPIV1_APIV1StageRequest_GetLayoutMap.fromPartial(object.getLayoutMap)
      : undefined;
    message.setLayoutMap = (object.setLayoutMap !== undefined && object.setLayoutMap !== null)
      ? NetworkAPIV1_APIV1StageRequest_SetLayoutMap.fromPartial(object.setLayoutMap)
      : undefined;
    message.getMessage = (object.getMessage !== undefined && object.getMessage !== null)
      ? NetworkAPIV1_APIV1StageRequest_GetMessage.fromPartial(object.getMessage)
      : undefined;
    message.putMessage = (object.putMessage !== undefined && object.putMessage !== null)
      ? NetworkAPIV1_APIV1StageRequest_PutMessage.fromPartial(object.putMessage)
      : undefined;
    message.deleteMessage = (object.deleteMessage !== undefined && object.deleteMessage !== null)
      ? NetworkAPIV1_APIV1StageRequest_DeleteMessage.fromPartial(object.deleteMessage)
      : undefined;
    message.getScreens = (object.getScreens !== undefined && object.getScreens !== null)
      ? NetworkAPIV1_APIV1StageRequest_GetScreens.fromPartial(object.getScreens)
      : undefined;
    message.getScreenLayout = (object.getScreenLayout !== undefined && object.getScreenLayout !== null)
      ? NetworkAPIV1_APIV1StageRequest_GetScreenLayout.fromPartial(object.getScreenLayout)
      : undefined;
    message.setScreenLayout = (object.setScreenLayout !== undefined && object.setScreenLayout !== null)
      ? NetworkAPIV1_APIV1StageRequest_SetScreenLayout.fromPartial(object.setScreenLayout)
      : undefined;
    message.getLayouts = (object.getLayouts !== undefined && object.getLayouts !== null)
      ? NetworkAPIV1_APIV1StageRequest_GetLayouts.fromPartial(object.getLayouts)
      : undefined;
    message.deleteLayout = (object.deleteLayout !== undefined && object.deleteLayout !== null)
      ? NetworkAPIV1_APIV1StageRequest_DeleteLayout.fromPartial(object.deleteLayout)
      : undefined;
    message.getLayoutThumbnail = (object.getLayoutThumbnail !== undefined && object.getLayoutThumbnail !== null)
      ? NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail.fromPartial(object.getLayoutThumbnail)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest_GetLayoutMap(): NetworkAPIV1_APIV1StageRequest_GetLayoutMap {
  return {};
}

export const NetworkAPIV1_APIV1StageRequest_GetLayoutMap = {
  encode(_: NetworkAPIV1_APIV1StageRequest_GetLayoutMap, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest_GetLayoutMap {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetLayoutMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StageRequest_GetLayoutMap {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StageRequest_GetLayoutMap): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetLayoutMap>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageRequest_GetLayoutMap {
    return NetworkAPIV1_APIV1StageRequest_GetLayoutMap.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetLayoutMap>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StageRequest_GetLayoutMap {
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetLayoutMap();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest_SetLayoutMap(): NetworkAPIV1_APIV1StageRequest_SetLayoutMap {
  return { map: undefined };
}

export const NetworkAPIV1_APIV1StageRequest_SetLayoutMap = {
  encode(message: NetworkAPIV1_APIV1StageRequest_SetLayoutMap, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.map !== undefined) {
      APIV1StageLayoutMap.encode(message.map, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest_SetLayoutMap {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest_SetLayoutMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.map = APIV1StageLayoutMap.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageRequest_SetLayoutMap {
    return { map: isSet(object.map) ? APIV1StageLayoutMap.fromJSON(object.map) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1StageRequest_SetLayoutMap): unknown {
    const obj: any = {};
    message.map !== undefined && (obj.map = message.map ? APIV1StageLayoutMap.toJSON(message.map) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_SetLayoutMap>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageRequest_SetLayoutMap {
    return NetworkAPIV1_APIV1StageRequest_SetLayoutMap.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_SetLayoutMap>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageRequest_SetLayoutMap {
    const message = createBaseNetworkAPIV1_APIV1StageRequest_SetLayoutMap();
    message.map = (object.map !== undefined && object.map !== null)
      ? APIV1StageLayoutMap.fromPartial(object.map)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest_GetMessage(): NetworkAPIV1_APIV1StageRequest_GetMessage {
  return {};
}

export const NetworkAPIV1_APIV1StageRequest_GetMessage = {
  encode(_: NetworkAPIV1_APIV1StageRequest_GetMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest_GetMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StageRequest_GetMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StageRequest_GetMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageRequest_GetMessage {
    return NetworkAPIV1_APIV1StageRequest_GetMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StageRequest_GetMessage {
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest_PutMessage(): NetworkAPIV1_APIV1StageRequest_PutMessage {
  return { message: "" };
}

export const NetworkAPIV1_APIV1StageRequest_PutMessage = {
  encode(message: NetworkAPIV1_APIV1StageRequest_PutMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest_PutMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest_PutMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageRequest_PutMessage {
    return { message: isSet(object.message) ? String(object.message) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1StageRequest_PutMessage): unknown {
    const obj: any = {};
    message.message !== undefined && (obj.message = message.message);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_PutMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageRequest_PutMessage {
    return NetworkAPIV1_APIV1StageRequest_PutMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_PutMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageRequest_PutMessage {
    const message = createBaseNetworkAPIV1_APIV1StageRequest_PutMessage();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest_DeleteMessage(): NetworkAPIV1_APIV1StageRequest_DeleteMessage {
  return {};
}

export const NetworkAPIV1_APIV1StageRequest_DeleteMessage = {
  encode(_: NetworkAPIV1_APIV1StageRequest_DeleteMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest_DeleteMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest_DeleteMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StageRequest_DeleteMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StageRequest_DeleteMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_DeleteMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageRequest_DeleteMessage {
    return NetworkAPIV1_APIV1StageRequest_DeleteMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_DeleteMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StageRequest_DeleteMessage {
    const message = createBaseNetworkAPIV1_APIV1StageRequest_DeleteMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest_GetScreens(): NetworkAPIV1_APIV1StageRequest_GetScreens {
  return {};
}

export const NetworkAPIV1_APIV1StageRequest_GetScreens = {
  encode(_: NetworkAPIV1_APIV1StageRequest_GetScreens, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest_GetScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StageRequest_GetScreens {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StageRequest_GetScreens): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageRequest_GetScreens {
    return NetworkAPIV1_APIV1StageRequest_GetScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetScreens>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StageRequest_GetScreens {
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetScreens();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest_GetScreenLayout(): NetworkAPIV1_APIV1StageRequest_GetScreenLayout {
  return { id: "" };
}

export const NetworkAPIV1_APIV1StageRequest_GetScreenLayout = {
  encode(
    message: NetworkAPIV1_APIV1StageRequest_GetScreenLayout,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest_GetScreenLayout {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetScreenLayout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageRequest_GetScreenLayout {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1StageRequest_GetScreenLayout): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetScreenLayout>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageRequest_GetScreenLayout {
    return NetworkAPIV1_APIV1StageRequest_GetScreenLayout.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetScreenLayout>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageRequest_GetScreenLayout {
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetScreenLayout();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest_SetScreenLayout(): NetworkAPIV1_APIV1StageRequest_SetScreenLayout {
  return { id: "", layout: "" };
}

export const NetworkAPIV1_APIV1StageRequest_SetScreenLayout = {
  encode(
    message: NetworkAPIV1_APIV1StageRequest_SetScreenLayout,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.layout !== "") {
      writer.uint32(18).string(message.layout);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest_SetScreenLayout {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest_SetScreenLayout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.layout = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageRequest_SetScreenLayout {
    return { id: isSet(object.id) ? String(object.id) : "", layout: isSet(object.layout) ? String(object.layout) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1StageRequest_SetScreenLayout): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.layout !== undefined && (obj.layout = message.layout);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_SetScreenLayout>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageRequest_SetScreenLayout {
    return NetworkAPIV1_APIV1StageRequest_SetScreenLayout.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_SetScreenLayout>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageRequest_SetScreenLayout {
    const message = createBaseNetworkAPIV1_APIV1StageRequest_SetScreenLayout();
    message.id = object.id ?? "";
    message.layout = object.layout ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest_GetLayouts(): NetworkAPIV1_APIV1StageRequest_GetLayouts {
  return {};
}

export const NetworkAPIV1_APIV1StageRequest_GetLayouts = {
  encode(_: NetworkAPIV1_APIV1StageRequest_GetLayouts, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest_GetLayouts {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetLayouts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StageRequest_GetLayouts {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StageRequest_GetLayouts): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetLayouts>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageRequest_GetLayouts {
    return NetworkAPIV1_APIV1StageRequest_GetLayouts.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetLayouts>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StageRequest_GetLayouts {
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetLayouts();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest_DeleteLayout(): NetworkAPIV1_APIV1StageRequest_DeleteLayout {
  return { id: "" };
}

export const NetworkAPIV1_APIV1StageRequest_DeleteLayout = {
  encode(message: NetworkAPIV1_APIV1StageRequest_DeleteLayout, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest_DeleteLayout {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest_DeleteLayout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageRequest_DeleteLayout {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1StageRequest_DeleteLayout): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_DeleteLayout>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageRequest_DeleteLayout {
    return NetworkAPIV1_APIV1StageRequest_DeleteLayout.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_DeleteLayout>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageRequest_DeleteLayout {
    const message = createBaseNetworkAPIV1_APIV1StageRequest_DeleteLayout();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail(): NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail {
  return { id: "", quality: 0 };
}

export const NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail = {
  encode(
    message: NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.quality !== 0) {
      writer.uint32(16).int32(message.quality);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.quality = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      quality: isSet(object.quality) ? Number(object.quality) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.quality !== undefined && (obj.quality = Math.round(message.quality));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail {
    return NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail {
    const message = createBaseNetworkAPIV1_APIV1StageRequest_GetLayoutThumbnail();
    message.id = object.id ?? "";
    message.quality = object.quality ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusRequest(): NetworkAPIV1_APIV1StatusRequest {
  return {
    getLayers: undefined,
    getStageScreens: undefined,
    putStageScreens: undefined,
    getAudienceScreens: undefined,
    putAudienceScreens: undefined,
    getScreens: undefined,
    getSlide: undefined,
  };
}

export const NetworkAPIV1_APIV1StatusRequest = {
  encode(message: NetworkAPIV1_APIV1StatusRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.getLayers !== undefined) {
      NetworkAPIV1_APIV1StatusRequest_GetLayers.encode(message.getLayers, writer.uint32(10).fork()).ldelim();
    }
    if (message.getStageScreens !== undefined) {
      NetworkAPIV1_APIV1StatusRequest_GetStageScreens.encode(message.getStageScreens, writer.uint32(18).fork())
        .ldelim();
    }
    if (message.putStageScreens !== undefined) {
      NetworkAPIV1_APIV1StatusRequest_PutStageScreens.encode(message.putStageScreens, writer.uint32(26).fork())
        .ldelim();
    }
    if (message.getAudienceScreens !== undefined) {
      NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens.encode(message.getAudienceScreens, writer.uint32(34).fork())
        .ldelim();
    }
    if (message.putAudienceScreens !== undefined) {
      NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens.encode(message.putAudienceScreens, writer.uint32(42).fork())
        .ldelim();
    }
    if (message.getScreens !== undefined) {
      NetworkAPIV1_APIV1StatusRequest_GetScreens.encode(message.getScreens, writer.uint32(50).fork()).ldelim();
    }
    if (message.getSlide !== undefined) {
      NetworkAPIV1_APIV1StatusRequest_GetSlide.encode(message.getSlide, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.getLayers = NetworkAPIV1_APIV1StatusRequest_GetLayers.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getStageScreens = NetworkAPIV1_APIV1StatusRequest_GetStageScreens.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.putStageScreens = NetworkAPIV1_APIV1StatusRequest_PutStageScreens.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.getAudienceScreens = NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.putAudienceScreens = NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getScreens = NetworkAPIV1_APIV1StatusRequest_GetScreens.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.getSlide = NetworkAPIV1_APIV1StatusRequest_GetSlide.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StatusRequest {
    return {
      getLayers: isSet(object.getLayers)
        ? NetworkAPIV1_APIV1StatusRequest_GetLayers.fromJSON(object.getLayers)
        : undefined,
      getStageScreens: isSet(object.getStageScreens)
        ? NetworkAPIV1_APIV1StatusRequest_GetStageScreens.fromJSON(object.getStageScreens)
        : undefined,
      putStageScreens: isSet(object.putStageScreens)
        ? NetworkAPIV1_APIV1StatusRequest_PutStageScreens.fromJSON(object.putStageScreens)
        : undefined,
      getAudienceScreens: isSet(object.getAudienceScreens)
        ? NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens.fromJSON(object.getAudienceScreens)
        : undefined,
      putAudienceScreens: isSet(object.putAudienceScreens)
        ? NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens.fromJSON(object.putAudienceScreens)
        : undefined,
      getScreens: isSet(object.getScreens)
        ? NetworkAPIV1_APIV1StatusRequest_GetScreens.fromJSON(object.getScreens)
        : undefined,
      getSlide: isSet(object.getSlide) ? NetworkAPIV1_APIV1StatusRequest_GetSlide.fromJSON(object.getSlide) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1StatusRequest): unknown {
    const obj: any = {};
    message.getLayers !== undefined && (obj.getLayers = message.getLayers
      ? NetworkAPIV1_APIV1StatusRequest_GetLayers.toJSON(message.getLayers)
      : undefined);
    message.getStageScreens !== undefined && (obj.getStageScreens = message.getStageScreens
      ? NetworkAPIV1_APIV1StatusRequest_GetStageScreens.toJSON(message.getStageScreens)
      : undefined);
    message.putStageScreens !== undefined && (obj.putStageScreens = message.putStageScreens
      ? NetworkAPIV1_APIV1StatusRequest_PutStageScreens.toJSON(message.putStageScreens)
      : undefined);
    message.getAudienceScreens !== undefined && (obj.getAudienceScreens = message.getAudienceScreens
      ? NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens.toJSON(message.getAudienceScreens)
      : undefined);
    message.putAudienceScreens !== undefined && (obj.putAudienceScreens = message.putAudienceScreens
      ? NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens.toJSON(message.putAudienceScreens)
      : undefined);
    message.getScreens !== undefined && (obj.getScreens = message.getScreens
      ? NetworkAPIV1_APIV1StatusRequest_GetScreens.toJSON(message.getScreens)
      : undefined);
    message.getSlide !== undefined &&
      (obj.getSlide = message.getSlide ? NetworkAPIV1_APIV1StatusRequest_GetSlide.toJSON(message.getSlide) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest>, I>>(base?: I): NetworkAPIV1_APIV1StatusRequest {
    return NetworkAPIV1_APIV1StatusRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StatusRequest {
    const message = createBaseNetworkAPIV1_APIV1StatusRequest();
    message.getLayers = (object.getLayers !== undefined && object.getLayers !== null)
      ? NetworkAPIV1_APIV1StatusRequest_GetLayers.fromPartial(object.getLayers)
      : undefined;
    message.getStageScreens = (object.getStageScreens !== undefined && object.getStageScreens !== null)
      ? NetworkAPIV1_APIV1StatusRequest_GetStageScreens.fromPartial(object.getStageScreens)
      : undefined;
    message.putStageScreens = (object.putStageScreens !== undefined && object.putStageScreens !== null)
      ? NetworkAPIV1_APIV1StatusRequest_PutStageScreens.fromPartial(object.putStageScreens)
      : undefined;
    message.getAudienceScreens = (object.getAudienceScreens !== undefined && object.getAudienceScreens !== null)
      ? NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens.fromPartial(object.getAudienceScreens)
      : undefined;
    message.putAudienceScreens = (object.putAudienceScreens !== undefined && object.putAudienceScreens !== null)
      ? NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens.fromPartial(object.putAudienceScreens)
      : undefined;
    message.getScreens = (object.getScreens !== undefined && object.getScreens !== null)
      ? NetworkAPIV1_APIV1StatusRequest_GetScreens.fromPartial(object.getScreens)
      : undefined;
    message.getSlide = (object.getSlide !== undefined && object.getSlide !== null)
      ? NetworkAPIV1_APIV1StatusRequest_GetSlide.fromPartial(object.getSlide)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusRequest_GetLayers(): NetworkAPIV1_APIV1StatusRequest_GetLayers {
  return {};
}

export const NetworkAPIV1_APIV1StatusRequest_GetLayers = {
  encode(_: NetworkAPIV1_APIV1StatusRequest_GetLayers, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusRequest_GetLayers {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_GetLayers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StatusRequest_GetLayers {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StatusRequest_GetLayers): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_GetLayers>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusRequest_GetLayers {
    return NetworkAPIV1_APIV1StatusRequest_GetLayers.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_GetLayers>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StatusRequest_GetLayers {
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_GetLayers();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusRequest_GetStageScreens(): NetworkAPIV1_APIV1StatusRequest_GetStageScreens {
  return {};
}

export const NetworkAPIV1_APIV1StatusRequest_GetStageScreens = {
  encode(_: NetworkAPIV1_APIV1StatusRequest_GetStageScreens, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusRequest_GetStageScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_GetStageScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StatusRequest_GetStageScreens {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StatusRequest_GetStageScreens): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_GetStageScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusRequest_GetStageScreens {
    return NetworkAPIV1_APIV1StatusRequest_GetStageScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_GetStageScreens>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StatusRequest_GetStageScreens {
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_GetStageScreens();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusRequest_PutStageScreens(): NetworkAPIV1_APIV1StatusRequest_PutStageScreens {
  return { enabled: false };
}

export const NetworkAPIV1_APIV1StatusRequest_PutStageScreens = {
  encode(
    message: NetworkAPIV1_APIV1StatusRequest_PutStageScreens,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.enabled === true) {
      writer.uint32(8).bool(message.enabled);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusRequest_PutStageScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_PutStageScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StatusRequest_PutStageScreens {
    return { enabled: isSet(object.enabled) ? Boolean(object.enabled) : false };
  },

  toJSON(message: NetworkAPIV1_APIV1StatusRequest_PutStageScreens): unknown {
    const obj: any = {};
    message.enabled !== undefined && (obj.enabled = message.enabled);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_PutStageScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusRequest_PutStageScreens {
    return NetworkAPIV1_APIV1StatusRequest_PutStageScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_PutStageScreens>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StatusRequest_PutStageScreens {
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_PutStageScreens();
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusRequest_GetAudienceScreens(): NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens {
  return {};
}

export const NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens = {
  encode(_: NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_GetAudienceScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens {
    return NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StatusRequest_GetAudienceScreens {
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_GetAudienceScreens();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusRequest_PutAudienceScreens(): NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens {
  return { enabled: false };
}

export const NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens = {
  encode(
    message: NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.enabled === true) {
      writer.uint32(8).bool(message.enabled);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_PutAudienceScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens {
    return { enabled: isSet(object.enabled) ? Boolean(object.enabled) : false };
  },

  toJSON(message: NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens): unknown {
    const obj: any = {};
    message.enabled !== undefined && (obj.enabled = message.enabled);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens {
    return NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StatusRequest_PutAudienceScreens {
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_PutAudienceScreens();
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusRequest_GetScreens(): NetworkAPIV1_APIV1StatusRequest_GetScreens {
  return {};
}

export const NetworkAPIV1_APIV1StatusRequest_GetScreens = {
  encode(_: NetworkAPIV1_APIV1StatusRequest_GetScreens, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusRequest_GetScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_GetScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StatusRequest_GetScreens {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StatusRequest_GetScreens): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_GetScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusRequest_GetScreens {
    return NetworkAPIV1_APIV1StatusRequest_GetScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_GetScreens>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StatusRequest_GetScreens {
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_GetScreens();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusRequest_GetSlide(): NetworkAPIV1_APIV1StatusRequest_GetSlide {
  return {};
}

export const NetworkAPIV1_APIV1StatusRequest_GetSlide = {
  encode(_: NetworkAPIV1_APIV1StatusRequest_GetSlide, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusRequest_GetSlide {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_GetSlide();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StatusRequest_GetSlide {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StatusRequest_GetSlide): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_GetSlide>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusRequest_GetSlide {
    return NetworkAPIV1_APIV1StatusRequest_GetSlide.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusRequest_GetSlide>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StatusRequest_GetSlide {
    const message = createBaseNetworkAPIV1_APIV1StatusRequest_GetSlide();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeRequest(): NetworkAPIV1_APIV1ThemeRequest {
  return {
    getAll: undefined,
    getTheme: undefined,
    deleteTheme: undefined,
    getThemeName: undefined,
    putThemeName: undefined,
    getThemeSlide: undefined,
    putThemeSlide: undefined,
    deleteThemeSlide: undefined,
    getThemeSlideThumbnail: undefined,
  };
}

export const NetworkAPIV1_APIV1ThemeRequest = {
  encode(message: NetworkAPIV1_APIV1ThemeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.getAll !== undefined) {
      NetworkAPIV1_APIV1ThemeRequest_GetAll.encode(message.getAll, writer.uint32(10).fork()).ldelim();
    }
    if (message.getTheme !== undefined) {
      NetworkAPIV1_APIV1ThemeRequest_GetTheme.encode(message.getTheme, writer.uint32(18).fork()).ldelim();
    }
    if (message.deleteTheme !== undefined) {
      NetworkAPIV1_APIV1ThemeRequest_DeleteTheme.encode(message.deleteTheme, writer.uint32(26).fork()).ldelim();
    }
    if (message.getThemeName !== undefined) {
      NetworkAPIV1_APIV1ThemeRequest_GetThemeName.encode(message.getThemeName, writer.uint32(34).fork()).ldelim();
    }
    if (message.putThemeName !== undefined) {
      NetworkAPIV1_APIV1ThemeRequest_PutThemeName.encode(message.putThemeName, writer.uint32(42).fork()).ldelim();
    }
    if (message.getThemeSlide !== undefined) {
      NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide.encode(message.getThemeSlide, writer.uint32(50).fork()).ldelim();
    }
    if (message.putThemeSlide !== undefined) {
      NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide.encode(message.putThemeSlide, writer.uint32(58).fork()).ldelim();
    }
    if (message.deleteThemeSlide !== undefined) {
      NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide.encode(message.deleteThemeSlide, writer.uint32(66).fork())
        .ldelim();
    }
    if (message.getThemeSlideThumbnail !== undefined) {
      NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail.encode(
        message.getThemeSlideThumbnail,
        writer.uint32(74).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.getAll = NetworkAPIV1_APIV1ThemeRequest_GetAll.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getTheme = NetworkAPIV1_APIV1ThemeRequest_GetTheme.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.deleteTheme = NetworkAPIV1_APIV1ThemeRequest_DeleteTheme.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.getThemeName = NetworkAPIV1_APIV1ThemeRequest_GetThemeName.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.putThemeName = NetworkAPIV1_APIV1ThemeRequest_PutThemeName.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getThemeSlide = NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.putThemeSlide = NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.deleteThemeSlide = NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.getThemeSlideThumbnail = NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeRequest {
    return {
      getAll: isSet(object.getAll) ? NetworkAPIV1_APIV1ThemeRequest_GetAll.fromJSON(object.getAll) : undefined,
      getTheme: isSet(object.getTheme) ? NetworkAPIV1_APIV1ThemeRequest_GetTheme.fromJSON(object.getTheme) : undefined,
      deleteTheme: isSet(object.deleteTheme)
        ? NetworkAPIV1_APIV1ThemeRequest_DeleteTheme.fromJSON(object.deleteTheme)
        : undefined,
      getThemeName: isSet(object.getThemeName)
        ? NetworkAPIV1_APIV1ThemeRequest_GetThemeName.fromJSON(object.getThemeName)
        : undefined,
      putThemeName: isSet(object.putThemeName)
        ? NetworkAPIV1_APIV1ThemeRequest_PutThemeName.fromJSON(object.putThemeName)
        : undefined,
      getThemeSlide: isSet(object.getThemeSlide)
        ? NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide.fromJSON(object.getThemeSlide)
        : undefined,
      putThemeSlide: isSet(object.putThemeSlide)
        ? NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide.fromJSON(object.putThemeSlide)
        : undefined,
      deleteThemeSlide: isSet(object.deleteThemeSlide)
        ? NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide.fromJSON(object.deleteThemeSlide)
        : undefined,
      getThemeSlideThumbnail: isSet(object.getThemeSlideThumbnail)
        ? NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail.fromJSON(object.getThemeSlideThumbnail)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeRequest): unknown {
    const obj: any = {};
    message.getAll !== undefined &&
      (obj.getAll = message.getAll ? NetworkAPIV1_APIV1ThemeRequest_GetAll.toJSON(message.getAll) : undefined);
    message.getTheme !== undefined &&
      (obj.getTheme = message.getTheme ? NetworkAPIV1_APIV1ThemeRequest_GetTheme.toJSON(message.getTheme) : undefined);
    message.deleteTheme !== undefined && (obj.deleteTheme = message.deleteTheme
      ? NetworkAPIV1_APIV1ThemeRequest_DeleteTheme.toJSON(message.deleteTheme)
      : undefined);
    message.getThemeName !== undefined && (obj.getThemeName = message.getThemeName
      ? NetworkAPIV1_APIV1ThemeRequest_GetThemeName.toJSON(message.getThemeName)
      : undefined);
    message.putThemeName !== undefined && (obj.putThemeName = message.putThemeName
      ? NetworkAPIV1_APIV1ThemeRequest_PutThemeName.toJSON(message.putThemeName)
      : undefined);
    message.getThemeSlide !== undefined && (obj.getThemeSlide = message.getThemeSlide
      ? NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide.toJSON(message.getThemeSlide)
      : undefined);
    message.putThemeSlide !== undefined && (obj.putThemeSlide = message.putThemeSlide
      ? NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide.toJSON(message.putThemeSlide)
      : undefined);
    message.deleteThemeSlide !== undefined && (obj.deleteThemeSlide = message.deleteThemeSlide
      ? NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide.toJSON(message.deleteThemeSlide)
      : undefined);
    message.getThemeSlideThumbnail !== undefined && (obj.getThemeSlideThumbnail = message.getThemeSlideThumbnail
      ? NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail.toJSON(message.getThemeSlideThumbnail)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest>, I>>(base?: I): NetworkAPIV1_APIV1ThemeRequest {
    return NetworkAPIV1_APIV1ThemeRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeRequest {
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest();
    message.getAll = (object.getAll !== undefined && object.getAll !== null)
      ? NetworkAPIV1_APIV1ThemeRequest_GetAll.fromPartial(object.getAll)
      : undefined;
    message.getTheme = (object.getTheme !== undefined && object.getTheme !== null)
      ? NetworkAPIV1_APIV1ThemeRequest_GetTheme.fromPartial(object.getTheme)
      : undefined;
    message.deleteTheme = (object.deleteTheme !== undefined && object.deleteTheme !== null)
      ? NetworkAPIV1_APIV1ThemeRequest_DeleteTheme.fromPartial(object.deleteTheme)
      : undefined;
    message.getThemeName = (object.getThemeName !== undefined && object.getThemeName !== null)
      ? NetworkAPIV1_APIV1ThemeRequest_GetThemeName.fromPartial(object.getThemeName)
      : undefined;
    message.putThemeName = (object.putThemeName !== undefined && object.putThemeName !== null)
      ? NetworkAPIV1_APIV1ThemeRequest_PutThemeName.fromPartial(object.putThemeName)
      : undefined;
    message.getThemeSlide = (object.getThemeSlide !== undefined && object.getThemeSlide !== null)
      ? NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide.fromPartial(object.getThemeSlide)
      : undefined;
    message.putThemeSlide = (object.putThemeSlide !== undefined && object.putThemeSlide !== null)
      ? NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide.fromPartial(object.putThemeSlide)
      : undefined;
    message.deleteThemeSlide = (object.deleteThemeSlide !== undefined && object.deleteThemeSlide !== null)
      ? NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide.fromPartial(object.deleteThemeSlide)
      : undefined;
    message.getThemeSlideThumbnail =
      (object.getThemeSlideThumbnail !== undefined && object.getThemeSlideThumbnail !== null)
        ? NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail.fromPartial(object.getThemeSlideThumbnail)
        : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeRequest_GetAll(): NetworkAPIV1_APIV1ThemeRequest_GetAll {
  return {};
}

export const NetworkAPIV1_APIV1ThemeRequest_GetAll = {
  encode(_: NetworkAPIV1_APIV1ThemeRequest_GetAll, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeRequest_GetAll {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_GetAll();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1ThemeRequest_GetAll {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1ThemeRequest_GetAll): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_GetAll>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeRequest_GetAll {
    return NetworkAPIV1_APIV1ThemeRequest_GetAll.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_GetAll>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1ThemeRequest_GetAll {
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_GetAll();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeRequest_GetTheme(): NetworkAPIV1_APIV1ThemeRequest_GetTheme {
  return { id: "" };
}

export const NetworkAPIV1_APIV1ThemeRequest_GetTheme = {
  encode(message: NetworkAPIV1_APIV1ThemeRequest_GetTheme, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeRequest_GetTheme {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_GetTheme();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeRequest_GetTheme {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeRequest_GetTheme): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_GetTheme>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeRequest_GetTheme {
    return NetworkAPIV1_APIV1ThemeRequest_GetTheme.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_GetTheme>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeRequest_GetTheme {
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_GetTheme();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeRequest_DeleteTheme(): NetworkAPIV1_APIV1ThemeRequest_DeleteTheme {
  return { id: "" };
}

export const NetworkAPIV1_APIV1ThemeRequest_DeleteTheme = {
  encode(message: NetworkAPIV1_APIV1ThemeRequest_DeleteTheme, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeRequest_DeleteTheme {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_DeleteTheme();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeRequest_DeleteTheme {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeRequest_DeleteTheme): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_DeleteTheme>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeRequest_DeleteTheme {
    return NetworkAPIV1_APIV1ThemeRequest_DeleteTheme.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_DeleteTheme>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeRequest_DeleteTheme {
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_DeleteTheme();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeRequest_GetThemeName(): NetworkAPIV1_APIV1ThemeRequest_GetThemeName {
  return { id: "" };
}

export const NetworkAPIV1_APIV1ThemeRequest_GetThemeName = {
  encode(message: NetworkAPIV1_APIV1ThemeRequest_GetThemeName, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeRequest_GetThemeName {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_GetThemeName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeRequest_GetThemeName {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeRequest_GetThemeName): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_GetThemeName>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeRequest_GetThemeName {
    return NetworkAPIV1_APIV1ThemeRequest_GetThemeName.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_GetThemeName>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeRequest_GetThemeName {
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_GetThemeName();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeRequest_PutThemeName(): NetworkAPIV1_APIV1ThemeRequest_PutThemeName {
  return { id: "", name: "" };
}

export const NetworkAPIV1_APIV1ThemeRequest_PutThemeName = {
  encode(message: NetworkAPIV1_APIV1ThemeRequest_PutThemeName, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeRequest_PutThemeName {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_PutThemeName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeRequest_PutThemeName {
    return { id: isSet(object.id) ? String(object.id) : "", name: isSet(object.name) ? String(object.name) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeRequest_PutThemeName): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.name !== undefined && (obj.name = message.name);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_PutThemeName>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeRequest_PutThemeName {
    return NetworkAPIV1_APIV1ThemeRequest_PutThemeName.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_PutThemeName>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeRequest_PutThemeName {
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_PutThemeName();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeRequest_GetThemeSlide(): NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide {
  return { id: "", themeSlide: "" };
}

export const NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide = {
  encode(message: NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.themeSlide !== "") {
      writer.uint32(18).string(message.themeSlide);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_GetThemeSlide();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.themeSlide = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      themeSlide: isSet(object.themeSlide) ? String(object.themeSlide) : "",
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.themeSlide !== undefined && (obj.themeSlide = message.themeSlide);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide {
    return NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeRequest_GetThemeSlide {
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_GetThemeSlide();
    message.id = object.id ?? "";
    message.themeSlide = object.themeSlide ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeRequest_PutThemeSlide(): NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide {
  return { id: "", themeSlide: "", slide: undefined };
}

export const NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide = {
  encode(message: NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.themeSlide !== "") {
      writer.uint32(18).string(message.themeSlide);
    }
    if (message.slide !== undefined) {
      APIV1ThemeSlide.encode(message.slide, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_PutThemeSlide();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.themeSlide = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.slide = APIV1ThemeSlide.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      themeSlide: isSet(object.themeSlide) ? String(object.themeSlide) : "",
      slide: isSet(object.slide) ? APIV1ThemeSlide.fromJSON(object.slide) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.themeSlide !== undefined && (obj.themeSlide = message.themeSlide);
    message.slide !== undefined && (obj.slide = message.slide ? APIV1ThemeSlide.toJSON(message.slide) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide {
    return NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeRequest_PutThemeSlide {
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_PutThemeSlide();
    message.id = object.id ?? "";
    message.themeSlide = object.themeSlide ?? "";
    message.slide = (object.slide !== undefined && object.slide !== null)
      ? APIV1ThemeSlide.fromPartial(object.slide)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide(): NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide {
  return { id: "", themeSlide: "" };
}

export const NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide = {
  encode(
    message: NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.themeSlide !== "") {
      writer.uint32(18).string(message.themeSlide);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.themeSlide = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      themeSlide: isSet(object.themeSlide) ? String(object.themeSlide) : "",
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.themeSlide !== undefined && (obj.themeSlide = message.themeSlide);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide {
    return NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide {
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_DeleteThemeSlide();
    message.id = object.id ?? "";
    message.themeSlide = object.themeSlide ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail(): NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail {
  return { id: "", themeSlide: "", quality: 0 };
}

export const NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail = {
  encode(
    message: NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.themeSlide !== "") {
      writer.uint32(18).string(message.themeSlide);
    }
    if (message.quality !== 0) {
      writer.uint32(24).int32(message.quality);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.themeSlide = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.quality = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      themeSlide: isSet(object.themeSlide) ? String(object.themeSlide) : "",
      quality: isSet(object.quality) ? Number(object.quality) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.themeSlide !== undefined && (obj.themeSlide = message.themeSlide);
    message.quality !== undefined && (obj.quality = Math.round(message.quality));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail {
    return NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail {
    const message = createBaseNetworkAPIV1_APIV1ThemeRequest_GetThemeSlideThumbnail();
    message.id = object.id ?? "";
    message.themeSlide = object.themeSlide ?? "";
    message.quality = object.quality ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerRequest(): NetworkAPIV1_APIV1TimerRequest {
  return {
    timers: undefined,
    createTimer: undefined,
    currentTimes: undefined,
    allTimersOperation: undefined,
    getTimer: undefined,
    putTimer: undefined,
    deleteTimer: undefined,
    timerOperation: undefined,
    systemTime: undefined,
    videoCountdown: undefined,
  };
}

export const NetworkAPIV1_APIV1TimerRequest = {
  encode(message: NetworkAPIV1_APIV1TimerRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.timers !== undefined) {
      NetworkAPIV1_APIV1TimerRequest_Timers.encode(message.timers, writer.uint32(10).fork()).ldelim();
    }
    if (message.createTimer !== undefined) {
      NetworkAPIV1_APIV1TimerRequest_CreateTimer.encode(message.createTimer, writer.uint32(18).fork()).ldelim();
    }
    if (message.currentTimes !== undefined) {
      NetworkAPIV1_APIV1TimerRequest_CurrentTimes.encode(message.currentTimes, writer.uint32(26).fork()).ldelim();
    }
    if (message.allTimersOperation !== undefined) {
      NetworkAPIV1_APIV1TimerRequest_AllTimersOperation.encode(message.allTimersOperation, writer.uint32(34).fork())
        .ldelim();
    }
    if (message.getTimer !== undefined) {
      NetworkAPIV1_APIV1TimerRequest_GetTimer.encode(message.getTimer, writer.uint32(42).fork()).ldelim();
    }
    if (message.putTimer !== undefined) {
      NetworkAPIV1_APIV1TimerRequest_PutTimer.encode(message.putTimer, writer.uint32(50).fork()).ldelim();
    }
    if (message.deleteTimer !== undefined) {
      NetworkAPIV1_APIV1TimerRequest_DeleteTimer.encode(message.deleteTimer, writer.uint32(58).fork()).ldelim();
    }
    if (message.timerOperation !== undefined) {
      NetworkAPIV1_APIV1TimerRequest_TimerOperation.encode(message.timerOperation, writer.uint32(66).fork()).ldelim();
    }
    if (message.systemTime !== undefined) {
      NetworkAPIV1_APIV1TimerRequest_SystemTime.encode(message.systemTime, writer.uint32(74).fork()).ldelim();
    }
    if (message.videoCountdown !== undefined) {
      NetworkAPIV1_APIV1TimerRequest_VideoCountdown.encode(message.videoCountdown, writer.uint32(82).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.timers = NetworkAPIV1_APIV1TimerRequest_Timers.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.createTimer = NetworkAPIV1_APIV1TimerRequest_CreateTimer.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.currentTimes = NetworkAPIV1_APIV1TimerRequest_CurrentTimes.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.allTimersOperation = NetworkAPIV1_APIV1TimerRequest_AllTimersOperation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.getTimer = NetworkAPIV1_APIV1TimerRequest_GetTimer.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.putTimer = NetworkAPIV1_APIV1TimerRequest_PutTimer.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.deleteTimer = NetworkAPIV1_APIV1TimerRequest_DeleteTimer.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.timerOperation = NetworkAPIV1_APIV1TimerRequest_TimerOperation.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.systemTime = NetworkAPIV1_APIV1TimerRequest_SystemTime.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.videoCountdown = NetworkAPIV1_APIV1TimerRequest_VideoCountdown.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerRequest {
    return {
      timers: isSet(object.timers) ? NetworkAPIV1_APIV1TimerRequest_Timers.fromJSON(object.timers) : undefined,
      createTimer: isSet(object.createTimer)
        ? NetworkAPIV1_APIV1TimerRequest_CreateTimer.fromJSON(object.createTimer)
        : undefined,
      currentTimes: isSet(object.currentTimes)
        ? NetworkAPIV1_APIV1TimerRequest_CurrentTimes.fromJSON(object.currentTimes)
        : undefined,
      allTimersOperation: isSet(object.allTimersOperation)
        ? NetworkAPIV1_APIV1TimerRequest_AllTimersOperation.fromJSON(object.allTimersOperation)
        : undefined,
      getTimer: isSet(object.getTimer) ? NetworkAPIV1_APIV1TimerRequest_GetTimer.fromJSON(object.getTimer) : undefined,
      putTimer: isSet(object.putTimer) ? NetworkAPIV1_APIV1TimerRequest_PutTimer.fromJSON(object.putTimer) : undefined,
      deleteTimer: isSet(object.deleteTimer)
        ? NetworkAPIV1_APIV1TimerRequest_DeleteTimer.fromJSON(object.deleteTimer)
        : undefined,
      timerOperation: isSet(object.timerOperation)
        ? NetworkAPIV1_APIV1TimerRequest_TimerOperation.fromJSON(object.timerOperation)
        : undefined,
      systemTime: isSet(object.systemTime)
        ? NetworkAPIV1_APIV1TimerRequest_SystemTime.fromJSON(object.systemTime)
        : undefined,
      videoCountdown: isSet(object.videoCountdown)
        ? NetworkAPIV1_APIV1TimerRequest_VideoCountdown.fromJSON(object.videoCountdown)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerRequest): unknown {
    const obj: any = {};
    message.timers !== undefined &&
      (obj.timers = message.timers ? NetworkAPIV1_APIV1TimerRequest_Timers.toJSON(message.timers) : undefined);
    message.createTimer !== undefined && (obj.createTimer = message.createTimer
      ? NetworkAPIV1_APIV1TimerRequest_CreateTimer.toJSON(message.createTimer)
      : undefined);
    message.currentTimes !== undefined && (obj.currentTimes = message.currentTimes
      ? NetworkAPIV1_APIV1TimerRequest_CurrentTimes.toJSON(message.currentTimes)
      : undefined);
    message.allTimersOperation !== undefined && (obj.allTimersOperation = message.allTimersOperation
      ? NetworkAPIV1_APIV1TimerRequest_AllTimersOperation.toJSON(message.allTimersOperation)
      : undefined);
    message.getTimer !== undefined &&
      (obj.getTimer = message.getTimer ? NetworkAPIV1_APIV1TimerRequest_GetTimer.toJSON(message.getTimer) : undefined);
    message.putTimer !== undefined &&
      (obj.putTimer = message.putTimer ? NetworkAPIV1_APIV1TimerRequest_PutTimer.toJSON(message.putTimer) : undefined);
    message.deleteTimer !== undefined && (obj.deleteTimer = message.deleteTimer
      ? NetworkAPIV1_APIV1TimerRequest_DeleteTimer.toJSON(message.deleteTimer)
      : undefined);
    message.timerOperation !== undefined && (obj.timerOperation = message.timerOperation
      ? NetworkAPIV1_APIV1TimerRequest_TimerOperation.toJSON(message.timerOperation)
      : undefined);
    message.systemTime !== undefined && (obj.systemTime = message.systemTime
      ? NetworkAPIV1_APIV1TimerRequest_SystemTime.toJSON(message.systemTime)
      : undefined);
    message.videoCountdown !== undefined && (obj.videoCountdown = message.videoCountdown
      ? NetworkAPIV1_APIV1TimerRequest_VideoCountdown.toJSON(message.videoCountdown)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest>, I>>(base?: I): NetworkAPIV1_APIV1TimerRequest {
    return NetworkAPIV1_APIV1TimerRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerRequest {
    const message = createBaseNetworkAPIV1_APIV1TimerRequest();
    message.timers = (object.timers !== undefined && object.timers !== null)
      ? NetworkAPIV1_APIV1TimerRequest_Timers.fromPartial(object.timers)
      : undefined;
    message.createTimer = (object.createTimer !== undefined && object.createTimer !== null)
      ? NetworkAPIV1_APIV1TimerRequest_CreateTimer.fromPartial(object.createTimer)
      : undefined;
    message.currentTimes = (object.currentTimes !== undefined && object.currentTimes !== null)
      ? NetworkAPIV1_APIV1TimerRequest_CurrentTimes.fromPartial(object.currentTimes)
      : undefined;
    message.allTimersOperation = (object.allTimersOperation !== undefined && object.allTimersOperation !== null)
      ? NetworkAPIV1_APIV1TimerRequest_AllTimersOperation.fromPartial(object.allTimersOperation)
      : undefined;
    message.getTimer = (object.getTimer !== undefined && object.getTimer !== null)
      ? NetworkAPIV1_APIV1TimerRequest_GetTimer.fromPartial(object.getTimer)
      : undefined;
    message.putTimer = (object.putTimer !== undefined && object.putTimer !== null)
      ? NetworkAPIV1_APIV1TimerRequest_PutTimer.fromPartial(object.putTimer)
      : undefined;
    message.deleteTimer = (object.deleteTimer !== undefined && object.deleteTimer !== null)
      ? NetworkAPIV1_APIV1TimerRequest_DeleteTimer.fromPartial(object.deleteTimer)
      : undefined;
    message.timerOperation = (object.timerOperation !== undefined && object.timerOperation !== null)
      ? NetworkAPIV1_APIV1TimerRequest_TimerOperation.fromPartial(object.timerOperation)
      : undefined;
    message.systemTime = (object.systemTime !== undefined && object.systemTime !== null)
      ? NetworkAPIV1_APIV1TimerRequest_SystemTime.fromPartial(object.systemTime)
      : undefined;
    message.videoCountdown = (object.videoCountdown !== undefined && object.videoCountdown !== null)
      ? NetworkAPIV1_APIV1TimerRequest_VideoCountdown.fromPartial(object.videoCountdown)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerRequest_Timers(): NetworkAPIV1_APIV1TimerRequest_Timers {
  return {};
}

export const NetworkAPIV1_APIV1TimerRequest_Timers = {
  encode(_: NetworkAPIV1_APIV1TimerRequest_Timers, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerRequest_Timers {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_Timers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TimerRequest_Timers {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TimerRequest_Timers): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_Timers>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerRequest_Timers {
    return NetworkAPIV1_APIV1TimerRequest_Timers.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_Timers>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TimerRequest_Timers {
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_Timers();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerRequest_CreateTimer(): NetworkAPIV1_APIV1TimerRequest_CreateTimer {
  return { name: "", allowsOverrun: false, countdown: undefined, countDownToTime: undefined, elapsed: undefined };
}

export const NetworkAPIV1_APIV1TimerRequest_CreateTimer = {
  encode(message: NetworkAPIV1_APIV1TimerRequest_CreateTimer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.allowsOverrun === true) {
      writer.uint32(16).bool(message.allowsOverrun);
    }
    if (message.countdown !== undefined) {
      APIV1Timer_APIV1TimerCountdown.encode(message.countdown, writer.uint32(26).fork()).ldelim();
    }
    if (message.countDownToTime !== undefined) {
      APIV1Timer_APIV1TimerCountdownToTime.encode(message.countDownToTime, writer.uint32(34).fork()).ldelim();
    }
    if (message.elapsed !== undefined) {
      APIV1Timer_APIV1TimerElapsed.encode(message.elapsed, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerRequest_CreateTimer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_CreateTimer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.allowsOverrun = reader.bool();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.countdown = APIV1Timer_APIV1TimerCountdown.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.countDownToTime = APIV1Timer_APIV1TimerCountdownToTime.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.elapsed = APIV1Timer_APIV1TimerElapsed.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerRequest_CreateTimer {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      allowsOverrun: isSet(object.allowsOverrun) ? Boolean(object.allowsOverrun) : false,
      countdown: isSet(object.countdown) ? APIV1Timer_APIV1TimerCountdown.fromJSON(object.countdown) : undefined,
      countDownToTime: isSet(object.countDownToTime)
        ? APIV1Timer_APIV1TimerCountdownToTime.fromJSON(object.countDownToTime)
        : undefined,
      elapsed: isSet(object.elapsed) ? APIV1Timer_APIV1TimerElapsed.fromJSON(object.elapsed) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerRequest_CreateTimer): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.allowsOverrun !== undefined && (obj.allowsOverrun = message.allowsOverrun);
    message.countdown !== undefined &&
      (obj.countdown = message.countdown ? APIV1Timer_APIV1TimerCountdown.toJSON(message.countdown) : undefined);
    message.countDownToTime !== undefined && (obj.countDownToTime = message.countDownToTime
      ? APIV1Timer_APIV1TimerCountdownToTime.toJSON(message.countDownToTime)
      : undefined);
    message.elapsed !== undefined &&
      (obj.elapsed = message.elapsed ? APIV1Timer_APIV1TimerElapsed.toJSON(message.elapsed) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_CreateTimer>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerRequest_CreateTimer {
    return NetworkAPIV1_APIV1TimerRequest_CreateTimer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_CreateTimer>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerRequest_CreateTimer {
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_CreateTimer();
    message.name = object.name ?? "";
    message.allowsOverrun = object.allowsOverrun ?? false;
    message.countdown = (object.countdown !== undefined && object.countdown !== null)
      ? APIV1Timer_APIV1TimerCountdown.fromPartial(object.countdown)
      : undefined;
    message.countDownToTime = (object.countDownToTime !== undefined && object.countDownToTime !== null)
      ? APIV1Timer_APIV1TimerCountdownToTime.fromPartial(object.countDownToTime)
      : undefined;
    message.elapsed = (object.elapsed !== undefined && object.elapsed !== null)
      ? APIV1Timer_APIV1TimerElapsed.fromPartial(object.elapsed)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerRequest_CurrentTimes(): NetworkAPIV1_APIV1TimerRequest_CurrentTimes {
  return {};
}

export const NetworkAPIV1_APIV1TimerRequest_CurrentTimes = {
  encode(_: NetworkAPIV1_APIV1TimerRequest_CurrentTimes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerRequest_CurrentTimes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_CurrentTimes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TimerRequest_CurrentTimes {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TimerRequest_CurrentTimes): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_CurrentTimes>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerRequest_CurrentTimes {
    return NetworkAPIV1_APIV1TimerRequest_CurrentTimes.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_CurrentTimes>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TimerRequest_CurrentTimes {
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_CurrentTimes();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerRequest_AllTimersOperation(): NetworkAPIV1_APIV1TimerRequest_AllTimersOperation {
  return { operation: 0 };
}

export const NetworkAPIV1_APIV1TimerRequest_AllTimersOperation = {
  encode(
    message: NetworkAPIV1_APIV1TimerRequest_AllTimersOperation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.operation !== 0) {
      writer.uint32(8).int32(message.operation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerRequest_AllTimersOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_AllTimersOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.operation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerRequest_AllTimersOperation {
    return {
      operation: isSet(object.operation)
        ? networkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperationFromJSON(object.operation)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerRequest_AllTimersOperation): unknown {
    const obj: any = {};
    message.operation !== undefined &&
      (obj.operation = networkAPIV1_APIV1TimerRequest_AllTimersOperation_APIV1TimerOperationToJSON(message.operation));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_AllTimersOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerRequest_AllTimersOperation {
    return NetworkAPIV1_APIV1TimerRequest_AllTimersOperation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_AllTimersOperation>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerRequest_AllTimersOperation {
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_AllTimersOperation();
    message.operation = object.operation ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerRequest_GetTimer(): NetworkAPIV1_APIV1TimerRequest_GetTimer {
  return { id: "" };
}

export const NetworkAPIV1_APIV1TimerRequest_GetTimer = {
  encode(message: NetworkAPIV1_APIV1TimerRequest_GetTimer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerRequest_GetTimer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_GetTimer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerRequest_GetTimer {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerRequest_GetTimer): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_GetTimer>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerRequest_GetTimer {
    return NetworkAPIV1_APIV1TimerRequest_GetTimer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_GetTimer>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerRequest_GetTimer {
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_GetTimer();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerRequest_PutTimer(): NetworkAPIV1_APIV1TimerRequest_PutTimer {
  return { id: "", timer: undefined };
}

export const NetworkAPIV1_APIV1TimerRequest_PutTimer = {
  encode(message: NetworkAPIV1_APIV1TimerRequest_PutTimer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.timer !== undefined) {
      APIV1Timer.encode(message.timer, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerRequest_PutTimer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_PutTimer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.timer = APIV1Timer.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerRequest_PutTimer {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      timer: isSet(object.timer) ? APIV1Timer.fromJSON(object.timer) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerRequest_PutTimer): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.timer !== undefined && (obj.timer = message.timer ? APIV1Timer.toJSON(message.timer) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_PutTimer>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerRequest_PutTimer {
    return NetworkAPIV1_APIV1TimerRequest_PutTimer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_PutTimer>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerRequest_PutTimer {
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_PutTimer();
    message.id = object.id ?? "";
    message.timer = (object.timer !== undefined && object.timer !== null)
      ? APIV1Timer.fromPartial(object.timer)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerRequest_DeleteTimer(): NetworkAPIV1_APIV1TimerRequest_DeleteTimer {
  return { id: "" };
}

export const NetworkAPIV1_APIV1TimerRequest_DeleteTimer = {
  encode(message: NetworkAPIV1_APIV1TimerRequest_DeleteTimer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerRequest_DeleteTimer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_DeleteTimer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerRequest_DeleteTimer {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerRequest_DeleteTimer): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_DeleteTimer>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerRequest_DeleteTimer {
    return NetworkAPIV1_APIV1TimerRequest_DeleteTimer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_DeleteTimer>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerRequest_DeleteTimer {
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_DeleteTimer();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerRequest_TimerOperation(): NetworkAPIV1_APIV1TimerRequest_TimerOperation {
  return { id: "", operation: 0 };
}

export const NetworkAPIV1_APIV1TimerRequest_TimerOperation = {
  encode(message: NetworkAPIV1_APIV1TimerRequest_TimerOperation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.operation !== 0) {
      writer.uint32(16).int32(message.operation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerRequest_TimerOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_TimerOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.operation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerRequest_TimerOperation {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      operation: isSet(object.operation)
        ? networkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperationFromJSON(object.operation)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerRequest_TimerOperation): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.operation !== undefined &&
      (obj.operation = networkAPIV1_APIV1TimerRequest_TimerOperation_APIV1TimerOperationToJSON(message.operation));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_TimerOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerRequest_TimerOperation {
    return NetworkAPIV1_APIV1TimerRequest_TimerOperation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_TimerOperation>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerRequest_TimerOperation {
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_TimerOperation();
    message.id = object.id ?? "";
    message.operation = object.operation ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerRequest_SystemTime(): NetworkAPIV1_APIV1TimerRequest_SystemTime {
  return {};
}

export const NetworkAPIV1_APIV1TimerRequest_SystemTime = {
  encode(_: NetworkAPIV1_APIV1TimerRequest_SystemTime, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerRequest_SystemTime {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_SystemTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TimerRequest_SystemTime {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TimerRequest_SystemTime): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_SystemTime>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerRequest_SystemTime {
    return NetworkAPIV1_APIV1TimerRequest_SystemTime.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_SystemTime>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TimerRequest_SystemTime {
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_SystemTime();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerRequest_VideoCountdown(): NetworkAPIV1_APIV1TimerRequest_VideoCountdown {
  return {};
}

export const NetworkAPIV1_APIV1TimerRequest_VideoCountdown = {
  encode(_: NetworkAPIV1_APIV1TimerRequest_VideoCountdown, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerRequest_VideoCountdown {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_VideoCountdown();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TimerRequest_VideoCountdown {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TimerRequest_VideoCountdown): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_VideoCountdown>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerRequest_VideoCountdown {
    return NetworkAPIV1_APIV1TimerRequest_VideoCountdown.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerRequest_VideoCountdown>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TimerRequest_VideoCountdown {
    const message = createBaseNetworkAPIV1_APIV1TimerRequest_VideoCountdown();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportRequest(): NetworkAPIV1_APIV1TransportRequest {
  return {
    play: undefined,
    pause: undefined,
    skipBackward: undefined,
    skipForward: undefined,
    goToEnd: undefined,
    getTime: undefined,
    putTime: undefined,
    getAutoAdvance: undefined,
    deleteAutoAdvance: undefined,
    getCurrentMedia: undefined,
  };
}

export const NetworkAPIV1_APIV1TransportRequest = {
  encode(message: NetworkAPIV1_APIV1TransportRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.play !== undefined) {
      NetworkAPIV1_APIV1TransportRequest_Play.encode(message.play, writer.uint32(10).fork()).ldelim();
    }
    if (message.pause !== undefined) {
      NetworkAPIV1_APIV1TransportRequest_Pause.encode(message.pause, writer.uint32(18).fork()).ldelim();
    }
    if (message.skipBackward !== undefined) {
      NetworkAPIV1_APIV1TransportRequest_SkipBackward.encode(message.skipBackward, writer.uint32(26).fork()).ldelim();
    }
    if (message.skipForward !== undefined) {
      NetworkAPIV1_APIV1TransportRequest_SkipForward.encode(message.skipForward, writer.uint32(34).fork()).ldelim();
    }
    if (message.goToEnd !== undefined) {
      NetworkAPIV1_APIV1TransportRequest_GoToEnd.encode(message.goToEnd, writer.uint32(42).fork()).ldelim();
    }
    if (message.getTime !== undefined) {
      NetworkAPIV1_APIV1TransportRequest_GetTime.encode(message.getTime, writer.uint32(50).fork()).ldelim();
    }
    if (message.putTime !== undefined) {
      NetworkAPIV1_APIV1TransportRequest_PutTime.encode(message.putTime, writer.uint32(58).fork()).ldelim();
    }
    if (message.getAutoAdvance !== undefined) {
      NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance.encode(message.getAutoAdvance, writer.uint32(66).fork())
        .ldelim();
    }
    if (message.deleteAutoAdvance !== undefined) {
      NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance.encode(message.deleteAutoAdvance, writer.uint32(74).fork())
        .ldelim();
    }
    if (message.getCurrentMedia !== undefined) {
      NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia.encode(message.getCurrentMedia, writer.uint32(82).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.play = NetworkAPIV1_APIV1TransportRequest_Play.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.pause = NetworkAPIV1_APIV1TransportRequest_Pause.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.skipBackward = NetworkAPIV1_APIV1TransportRequest_SkipBackward.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.skipForward = NetworkAPIV1_APIV1TransportRequest_SkipForward.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.goToEnd = NetworkAPIV1_APIV1TransportRequest_GoToEnd.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getTime = NetworkAPIV1_APIV1TransportRequest_GetTime.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.putTime = NetworkAPIV1_APIV1TransportRequest_PutTime.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.getAutoAdvance = NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.deleteAutoAdvance = NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.getCurrentMedia = NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportRequest {
    return {
      play: isSet(object.play) ? NetworkAPIV1_APIV1TransportRequest_Play.fromJSON(object.play) : undefined,
      pause: isSet(object.pause) ? NetworkAPIV1_APIV1TransportRequest_Pause.fromJSON(object.pause) : undefined,
      skipBackward: isSet(object.skipBackward)
        ? NetworkAPIV1_APIV1TransportRequest_SkipBackward.fromJSON(object.skipBackward)
        : undefined,
      skipForward: isSet(object.skipForward)
        ? NetworkAPIV1_APIV1TransportRequest_SkipForward.fromJSON(object.skipForward)
        : undefined,
      goToEnd: isSet(object.goToEnd) ? NetworkAPIV1_APIV1TransportRequest_GoToEnd.fromJSON(object.goToEnd) : undefined,
      getTime: isSet(object.getTime) ? NetworkAPIV1_APIV1TransportRequest_GetTime.fromJSON(object.getTime) : undefined,
      putTime: isSet(object.putTime) ? NetworkAPIV1_APIV1TransportRequest_PutTime.fromJSON(object.putTime) : undefined,
      getAutoAdvance: isSet(object.getAutoAdvance)
        ? NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance.fromJSON(object.getAutoAdvance)
        : undefined,
      deleteAutoAdvance: isSet(object.deleteAutoAdvance)
        ? NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance.fromJSON(object.deleteAutoAdvance)
        : undefined,
      getCurrentMedia: isSet(object.getCurrentMedia)
        ? NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia.fromJSON(object.getCurrentMedia)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportRequest): unknown {
    const obj: any = {};
    message.play !== undefined &&
      (obj.play = message.play ? NetworkAPIV1_APIV1TransportRequest_Play.toJSON(message.play) : undefined);
    message.pause !== undefined &&
      (obj.pause = message.pause ? NetworkAPIV1_APIV1TransportRequest_Pause.toJSON(message.pause) : undefined);
    message.skipBackward !== undefined && (obj.skipBackward = message.skipBackward
      ? NetworkAPIV1_APIV1TransportRequest_SkipBackward.toJSON(message.skipBackward)
      : undefined);
    message.skipForward !== undefined && (obj.skipForward = message.skipForward
      ? NetworkAPIV1_APIV1TransportRequest_SkipForward.toJSON(message.skipForward)
      : undefined);
    message.goToEnd !== undefined &&
      (obj.goToEnd = message.goToEnd ? NetworkAPIV1_APIV1TransportRequest_GoToEnd.toJSON(message.goToEnd) : undefined);
    message.getTime !== undefined &&
      (obj.getTime = message.getTime ? NetworkAPIV1_APIV1TransportRequest_GetTime.toJSON(message.getTime) : undefined);
    message.putTime !== undefined &&
      (obj.putTime = message.putTime ? NetworkAPIV1_APIV1TransportRequest_PutTime.toJSON(message.putTime) : undefined);
    message.getAutoAdvance !== undefined && (obj.getAutoAdvance = message.getAutoAdvance
      ? NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance.toJSON(message.getAutoAdvance)
      : undefined);
    message.deleteAutoAdvance !== undefined && (obj.deleteAutoAdvance = message.deleteAutoAdvance
      ? NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance.toJSON(message.deleteAutoAdvance)
      : undefined);
    message.getCurrentMedia !== undefined && (obj.getCurrentMedia = message.getCurrentMedia
      ? NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia.toJSON(message.getCurrentMedia)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportRequest {
    return NetworkAPIV1_APIV1TransportRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportRequest {
    const message = createBaseNetworkAPIV1_APIV1TransportRequest();
    message.play = (object.play !== undefined && object.play !== null)
      ? NetworkAPIV1_APIV1TransportRequest_Play.fromPartial(object.play)
      : undefined;
    message.pause = (object.pause !== undefined && object.pause !== null)
      ? NetworkAPIV1_APIV1TransportRequest_Pause.fromPartial(object.pause)
      : undefined;
    message.skipBackward = (object.skipBackward !== undefined && object.skipBackward !== null)
      ? NetworkAPIV1_APIV1TransportRequest_SkipBackward.fromPartial(object.skipBackward)
      : undefined;
    message.skipForward = (object.skipForward !== undefined && object.skipForward !== null)
      ? NetworkAPIV1_APIV1TransportRequest_SkipForward.fromPartial(object.skipForward)
      : undefined;
    message.goToEnd = (object.goToEnd !== undefined && object.goToEnd !== null)
      ? NetworkAPIV1_APIV1TransportRequest_GoToEnd.fromPartial(object.goToEnd)
      : undefined;
    message.getTime = (object.getTime !== undefined && object.getTime !== null)
      ? NetworkAPIV1_APIV1TransportRequest_GetTime.fromPartial(object.getTime)
      : undefined;
    message.putTime = (object.putTime !== undefined && object.putTime !== null)
      ? NetworkAPIV1_APIV1TransportRequest_PutTime.fromPartial(object.putTime)
      : undefined;
    message.getAutoAdvance = (object.getAutoAdvance !== undefined && object.getAutoAdvance !== null)
      ? NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance.fromPartial(object.getAutoAdvance)
      : undefined;
    message.deleteAutoAdvance = (object.deleteAutoAdvance !== undefined && object.deleteAutoAdvance !== null)
      ? NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance.fromPartial(object.deleteAutoAdvance)
      : undefined;
    message.getCurrentMedia = (object.getCurrentMedia !== undefined && object.getCurrentMedia !== null)
      ? NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia.fromPartial(object.getCurrentMedia)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportRequest_Play(): NetworkAPIV1_APIV1TransportRequest_Play {
  return { layer: 0 };
}

export const NetworkAPIV1_APIV1TransportRequest_Play = {
  encode(message: NetworkAPIV1_APIV1TransportRequest_Play, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.layer !== 0) {
      writer.uint32(8).int32(message.layer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportRequest_Play {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_Play();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportRequest_Play {
    return {
      layer: isSet(object.layer) ? networkAPIV1_APIV1TransportRequest_Play_APIV1LayerTypeFromJSON(object.layer) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportRequest_Play): unknown {
    const obj: any = {};
    message.layer !== undefined &&
      (obj.layer = networkAPIV1_APIV1TransportRequest_Play_APIV1LayerTypeToJSON(message.layer));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_Play>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportRequest_Play {
    return NetworkAPIV1_APIV1TransportRequest_Play.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_Play>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportRequest_Play {
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_Play();
    message.layer = object.layer ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportRequest_Pause(): NetworkAPIV1_APIV1TransportRequest_Pause {
  return { layer: 0 };
}

export const NetworkAPIV1_APIV1TransportRequest_Pause = {
  encode(message: NetworkAPIV1_APIV1TransportRequest_Pause, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.layer !== 0) {
      writer.uint32(8).int32(message.layer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportRequest_Pause {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_Pause();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportRequest_Pause {
    return {
      layer: isSet(object.layer) ? networkAPIV1_APIV1TransportRequest_Pause_APIV1LayerTypeFromJSON(object.layer) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportRequest_Pause): unknown {
    const obj: any = {};
    message.layer !== undefined &&
      (obj.layer = networkAPIV1_APIV1TransportRequest_Pause_APIV1LayerTypeToJSON(message.layer));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_Pause>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportRequest_Pause {
    return NetworkAPIV1_APIV1TransportRequest_Pause.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_Pause>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportRequest_Pause {
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_Pause();
    message.layer = object.layer ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportRequest_SkipBackward(): NetworkAPIV1_APIV1TransportRequest_SkipBackward {
  return { layer: 0, seconds: 0 };
}

export const NetworkAPIV1_APIV1TransportRequest_SkipBackward = {
  encode(
    message: NetworkAPIV1_APIV1TransportRequest_SkipBackward,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.layer !== 0) {
      writer.uint32(8).int32(message.layer);
    }
    if (message.seconds !== 0) {
      writer.uint32(17).double(message.seconds);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportRequest_SkipBackward {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_SkipBackward();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
        case 2:
          if (tag != 17) {
            break;
          }

          message.seconds = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportRequest_SkipBackward {
    return {
      layer: isSet(object.layer)
        ? networkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerTypeFromJSON(object.layer)
        : 0,
      seconds: isSet(object.seconds) ? Number(object.seconds) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportRequest_SkipBackward): unknown {
    const obj: any = {};
    message.layer !== undefined &&
      (obj.layer = networkAPIV1_APIV1TransportRequest_SkipBackward_APIV1LayerTypeToJSON(message.layer));
    message.seconds !== undefined && (obj.seconds = message.seconds);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_SkipBackward>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportRequest_SkipBackward {
    return NetworkAPIV1_APIV1TransportRequest_SkipBackward.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_SkipBackward>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportRequest_SkipBackward {
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_SkipBackward();
    message.layer = object.layer ?? 0;
    message.seconds = object.seconds ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportRequest_SkipForward(): NetworkAPIV1_APIV1TransportRequest_SkipForward {
  return { layer: 0, seconds: 0 };
}

export const NetworkAPIV1_APIV1TransportRequest_SkipForward = {
  encode(
    message: NetworkAPIV1_APIV1TransportRequest_SkipForward,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.layer !== 0) {
      writer.uint32(8).int32(message.layer);
    }
    if (message.seconds !== 0) {
      writer.uint32(17).double(message.seconds);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportRequest_SkipForward {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_SkipForward();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
        case 2:
          if (tag != 17) {
            break;
          }

          message.seconds = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportRequest_SkipForward {
    return {
      layer: isSet(object.layer)
        ? networkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerTypeFromJSON(object.layer)
        : 0,
      seconds: isSet(object.seconds) ? Number(object.seconds) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportRequest_SkipForward): unknown {
    const obj: any = {};
    message.layer !== undefined &&
      (obj.layer = networkAPIV1_APIV1TransportRequest_SkipForward_APIV1LayerTypeToJSON(message.layer));
    message.seconds !== undefined && (obj.seconds = message.seconds);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_SkipForward>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportRequest_SkipForward {
    return NetworkAPIV1_APIV1TransportRequest_SkipForward.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_SkipForward>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportRequest_SkipForward {
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_SkipForward();
    message.layer = object.layer ?? 0;
    message.seconds = object.seconds ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportRequest_GoToEnd(): NetworkAPIV1_APIV1TransportRequest_GoToEnd {
  return { layer: 0, seconds: 0 };
}

export const NetworkAPIV1_APIV1TransportRequest_GoToEnd = {
  encode(message: NetworkAPIV1_APIV1TransportRequest_GoToEnd, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.layer !== 0) {
      writer.uint32(8).int32(message.layer);
    }
    if (message.seconds !== 0) {
      writer.uint32(17).double(message.seconds);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportRequest_GoToEnd {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_GoToEnd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
        case 2:
          if (tag != 17) {
            break;
          }

          message.seconds = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportRequest_GoToEnd {
    return {
      layer: isSet(object.layer) ? networkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerTypeFromJSON(object.layer) : 0,
      seconds: isSet(object.seconds) ? Number(object.seconds) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportRequest_GoToEnd): unknown {
    const obj: any = {};
    message.layer !== undefined &&
      (obj.layer = networkAPIV1_APIV1TransportRequest_GoToEnd_APIV1LayerTypeToJSON(message.layer));
    message.seconds !== undefined && (obj.seconds = message.seconds);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_GoToEnd>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportRequest_GoToEnd {
    return NetworkAPIV1_APIV1TransportRequest_GoToEnd.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_GoToEnd>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportRequest_GoToEnd {
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_GoToEnd();
    message.layer = object.layer ?? 0;
    message.seconds = object.seconds ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportRequest_GetTime(): NetworkAPIV1_APIV1TransportRequest_GetTime {
  return { layer: 0 };
}

export const NetworkAPIV1_APIV1TransportRequest_GetTime = {
  encode(message: NetworkAPIV1_APIV1TransportRequest_GetTime, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.layer !== 0) {
      writer.uint32(8).int32(message.layer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportRequest_GetTime {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_GetTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportRequest_GetTime {
    return {
      layer: isSet(object.layer) ? networkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerTypeFromJSON(object.layer) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportRequest_GetTime): unknown {
    const obj: any = {};
    message.layer !== undefined &&
      (obj.layer = networkAPIV1_APIV1TransportRequest_GetTime_APIV1LayerTypeToJSON(message.layer));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_GetTime>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportRequest_GetTime {
    return NetworkAPIV1_APIV1TransportRequest_GetTime.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_GetTime>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportRequest_GetTime {
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_GetTime();
    message.layer = object.layer ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportRequest_PutTime(): NetworkAPIV1_APIV1TransportRequest_PutTime {
  return { layer: 0, seconds: 0 };
}

export const NetworkAPIV1_APIV1TransportRequest_PutTime = {
  encode(message: NetworkAPIV1_APIV1TransportRequest_PutTime, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.layer !== 0) {
      writer.uint32(8).int32(message.layer);
    }
    if (message.seconds !== 0) {
      writer.uint32(17).double(message.seconds);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportRequest_PutTime {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_PutTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
        case 2:
          if (tag != 17) {
            break;
          }

          message.seconds = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportRequest_PutTime {
    return {
      layer: isSet(object.layer) ? networkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerTypeFromJSON(object.layer) : 0,
      seconds: isSet(object.seconds) ? Number(object.seconds) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportRequest_PutTime): unknown {
    const obj: any = {};
    message.layer !== undefined &&
      (obj.layer = networkAPIV1_APIV1TransportRequest_PutTime_APIV1LayerTypeToJSON(message.layer));
    message.seconds !== undefined && (obj.seconds = message.seconds);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_PutTime>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportRequest_PutTime {
    return NetworkAPIV1_APIV1TransportRequest_PutTime.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_PutTime>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportRequest_PutTime {
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_PutTime();
    message.layer = object.layer ?? 0;
    message.seconds = object.seconds ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportRequest_GetAutoAdvance(): NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance {
  return { layer: 0 };
}

export const NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance = {
  encode(
    message: NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.layer !== 0) {
      writer.uint32(8).int32(message.layer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_GetAutoAdvance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance {
    return {
      layer: isSet(object.layer)
        ? networkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerTypeFromJSON(object.layer)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance): unknown {
    const obj: any = {};
    message.layer !== undefined &&
      (obj.layer = networkAPIV1_APIV1TransportRequest_GetAutoAdvance_APIV1LayerTypeToJSON(message.layer));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance {
    return NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportRequest_GetAutoAdvance {
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_GetAutoAdvance();
    message.layer = object.layer ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance(): NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance {
  return { layer: 0 };
}

export const NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance = {
  encode(
    message: NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.layer !== 0) {
      writer.uint32(8).int32(message.layer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance {
    return {
      layer: isSet(object.layer)
        ? networkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerTypeFromJSON(object.layer)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance): unknown {
    const obj: any = {};
    message.layer !== undefined &&
      (obj.layer = networkAPIV1_APIV1TransportRequest_DeleteAutoAdvance_APIV1LayerTypeToJSON(message.layer));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance {
    return NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance {
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_DeleteAutoAdvance();
    message.layer = object.layer ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportRequest_GetCurrentMedia(): NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia {
  return { layer: 0 };
}

export const NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia = {
  encode(
    message: NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.layer !== 0) {
      writer.uint32(8).int32(message.layer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_GetCurrentMedia();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia {
    return {
      layer: isSet(object.layer)
        ? networkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerTypeFromJSON(object.layer)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia): unknown {
    const obj: any = {};
    message.layer !== undefined &&
      (obj.layer = networkAPIV1_APIV1TransportRequest_GetCurrentMedia_APIV1LayerTypeToJSON(message.layer));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia {
    return NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportRequest_GetCurrentMedia {
    const message = createBaseNetworkAPIV1_APIV1TransportRequest_GetCurrentMedia();
    message.layer = object.layer ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest(): NetworkAPIV1_APIV1TriggerRequest {
  return {
    cue: undefined,
    playlist: undefined,
    media: undefined,
    audio: undefined,
    videoInput: undefined,
    library: undefined,
    next: undefined,
    previous: undefined,
    mediaNext: undefined,
    mediaPrevious: undefined,
    audioNext: undefined,
    audioPrevious: undefined,
  };
}

export const NetworkAPIV1_APIV1TriggerRequest = {
  encode(message: NetworkAPIV1_APIV1TriggerRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cue !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_Cue.encode(message.cue, writer.uint32(10).fork()).ldelim();
    }
    if (message.playlist !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_Playlist.encode(message.playlist, writer.uint32(18).fork()).ldelim();
    }
    if (message.media !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_Media.encode(message.media, writer.uint32(26).fork()).ldelim();
    }
    if (message.audio !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_Audio.encode(message.audio, writer.uint32(34).fork()).ldelim();
    }
    if (message.videoInput !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_VideoInput.encode(message.videoInput, writer.uint32(42).fork()).ldelim();
    }
    if (message.library !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_Library.encode(message.library, writer.uint32(50).fork()).ldelim();
    }
    if (message.next !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_Next.encode(message.next, writer.uint32(58).fork()).ldelim();
    }
    if (message.previous !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_Previous.encode(message.previous, writer.uint32(66).fork()).ldelim();
    }
    if (message.mediaNext !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_MediaNext.encode(message.mediaNext, writer.uint32(74).fork()).ldelim();
    }
    if (message.mediaPrevious !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_MediaPrevious.encode(message.mediaPrevious, writer.uint32(82).fork()).ldelim();
    }
    if (message.audioNext !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_AudioNext.encode(message.audioNext, writer.uint32(90).fork()).ldelim();
    }
    if (message.audioPrevious !== undefined) {
      NetworkAPIV1_APIV1TriggerRequest_AudioPrevious.encode(message.audioPrevious, writer.uint32(98).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.cue = NetworkAPIV1_APIV1TriggerRequest_Cue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.playlist = NetworkAPIV1_APIV1TriggerRequest_Playlist.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.media = NetworkAPIV1_APIV1TriggerRequest_Media.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.audio = NetworkAPIV1_APIV1TriggerRequest_Audio.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.videoInput = NetworkAPIV1_APIV1TriggerRequest_VideoInput.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.library = NetworkAPIV1_APIV1TriggerRequest_Library.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.next = NetworkAPIV1_APIV1TriggerRequest_Next.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.previous = NetworkAPIV1_APIV1TriggerRequest_Previous.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.mediaNext = NetworkAPIV1_APIV1TriggerRequest_MediaNext.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.mediaPrevious = NetworkAPIV1_APIV1TriggerRequest_MediaPrevious.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.audioNext = NetworkAPIV1_APIV1TriggerRequest_AudioNext.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.audioPrevious = NetworkAPIV1_APIV1TriggerRequest_AudioPrevious.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TriggerRequest {
    return {
      cue: isSet(object.cue) ? NetworkAPIV1_APIV1TriggerRequest_Cue.fromJSON(object.cue) : undefined,
      playlist: isSet(object.playlist)
        ? NetworkAPIV1_APIV1TriggerRequest_Playlist.fromJSON(object.playlist)
        : undefined,
      media: isSet(object.media) ? NetworkAPIV1_APIV1TriggerRequest_Media.fromJSON(object.media) : undefined,
      audio: isSet(object.audio) ? NetworkAPIV1_APIV1TriggerRequest_Audio.fromJSON(object.audio) : undefined,
      videoInput: isSet(object.videoInput)
        ? NetworkAPIV1_APIV1TriggerRequest_VideoInput.fromJSON(object.videoInput)
        : undefined,
      library: isSet(object.library) ? NetworkAPIV1_APIV1TriggerRequest_Library.fromJSON(object.library) : undefined,
      next: isSet(object.next) ? NetworkAPIV1_APIV1TriggerRequest_Next.fromJSON(object.next) : undefined,
      previous: isSet(object.previous)
        ? NetworkAPIV1_APIV1TriggerRequest_Previous.fromJSON(object.previous)
        : undefined,
      mediaNext: isSet(object.mediaNext)
        ? NetworkAPIV1_APIV1TriggerRequest_MediaNext.fromJSON(object.mediaNext)
        : undefined,
      mediaPrevious: isSet(object.mediaPrevious)
        ? NetworkAPIV1_APIV1TriggerRequest_MediaPrevious.fromJSON(object.mediaPrevious)
        : undefined,
      audioNext: isSet(object.audioNext)
        ? NetworkAPIV1_APIV1TriggerRequest_AudioNext.fromJSON(object.audioNext)
        : undefined,
      audioPrevious: isSet(object.audioPrevious)
        ? NetworkAPIV1_APIV1TriggerRequest_AudioPrevious.fromJSON(object.audioPrevious)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TriggerRequest): unknown {
    const obj: any = {};
    message.cue !== undefined &&
      (obj.cue = message.cue ? NetworkAPIV1_APIV1TriggerRequest_Cue.toJSON(message.cue) : undefined);
    message.playlist !== undefined &&
      (obj.playlist = message.playlist
        ? NetworkAPIV1_APIV1TriggerRequest_Playlist.toJSON(message.playlist)
        : undefined);
    message.media !== undefined &&
      (obj.media = message.media ? NetworkAPIV1_APIV1TriggerRequest_Media.toJSON(message.media) : undefined);
    message.audio !== undefined &&
      (obj.audio = message.audio ? NetworkAPIV1_APIV1TriggerRequest_Audio.toJSON(message.audio) : undefined);
    message.videoInput !== undefined && (obj.videoInput = message.videoInput
      ? NetworkAPIV1_APIV1TriggerRequest_VideoInput.toJSON(message.videoInput)
      : undefined);
    message.library !== undefined &&
      (obj.library = message.library ? NetworkAPIV1_APIV1TriggerRequest_Library.toJSON(message.library) : undefined);
    message.next !== undefined &&
      (obj.next = message.next ? NetworkAPIV1_APIV1TriggerRequest_Next.toJSON(message.next) : undefined);
    message.previous !== undefined &&
      (obj.previous = message.previous
        ? NetworkAPIV1_APIV1TriggerRequest_Previous.toJSON(message.previous)
        : undefined);
    message.mediaNext !== undefined && (obj.mediaNext = message.mediaNext
      ? NetworkAPIV1_APIV1TriggerRequest_MediaNext.toJSON(message.mediaNext)
      : undefined);
    message.mediaPrevious !== undefined && (obj.mediaPrevious = message.mediaPrevious
      ? NetworkAPIV1_APIV1TriggerRequest_MediaPrevious.toJSON(message.mediaPrevious)
      : undefined);
    message.audioNext !== undefined && (obj.audioNext = message.audioNext
      ? NetworkAPIV1_APIV1TriggerRequest_AudioNext.toJSON(message.audioNext)
      : undefined);
    message.audioPrevious !== undefined && (obj.audioPrevious = message.audioPrevious
      ? NetworkAPIV1_APIV1TriggerRequest_AudioPrevious.toJSON(message.audioPrevious)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest {
    return NetworkAPIV1_APIV1TriggerRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TriggerRequest {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest();
    message.cue = (object.cue !== undefined && object.cue !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_Cue.fromPartial(object.cue)
      : undefined;
    message.playlist = (object.playlist !== undefined && object.playlist !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_Playlist.fromPartial(object.playlist)
      : undefined;
    message.media = (object.media !== undefined && object.media !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_Media.fromPartial(object.media)
      : undefined;
    message.audio = (object.audio !== undefined && object.audio !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_Audio.fromPartial(object.audio)
      : undefined;
    message.videoInput = (object.videoInput !== undefined && object.videoInput !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_VideoInput.fromPartial(object.videoInput)
      : undefined;
    message.library = (object.library !== undefined && object.library !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_Library.fromPartial(object.library)
      : undefined;
    message.next = (object.next !== undefined && object.next !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_Next.fromPartial(object.next)
      : undefined;
    message.previous = (object.previous !== undefined && object.previous !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_Previous.fromPartial(object.previous)
      : undefined;
    message.mediaNext = (object.mediaNext !== undefined && object.mediaNext !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_MediaNext.fromPartial(object.mediaNext)
      : undefined;
    message.mediaPrevious = (object.mediaPrevious !== undefined && object.mediaPrevious !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_MediaPrevious.fromPartial(object.mediaPrevious)
      : undefined;
    message.audioNext = (object.audioNext !== undefined && object.audioNext !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_AudioNext.fromPartial(object.audioNext)
      : undefined;
    message.audioPrevious = (object.audioPrevious !== undefined && object.audioPrevious !== null)
      ? NetworkAPIV1_APIV1TriggerRequest_AudioPrevious.fromPartial(object.audioPrevious)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_Cue(): NetworkAPIV1_APIV1TriggerRequest_Cue {
  return { index: 0 };
}

export const NetworkAPIV1_APIV1TriggerRequest_Cue = {
  encode(message: NetworkAPIV1_APIV1TriggerRequest_Cue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.index !== 0) {
      writer.uint32(8).uint32(message.index);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_Cue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Cue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.index = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TriggerRequest_Cue {
    return { index: isSet(object.index) ? Number(object.index) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1TriggerRequest_Cue): unknown {
    const obj: any = {};
    message.index !== undefined && (obj.index = Math.round(message.index));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Cue>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Cue {
    return NetworkAPIV1_APIV1TriggerRequest_Cue.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Cue>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Cue {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Cue();
    message.index = object.index ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_Playlist(): NetworkAPIV1_APIV1TriggerRequest_Playlist {
  return { id: "" };
}

export const NetworkAPIV1_APIV1TriggerRequest_Playlist = {
  encode(message: NetworkAPIV1_APIV1TriggerRequest_Playlist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_Playlist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Playlist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TriggerRequest_Playlist {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1TriggerRequest_Playlist): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Playlist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Playlist {
    return NetworkAPIV1_APIV1TriggerRequest_Playlist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Playlist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Playlist {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Playlist();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_Media(): NetworkAPIV1_APIV1TriggerRequest_Media {
  return { id: "" };
}

export const NetworkAPIV1_APIV1TriggerRequest_Media = {
  encode(message: NetworkAPIV1_APIV1TriggerRequest_Media, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_Media {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Media();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TriggerRequest_Media {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1TriggerRequest_Media): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Media>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Media {
    return NetworkAPIV1_APIV1TriggerRequest_Media.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Media>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Media {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Media();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_MediaNext(): NetworkAPIV1_APIV1TriggerRequest_MediaNext {
  return {};
}

export const NetworkAPIV1_APIV1TriggerRequest_MediaNext = {
  encode(_: NetworkAPIV1_APIV1TriggerRequest_MediaNext, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_MediaNext {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_MediaNext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerRequest_MediaNext {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerRequest_MediaNext): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_MediaNext>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_MediaNext {
    return NetworkAPIV1_APIV1TriggerRequest_MediaNext.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_MediaNext>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerRequest_MediaNext {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_MediaNext();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_MediaPrevious(): NetworkAPIV1_APIV1TriggerRequest_MediaPrevious {
  return {};
}

export const NetworkAPIV1_APIV1TriggerRequest_MediaPrevious = {
  encode(_: NetworkAPIV1_APIV1TriggerRequest_MediaPrevious, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_MediaPrevious {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_MediaPrevious();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerRequest_MediaPrevious {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerRequest_MediaPrevious): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_MediaPrevious>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_MediaPrevious {
    return NetworkAPIV1_APIV1TriggerRequest_MediaPrevious.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_MediaPrevious>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerRequest_MediaPrevious {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_MediaPrevious();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_Audio(): NetworkAPIV1_APIV1TriggerRequest_Audio {
  return { id: "" };
}

export const NetworkAPIV1_APIV1TriggerRequest_Audio = {
  encode(message: NetworkAPIV1_APIV1TriggerRequest_Audio, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_Audio {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Audio();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TriggerRequest_Audio {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1TriggerRequest_Audio): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Audio>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Audio {
    return NetworkAPIV1_APIV1TriggerRequest_Audio.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Audio>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Audio {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Audio();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_AudioNext(): NetworkAPIV1_APIV1TriggerRequest_AudioNext {
  return {};
}

export const NetworkAPIV1_APIV1TriggerRequest_AudioNext = {
  encode(_: NetworkAPIV1_APIV1TriggerRequest_AudioNext, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_AudioNext {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_AudioNext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerRequest_AudioNext {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerRequest_AudioNext): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_AudioNext>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_AudioNext {
    return NetworkAPIV1_APIV1TriggerRequest_AudioNext.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_AudioNext>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerRequest_AudioNext {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_AudioNext();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_AudioPrevious(): NetworkAPIV1_APIV1TriggerRequest_AudioPrevious {
  return {};
}

export const NetworkAPIV1_APIV1TriggerRequest_AudioPrevious = {
  encode(_: NetworkAPIV1_APIV1TriggerRequest_AudioPrevious, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_AudioPrevious {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_AudioPrevious();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerRequest_AudioPrevious {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerRequest_AudioPrevious): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_AudioPrevious>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_AudioPrevious {
    return NetworkAPIV1_APIV1TriggerRequest_AudioPrevious.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_AudioPrevious>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerRequest_AudioPrevious {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_AudioPrevious();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_VideoInput(): NetworkAPIV1_APIV1TriggerRequest_VideoInput {
  return { id: "" };
}

export const NetworkAPIV1_APIV1TriggerRequest_VideoInput = {
  encode(message: NetworkAPIV1_APIV1TriggerRequest_VideoInput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_VideoInput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_VideoInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TriggerRequest_VideoInput {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1TriggerRequest_VideoInput): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_VideoInput>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_VideoInput {
    return NetworkAPIV1_APIV1TriggerRequest_VideoInput.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_VideoInput>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TriggerRequest_VideoInput {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_VideoInput();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_Library(): NetworkAPIV1_APIV1TriggerRequest_Library {
  return { id: "" };
}

export const NetworkAPIV1_APIV1TriggerRequest_Library = {
  encode(message: NetworkAPIV1_APIV1TriggerRequest_Library, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_Library {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Library();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TriggerRequest_Library {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1TriggerRequest_Library): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Library>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Library {
    return NetworkAPIV1_APIV1TriggerRequest_Library.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Library>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Library {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Library();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_Next(): NetworkAPIV1_APIV1TriggerRequest_Next {
  return {};
}

export const NetworkAPIV1_APIV1TriggerRequest_Next = {
  encode(_: NetworkAPIV1_APIV1TriggerRequest_Next, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_Next {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Next();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerRequest_Next {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerRequest_Next): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Next>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Next {
    return NetworkAPIV1_APIV1TriggerRequest_Next.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Next>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Next {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Next();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerRequest_Previous(): NetworkAPIV1_APIV1TriggerRequest_Previous {
  return {};
}

export const NetworkAPIV1_APIV1TriggerRequest_Previous = {
  encode(_: NetworkAPIV1_APIV1TriggerRequest_Previous, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerRequest_Previous {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Previous();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerRequest_Previous {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerRequest_Previous): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Previous>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Previous {
    return NetworkAPIV1_APIV1TriggerRequest_Previous.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerRequest_Previous>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerRequest_Previous {
    const message = createBaseNetworkAPIV1_APIV1TriggerRequest_Previous();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1VideoInputsRequest(): NetworkAPIV1_APIV1VideoInputsRequest {
  return { getAll: undefined, trigger: undefined };
}

export const NetworkAPIV1_APIV1VideoInputsRequest = {
  encode(message: NetworkAPIV1_APIV1VideoInputsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.getAll !== undefined) {
      NetworkAPIV1_APIV1VideoInputsRequest_GetAll.encode(message.getAll, writer.uint32(10).fork()).ldelim();
    }
    if (message.trigger !== undefined) {
      NetworkAPIV1_APIV1VideoInputsRequest_Trigger.encode(message.trigger, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1VideoInputsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1VideoInputsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.getAll = NetworkAPIV1_APIV1VideoInputsRequest_GetAll.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.trigger = NetworkAPIV1_APIV1VideoInputsRequest_Trigger.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1VideoInputsRequest {
    return {
      getAll: isSet(object.getAll) ? NetworkAPIV1_APIV1VideoInputsRequest_GetAll.fromJSON(object.getAll) : undefined,
      trigger: isSet(object.trigger)
        ? NetworkAPIV1_APIV1VideoInputsRequest_Trigger.fromJSON(object.trigger)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1VideoInputsRequest): unknown {
    const obj: any = {};
    message.getAll !== undefined &&
      (obj.getAll = message.getAll ? NetworkAPIV1_APIV1VideoInputsRequest_GetAll.toJSON(message.getAll) : undefined);
    message.trigger !== undefined &&
      (obj.trigger = message.trigger
        ? NetworkAPIV1_APIV1VideoInputsRequest_Trigger.toJSON(message.trigger)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1VideoInputsRequest {
    return NetworkAPIV1_APIV1VideoInputsRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1VideoInputsRequest {
    const message = createBaseNetworkAPIV1_APIV1VideoInputsRequest();
    message.getAll = (object.getAll !== undefined && object.getAll !== null)
      ? NetworkAPIV1_APIV1VideoInputsRequest_GetAll.fromPartial(object.getAll)
      : undefined;
    message.trigger = (object.trigger !== undefined && object.trigger !== null)
      ? NetworkAPIV1_APIV1VideoInputsRequest_Trigger.fromPartial(object.trigger)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1VideoInputsRequest_GetAll(): NetworkAPIV1_APIV1VideoInputsRequest_GetAll {
  return {};
}

export const NetworkAPIV1_APIV1VideoInputsRequest_GetAll = {
  encode(_: NetworkAPIV1_APIV1VideoInputsRequest_GetAll, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1VideoInputsRequest_GetAll {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1VideoInputsRequest_GetAll();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1VideoInputsRequest_GetAll {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1VideoInputsRequest_GetAll): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsRequest_GetAll>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1VideoInputsRequest_GetAll {
    return NetworkAPIV1_APIV1VideoInputsRequest_GetAll.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsRequest_GetAll>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1VideoInputsRequest_GetAll {
    const message = createBaseNetworkAPIV1_APIV1VideoInputsRequest_GetAll();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1VideoInputsRequest_Trigger(): NetworkAPIV1_APIV1VideoInputsRequest_Trigger {
  return { id: "" };
}

export const NetworkAPIV1_APIV1VideoInputsRequest_Trigger = {
  encode(message: NetworkAPIV1_APIV1VideoInputsRequest_Trigger, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1VideoInputsRequest_Trigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1VideoInputsRequest_Trigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1VideoInputsRequest_Trigger {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1VideoInputsRequest_Trigger): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsRequest_Trigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1VideoInputsRequest_Trigger {
    return NetworkAPIV1_APIV1VideoInputsRequest_Trigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsRequest_Trigger>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1VideoInputsRequest_Trigger {
    const message = createBaseNetworkAPIV1_APIV1VideoInputsRequest_Trigger();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementResponse(): NetworkAPIV1_APIV1AnnouncementResponse {
  return {
    activeTimelineOperation: undefined,
    activeTimelineStatus: undefined,
    active: undefined,
    slideIndex: undefined,
    activeFocus: undefined,
    activeTrigger: undefined,
    activeNextTrigger: undefined,
    activePreviousTrigger: undefined,
    activeIndexTrigger: undefined,
  };
}

export const NetworkAPIV1_APIV1AnnouncementResponse = {
  encode(message: NetworkAPIV1_APIV1AnnouncementResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.activeTimelineOperation !== undefined) {
      NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation.encode(
        message.activeTimelineOperation,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    if (message.activeTimelineStatus !== undefined) {
      NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus.encode(
        message.activeTimelineStatus,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    if (message.active !== undefined) {
      NetworkAPIV1_APIV1AnnouncementResponse_Active.encode(message.active, writer.uint32(26).fork()).ldelim();
    }
    if (message.slideIndex !== undefined) {
      NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex.encode(message.slideIndex, writer.uint32(34).fork()).ldelim();
    }
    if (message.activeFocus !== undefined) {
      NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus.encode(message.activeFocus, writer.uint32(42).fork()).ldelim();
    }
    if (message.activeTrigger !== undefined) {
      NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger.encode(message.activeTrigger, writer.uint32(50).fork())
        .ldelim();
    }
    if (message.activeNextTrigger !== undefined) {
      NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger.encode(
        message.activeNextTrigger,
        writer.uint32(58).fork(),
      ).ldelim();
    }
    if (message.activePreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger.encode(
        message.activePreviousTrigger,
        writer.uint32(66).fork(),
      ).ldelim();
    }
    if (message.activeIndexTrigger !== undefined) {
      NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger.encode(
        message.activeIndexTrigger,
        writer.uint32(74).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.activeTimelineOperation = NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.activeTimelineStatus = NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.active = NetworkAPIV1_APIV1AnnouncementResponse_Active.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.slideIndex = NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.activeFocus = NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.activeTrigger = NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.activeNextTrigger = NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.activePreviousTrigger = NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.activeIndexTrigger = NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AnnouncementResponse {
    return {
      activeTimelineOperation: isSet(object.activeTimelineOperation)
        ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation.fromJSON(object.activeTimelineOperation)
        : undefined,
      activeTimelineStatus: isSet(object.activeTimelineStatus)
        ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus.fromJSON(object.activeTimelineStatus)
        : undefined,
      active: isSet(object.active) ? NetworkAPIV1_APIV1AnnouncementResponse_Active.fromJSON(object.active) : undefined,
      slideIndex: isSet(object.slideIndex)
        ? NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex.fromJSON(object.slideIndex)
        : undefined,
      activeFocus: isSet(object.activeFocus)
        ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus.fromJSON(object.activeFocus)
        : undefined,
      activeTrigger: isSet(object.activeTrigger)
        ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger.fromJSON(object.activeTrigger)
        : undefined,
      activeNextTrigger: isSet(object.activeNextTrigger)
        ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger.fromJSON(object.activeNextTrigger)
        : undefined,
      activePreviousTrigger: isSet(object.activePreviousTrigger)
        ? NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger.fromJSON(object.activePreviousTrigger)
        : undefined,
      activeIndexTrigger: isSet(object.activeIndexTrigger)
        ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger.fromJSON(object.activeIndexTrigger)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1AnnouncementResponse): unknown {
    const obj: any = {};
    message.activeTimelineOperation !== undefined && (obj.activeTimelineOperation = message.activeTimelineOperation
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation.toJSON(message.activeTimelineOperation)
      : undefined);
    message.activeTimelineStatus !== undefined && (obj.activeTimelineStatus = message.activeTimelineStatus
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus.toJSON(message.activeTimelineStatus)
      : undefined);
    message.active !== undefined &&
      (obj.active = message.active ? NetworkAPIV1_APIV1AnnouncementResponse_Active.toJSON(message.active) : undefined);
    message.slideIndex !== undefined && (obj.slideIndex = message.slideIndex
      ? NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex.toJSON(message.slideIndex)
      : undefined);
    message.activeFocus !== undefined && (obj.activeFocus = message.activeFocus
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus.toJSON(message.activeFocus)
      : undefined);
    message.activeTrigger !== undefined && (obj.activeTrigger = message.activeTrigger
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger.toJSON(message.activeTrigger)
      : undefined);
    message.activeNextTrigger !== undefined && (obj.activeNextTrigger = message.activeNextTrigger
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger.toJSON(message.activeNextTrigger)
      : undefined);
    message.activePreviousTrigger !== undefined && (obj.activePreviousTrigger = message.activePreviousTrigger
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger.toJSON(message.activePreviousTrigger)
      : undefined);
    message.activeIndexTrigger !== undefined && (obj.activeIndexTrigger = message.activeIndexTrigger
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger.toJSON(message.activeIndexTrigger)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse {
    return NetworkAPIV1_APIV1AnnouncementResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse();
    message.activeTimelineOperation =
      (object.activeTimelineOperation !== undefined && object.activeTimelineOperation !== null)
        ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation.fromPartial(object.activeTimelineOperation)
        : undefined;
    message.activeTimelineStatus = (object.activeTimelineStatus !== undefined && object.activeTimelineStatus !== null)
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus.fromPartial(object.activeTimelineStatus)
      : undefined;
    message.active = (object.active !== undefined && object.active !== null)
      ? NetworkAPIV1_APIV1AnnouncementResponse_Active.fromPartial(object.active)
      : undefined;
    message.slideIndex = (object.slideIndex !== undefined && object.slideIndex !== null)
      ? NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex.fromPartial(object.slideIndex)
      : undefined;
    message.activeFocus = (object.activeFocus !== undefined && object.activeFocus !== null)
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus.fromPartial(object.activeFocus)
      : undefined;
    message.activeTrigger = (object.activeTrigger !== undefined && object.activeTrigger !== null)
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger.fromPartial(object.activeTrigger)
      : undefined;
    message.activeNextTrigger = (object.activeNextTrigger !== undefined && object.activeNextTrigger !== null)
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger.fromPartial(object.activeNextTrigger)
      : undefined;
    message.activePreviousTrigger =
      (object.activePreviousTrigger !== undefined && object.activePreviousTrigger !== null)
        ? NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger.fromPartial(object.activePreviousTrigger)
        : undefined;
    message.activeIndexTrigger = (object.activeIndexTrigger !== undefined && object.activeIndexTrigger !== null)
      ? NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger.fromPartial(object.activeIndexTrigger)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation(): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation = {
  encode(
    _: NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation {
    return NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineOperation();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus(): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus {
  return { isRunning: false, currentTime: 0 };
}

export const NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus = {
  encode(
    message: NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.isRunning === true) {
      writer.uint32(8).bool(message.isRunning);
    }
    if (message.currentTime !== 0) {
      writer.uint32(17).double(message.currentTime);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.isRunning = reader.bool();
          continue;
        case 2:
          if (tag != 17) {
            break;
          }

          message.currentTime = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus {
    return {
      isRunning: isSet(object.isRunning) ? Boolean(object.isRunning) : false,
      currentTime: isSet(object.currentTime) ? Number(object.currentTime) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus): unknown {
    const obj: any = {};
    message.isRunning !== undefined && (obj.isRunning = message.isRunning);
    message.currentTime !== undefined && (obj.currentTime = message.currentTime);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus {
    return NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveTimelineStatus();
    message.isRunning = object.isRunning ?? false;
    message.currentTime = object.currentTime ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementResponse_Active(): NetworkAPIV1_APIV1AnnouncementResponse_Active {
  return { announcement: undefined };
}

export const NetworkAPIV1_APIV1AnnouncementResponse_Active = {
  encode(message: NetworkAPIV1_APIV1AnnouncementResponse_Active, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.announcement !== undefined) {
      APIV1Presentation.encode(message.announcement, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementResponse_Active {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_Active();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.announcement = APIV1Presentation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AnnouncementResponse_Active {
    return { announcement: isSet(object.announcement) ? APIV1Presentation.fromJSON(object.announcement) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1AnnouncementResponse_Active): unknown {
    const obj: any = {};
    message.announcement !== undefined &&
      (obj.announcement = message.announcement ? APIV1Presentation.toJSON(message.announcement) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_Active>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_Active {
    return NetworkAPIV1_APIV1AnnouncementResponse_Active.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_Active>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_Active {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_Active();
    message.announcement = (object.announcement !== undefined && object.announcement !== null)
      ? APIV1Presentation.fromPartial(object.announcement)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementResponse_SlideIndex(): NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex {
  return { announcementIndex: undefined };
}

export const NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex = {
  encode(
    message: NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.announcementIndex !== undefined) {
      APIV1SlideIndex.encode(message.announcementIndex, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_SlideIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.announcementIndex = APIV1SlideIndex.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex {
    return {
      announcementIndex: isSet(object.announcementIndex)
        ? APIV1SlideIndex.fromJSON(object.announcementIndex)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex): unknown {
    const obj: any = {};
    message.announcementIndex !== undefined &&
      (obj.announcementIndex = message.announcementIndex
        ? APIV1SlideIndex.toJSON(message.announcementIndex)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex {
    return NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_SlideIndex {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_SlideIndex();
    message.announcementIndex = (object.announcementIndex !== undefined && object.announcementIndex !== null)
      ? APIV1SlideIndex.fromPartial(object.announcementIndex)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus(): NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus = {
  encode(_: NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus {
    return NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveFocus();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger(): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger = {
  encode(
    _: NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger {
    return NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveTrigger();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger(): NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger = {
  encode(
    _: NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger {
    return NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveNextTrigger();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger(): NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger = {
  encode(
    _: NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger {
    return NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActivePreviousTrigger();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger(): NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger {
  return {};
}

export const NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger = {
  encode(
    _: NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger {
    return NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger {
    const message = createBaseNetworkAPIV1_APIV1AnnouncementResponse_ActiveIndexTrigger();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioResponse(): NetworkAPIV1_APIV1AudioResponse {
  return {
    playlists: undefined,
    playlist: undefined,
    update: undefined,
    playlistFocused: undefined,
    playlistActive: undefined,
    playlistNextFocus: undefined,
    playlistPreviousFocus: undefined,
    playlistActiveFocus: undefined,
    playlistIdFocus: undefined,
    playlistFocusedTrigger: undefined,
    playlistActiveTrigger: undefined,
    playlistIdTrigger: undefined,
    playlistFocusedNextTrigger: undefined,
    playlistFocusedPreviousTrigger: undefined,
    playlistFocusedIdTrigger: undefined,
    playlistActiveNextTrigger: undefined,
    playlistActivePreviousTrigger: undefined,
    playlistActiveIdTrigger: undefined,
    playlistIdNextTrigger: undefined,
    playlistIdPreviousTrigger: undefined,
  };
}

export const NetworkAPIV1_APIV1AudioResponse = {
  encode(message: NetworkAPIV1_APIV1AudioResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playlists !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_Playlists.encode(message.playlists, writer.uint32(10).fork()).ldelim();
    }
    if (message.playlist !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_Playlist.encode(message.playlist, writer.uint32(18).fork()).ldelim();
    }
    if (message.update !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate.encode(message.update, writer.uint32(26).fork()).ldelim();
    }
    if (message.playlistFocused !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist.encode(message.playlistFocused, writer.uint32(34).fork())
        .ldelim();
    }
    if (message.playlistActive !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_ActivePlaylist.encode(message.playlistActive, writer.uint32(42).fork()).ldelim();
    }
    if (message.playlistNextFocus !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistNextFocus, writer.uint32(50).fork()).ldelim();
    }
    if (message.playlistPreviousFocus !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistPreviousFocus, writer.uint32(58).fork())
        .ldelim();
    }
    if (message.playlistActiveFocus !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistActiveFocus, writer.uint32(66).fork())
        .ldelim();
    }
    if (message.playlistIdFocus !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistIdFocus, writer.uint32(74).fork()).ldelim();
    }
    if (message.playlistFocusedTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistFocusedTrigger, writer.uint32(82).fork())
        .ldelim();
    }
    if (message.playlistActiveTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistActiveTrigger, writer.uint32(90).fork())
        .ldelim();
    }
    if (message.playlistIdTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistIdTrigger, writer.uint32(98).fork()).ldelim();
    }
    if (message.playlistFocusedNextTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistFocusedNextTrigger, writer.uint32(106).fork())
        .ldelim();
    }
    if (message.playlistFocusedPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(
        message.playlistFocusedPreviousTrigger,
        writer.uint32(114).fork(),
      ).ldelim();
    }
    if (message.playlistFocusedIdTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistFocusedIdTrigger, writer.uint32(122).fork())
        .ldelim();
    }
    if (message.playlistActiveNextTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistActiveNextTrigger, writer.uint32(130).fork())
        .ldelim();
    }
    if (message.playlistActivePreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(
        message.playlistActivePreviousTrigger,
        writer.uint32(138).fork(),
      ).ldelim();
    }
    if (message.playlistActiveIdTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistActiveIdTrigger, writer.uint32(146).fork())
        .ldelim();
    }
    if (message.playlistIdNextTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistIdNextTrigger, writer.uint32(154).fork())
        .ldelim();
    }
    if (message.playlistIdPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1AudioResponse_EmptyMessage.encode(message.playlistIdPreviousTrigger, writer.uint32(162).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlists = NetworkAPIV1_APIV1AudioResponse_Playlists.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.playlist = NetworkAPIV1_APIV1AudioResponse_Playlist.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.update = NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.playlistFocused = NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.playlistActive = NetworkAPIV1_APIV1AudioResponse_ActivePlaylist.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.playlistNextFocus = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.playlistPreviousFocus = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.playlistActiveFocus = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.playlistIdFocus = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.playlistFocusedTrigger = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.playlistActiveTrigger = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.playlistIdTrigger = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 106) {
            break;
          }

          message.playlistFocusedNextTrigger = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 14:
          if (tag != 114) {
            break;
          }

          message.playlistFocusedPreviousTrigger = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 15:
          if (tag != 122) {
            break;
          }

          message.playlistFocusedIdTrigger = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 16:
          if (tag != 130) {
            break;
          }

          message.playlistActiveNextTrigger = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 17:
          if (tag != 138) {
            break;
          }

          message.playlistActivePreviousTrigger = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 18:
          if (tag != 146) {
            break;
          }

          message.playlistActiveIdTrigger = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 19:
          if (tag != 154) {
            break;
          }

          message.playlistIdNextTrigger = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag != 162) {
            break;
          }

          message.playlistIdPreviousTrigger = NetworkAPIV1_APIV1AudioResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AudioResponse {
    return {
      playlists: isSet(object.playlists)
        ? NetworkAPIV1_APIV1AudioResponse_Playlists.fromJSON(object.playlists)
        : undefined,
      playlist: isSet(object.playlist) ? NetworkAPIV1_APIV1AudioResponse_Playlist.fromJSON(object.playlist) : undefined,
      update: isSet(object.update) ? NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate.fromJSON(object.update) : undefined,
      playlistFocused: isSet(object.playlistFocused)
        ? NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist.fromJSON(object.playlistFocused)
        : undefined,
      playlistActive: isSet(object.playlistActive)
        ? NetworkAPIV1_APIV1AudioResponse_ActivePlaylist.fromJSON(object.playlistActive)
        : undefined,
      playlistNextFocus: isSet(object.playlistNextFocus)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistNextFocus)
        : undefined,
      playlistPreviousFocus: isSet(object.playlistPreviousFocus)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistPreviousFocus)
        : undefined,
      playlistActiveFocus: isSet(object.playlistActiveFocus)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistActiveFocus)
        : undefined,
      playlistIdFocus: isSet(object.playlistIdFocus)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistIdFocus)
        : undefined,
      playlistFocusedTrigger: isSet(object.playlistFocusedTrigger)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistFocusedTrigger)
        : undefined,
      playlistActiveTrigger: isSet(object.playlistActiveTrigger)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistActiveTrigger)
        : undefined,
      playlistIdTrigger: isSet(object.playlistIdTrigger)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistIdTrigger)
        : undefined,
      playlistFocusedNextTrigger: isSet(object.playlistFocusedNextTrigger)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistFocusedNextTrigger)
        : undefined,
      playlistFocusedPreviousTrigger: isSet(object.playlistFocusedPreviousTrigger)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistFocusedPreviousTrigger)
        : undefined,
      playlistFocusedIdTrigger: isSet(object.playlistFocusedIdTrigger)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistFocusedIdTrigger)
        : undefined,
      playlistActiveNextTrigger: isSet(object.playlistActiveNextTrigger)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistActiveNextTrigger)
        : undefined,
      playlistActivePreviousTrigger: isSet(object.playlistActivePreviousTrigger)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistActivePreviousTrigger)
        : undefined,
      playlistActiveIdTrigger: isSet(object.playlistActiveIdTrigger)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistActiveIdTrigger)
        : undefined,
      playlistIdNextTrigger: isSet(object.playlistIdNextTrigger)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistIdNextTrigger)
        : undefined,
      playlistIdPreviousTrigger: isSet(object.playlistIdPreviousTrigger)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromJSON(object.playlistIdPreviousTrigger)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1AudioResponse): unknown {
    const obj: any = {};
    message.playlists !== undefined && (obj.playlists = message.playlists
      ? NetworkAPIV1_APIV1AudioResponse_Playlists.toJSON(message.playlists)
      : undefined);
    message.playlist !== undefined &&
      (obj.playlist = message.playlist ? NetworkAPIV1_APIV1AudioResponse_Playlist.toJSON(message.playlist) : undefined);
    message.update !== undefined &&
      (obj.update = message.update ? NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate.toJSON(message.update) : undefined);
    message.playlistFocused !== undefined && (obj.playlistFocused = message.playlistFocused
      ? NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist.toJSON(message.playlistFocused)
      : undefined);
    message.playlistActive !== undefined && (obj.playlistActive = message.playlistActive
      ? NetworkAPIV1_APIV1AudioResponse_ActivePlaylist.toJSON(message.playlistActive)
      : undefined);
    message.playlistNextFocus !== undefined && (obj.playlistNextFocus = message.playlistNextFocus
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistNextFocus)
      : undefined);
    message.playlistPreviousFocus !== undefined && (obj.playlistPreviousFocus = message.playlistPreviousFocus
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistPreviousFocus)
      : undefined);
    message.playlistActiveFocus !== undefined && (obj.playlistActiveFocus = message.playlistActiveFocus
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistActiveFocus)
      : undefined);
    message.playlistIdFocus !== undefined && (obj.playlistIdFocus = message.playlistIdFocus
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistIdFocus)
      : undefined);
    message.playlistFocusedTrigger !== undefined && (obj.playlistFocusedTrigger = message.playlistFocusedTrigger
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistFocusedTrigger)
      : undefined);
    message.playlistActiveTrigger !== undefined && (obj.playlistActiveTrigger = message.playlistActiveTrigger
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistActiveTrigger)
      : undefined);
    message.playlistIdTrigger !== undefined && (obj.playlistIdTrigger = message.playlistIdTrigger
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistIdTrigger)
      : undefined);
    message.playlistFocusedNextTrigger !== undefined &&
      (obj.playlistFocusedNextTrigger = message.playlistFocusedNextTrigger
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistFocusedNextTrigger)
        : undefined);
    message.playlistFocusedPreviousTrigger !== undefined &&
      (obj.playlistFocusedPreviousTrigger = message.playlistFocusedPreviousTrigger
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistFocusedPreviousTrigger)
        : undefined);
    message.playlistFocusedIdTrigger !== undefined && (obj.playlistFocusedIdTrigger = message.playlistFocusedIdTrigger
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistFocusedIdTrigger)
      : undefined);
    message.playlistActiveNextTrigger !== undefined &&
      (obj.playlistActiveNextTrigger = message.playlistActiveNextTrigger
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistActiveNextTrigger)
        : undefined);
    message.playlistActivePreviousTrigger !== undefined &&
      (obj.playlistActivePreviousTrigger = message.playlistActivePreviousTrigger
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistActivePreviousTrigger)
        : undefined);
    message.playlistActiveIdTrigger !== undefined && (obj.playlistActiveIdTrigger = message.playlistActiveIdTrigger
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistActiveIdTrigger)
      : undefined);
    message.playlistIdNextTrigger !== undefined && (obj.playlistIdNextTrigger = message.playlistIdNextTrigger
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistIdNextTrigger)
      : undefined);
    message.playlistIdPreviousTrigger !== undefined &&
      (obj.playlistIdPreviousTrigger = message.playlistIdPreviousTrigger
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.toJSON(message.playlistIdPreviousTrigger)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse>, I>>(base?: I): NetworkAPIV1_APIV1AudioResponse {
    return NetworkAPIV1_APIV1AudioResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AudioResponse {
    const message = createBaseNetworkAPIV1_APIV1AudioResponse();
    message.playlists = (object.playlists !== undefined && object.playlists !== null)
      ? NetworkAPIV1_APIV1AudioResponse_Playlists.fromPartial(object.playlists)
      : undefined;
    message.playlist = (object.playlist !== undefined && object.playlist !== null)
      ? NetworkAPIV1_APIV1AudioResponse_Playlist.fromPartial(object.playlist)
      : undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate.fromPartial(object.update)
      : undefined;
    message.playlistFocused = (object.playlistFocused !== undefined && object.playlistFocused !== null)
      ? NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist.fromPartial(object.playlistFocused)
      : undefined;
    message.playlistActive = (object.playlistActive !== undefined && object.playlistActive !== null)
      ? NetworkAPIV1_APIV1AudioResponse_ActivePlaylist.fromPartial(object.playlistActive)
      : undefined;
    message.playlistNextFocus = (object.playlistNextFocus !== undefined && object.playlistNextFocus !== null)
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistNextFocus)
      : undefined;
    message.playlistPreviousFocus =
      (object.playlistPreviousFocus !== undefined && object.playlistPreviousFocus !== null)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistPreviousFocus)
        : undefined;
    message.playlistActiveFocus = (object.playlistActiveFocus !== undefined && object.playlistActiveFocus !== null)
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistActiveFocus)
      : undefined;
    message.playlistIdFocus = (object.playlistIdFocus !== undefined && object.playlistIdFocus !== null)
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistIdFocus)
      : undefined;
    message.playlistFocusedTrigger =
      (object.playlistFocusedTrigger !== undefined && object.playlistFocusedTrigger !== null)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistFocusedTrigger)
        : undefined;
    message.playlistActiveTrigger =
      (object.playlistActiveTrigger !== undefined && object.playlistActiveTrigger !== null)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistActiveTrigger)
        : undefined;
    message.playlistIdTrigger = (object.playlistIdTrigger !== undefined && object.playlistIdTrigger !== null)
      ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistIdTrigger)
      : undefined;
    message.playlistFocusedNextTrigger =
      (object.playlistFocusedNextTrigger !== undefined && object.playlistFocusedNextTrigger !== null)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistFocusedNextTrigger)
        : undefined;
    message.playlistFocusedPreviousTrigger =
      (object.playlistFocusedPreviousTrigger !== undefined && object.playlistFocusedPreviousTrigger !== null)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistFocusedPreviousTrigger)
        : undefined;
    message.playlistFocusedIdTrigger =
      (object.playlistFocusedIdTrigger !== undefined && object.playlistFocusedIdTrigger !== null)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistFocusedIdTrigger)
        : undefined;
    message.playlistActiveNextTrigger =
      (object.playlistActiveNextTrigger !== undefined && object.playlistActiveNextTrigger !== null)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistActiveNextTrigger)
        : undefined;
    message.playlistActivePreviousTrigger =
      (object.playlistActivePreviousTrigger !== undefined && object.playlistActivePreviousTrigger !== null)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistActivePreviousTrigger)
        : undefined;
    message.playlistActiveIdTrigger =
      (object.playlistActiveIdTrigger !== undefined && object.playlistActiveIdTrigger !== null)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistActiveIdTrigger)
        : undefined;
    message.playlistIdNextTrigger =
      (object.playlistIdNextTrigger !== undefined && object.playlistIdNextTrigger !== null)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistIdNextTrigger)
        : undefined;
    message.playlistIdPreviousTrigger =
      (object.playlistIdPreviousTrigger !== undefined && object.playlistIdPreviousTrigger !== null)
        ? NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(object.playlistIdPreviousTrigger)
        : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioResponse_Playlists(): NetworkAPIV1_APIV1AudioResponse_Playlists {
  return { playlists: [] };
}

export const NetworkAPIV1_APIV1AudioResponse_Playlists = {
  encode(message: NetworkAPIV1_APIV1AudioResponse_Playlists, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.playlists) {
      APIV1Playlist.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioResponse_Playlists {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_Playlists();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlists.push(APIV1Playlist.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AudioResponse_Playlists {
    return {
      playlists: Array.isArray(object?.playlists) ? object.playlists.map((e: any) => APIV1Playlist.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1AudioResponse_Playlists): unknown {
    const obj: any = {};
    if (message.playlists) {
      obj.playlists = message.playlists.map((e) => e ? APIV1Playlist.toJSON(e) : undefined);
    } else {
      obj.playlists = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_Playlists>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AudioResponse_Playlists {
    return NetworkAPIV1_APIV1AudioResponse_Playlists.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_Playlists>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AudioResponse_Playlists {
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_Playlists();
    message.playlists = object.playlists?.map((e) => APIV1Playlist.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioResponse_Playlist(): NetworkAPIV1_APIV1AudioResponse_Playlist {
  return { id: undefined, items: [] };
}

export const NetworkAPIV1_APIV1AudioResponse_Playlist = {
  encode(message: NetworkAPIV1_APIV1AudioResponse_Playlist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.items) {
      APIV1MediaPlaylistItem.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioResponse_Playlist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_Playlist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.items.push(APIV1MediaPlaylistItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AudioResponse_Playlist {
    return {
      id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined,
      items: Array.isArray(object?.items) ? object.items.map((e: any) => APIV1MediaPlaylistItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1AudioResponse_Playlist): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    if (message.items) {
      obj.items = message.items.map((e) => e ? APIV1MediaPlaylistItem.toJSON(e) : undefined);
    } else {
      obj.items = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_Playlist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AudioResponse_Playlist {
    return NetworkAPIV1_APIV1AudioResponse_Playlist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_Playlist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AudioResponse_Playlist {
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_Playlist();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    message.items = object.items?.map((e) => APIV1MediaPlaylistItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioResponse_PlaylistUpdate(): NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate {
  return { id: undefined };
}

export const NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate = {
  encode(
    message: NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_PlaylistUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate {
    return { id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate {
    return NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AudioResponse_PlaylistUpdate {
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_PlaylistUpdate();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioResponse_EmptyMessage(): NetworkAPIV1_APIV1AudioResponse_EmptyMessage {
  return {};
}

export const NetworkAPIV1_APIV1AudioResponse_EmptyMessage = {
  encode(_: NetworkAPIV1_APIV1AudioResponse_EmptyMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioResponse_EmptyMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_EmptyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1AudioResponse_EmptyMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1AudioResponse_EmptyMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_EmptyMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AudioResponse_EmptyMessage {
    return NetworkAPIV1_APIV1AudioResponse_EmptyMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_EmptyMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1AudioResponse_EmptyMessage {
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_EmptyMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioResponse_FocusedPlaylist(): NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist {
  return { id: undefined };
}

export const NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist = {
  encode(
    message: NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_FocusedPlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist {
    return { id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist {
    return NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AudioResponse_FocusedPlaylist {
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_FocusedPlaylist();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1AudioResponse_ActivePlaylist(): NetworkAPIV1_APIV1AudioResponse_ActivePlaylist {
  return { playlist: undefined, item: undefined };
}

export const NetworkAPIV1_APIV1AudioResponse_ActivePlaylist = {
  encode(
    message: NetworkAPIV1_APIV1AudioResponse_ActivePlaylist,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.playlist !== undefined) {
      APIV1Identifier.encode(message.playlist, writer.uint32(10).fork()).ldelim();
    }
    if (message.item !== undefined) {
      APIV1Identifier.encode(message.item, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1AudioResponse_ActivePlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_ActivePlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlist = APIV1Identifier.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.item = APIV1Identifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1AudioResponse_ActivePlaylist {
    return {
      playlist: isSet(object.playlist) ? APIV1Identifier.fromJSON(object.playlist) : undefined,
      item: isSet(object.item) ? APIV1Identifier.fromJSON(object.item) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1AudioResponse_ActivePlaylist): unknown {
    const obj: any = {};
    message.playlist !== undefined &&
      (obj.playlist = message.playlist ? APIV1Identifier.toJSON(message.playlist) : undefined);
    message.item !== undefined && (obj.item = message.item ? APIV1Identifier.toJSON(message.item) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_ActivePlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1AudioResponse_ActivePlaylist {
    return NetworkAPIV1_APIV1AudioResponse_ActivePlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1AudioResponse_ActivePlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1AudioResponse_ActivePlaylist {
    const message = createBaseNetworkAPIV1_APIV1AudioResponse_ActivePlaylist();
    message.playlist = (object.playlist !== undefined && object.playlist !== null)
      ? APIV1Identifier.fromPartial(object.playlist)
      : undefined;
    message.item = (object.item !== undefined && object.item !== null)
      ? APIV1Identifier.fromPartial(object.item)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureResponse(): NetworkAPIV1_APIV1CaptureResponse {
  return {
    getStatus: undefined,
    operation: undefined,
    getSettings: undefined,
    setSettings: undefined,
    getEncodings: undefined,
  };
}

export const NetworkAPIV1_APIV1CaptureResponse = {
  encode(message: NetworkAPIV1_APIV1CaptureResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.getStatus !== undefined) {
      NetworkAPIV1_APIV1CaptureResponse_GetStatus.encode(message.getStatus, writer.uint32(10).fork()).ldelim();
    }
    if (message.operation !== undefined) {
      NetworkAPIV1_APIV1CaptureResponse_Operation.encode(message.operation, writer.uint32(18).fork()).ldelim();
    }
    if (message.getSettings !== undefined) {
      NetworkAPIV1_APIV1CaptureResponse_GetSettings.encode(message.getSettings, writer.uint32(26).fork()).ldelim();
    }
    if (message.setSettings !== undefined) {
      NetworkAPIV1_APIV1CaptureResponse_SetSettings.encode(message.setSettings, writer.uint32(34).fork()).ldelim();
    }
    if (message.getEncodings !== undefined) {
      NetworkAPIV1_APIV1CaptureResponse_Encodings.encode(message.getEncodings, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.getStatus = NetworkAPIV1_APIV1CaptureResponse_GetStatus.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.operation = NetworkAPIV1_APIV1CaptureResponse_Operation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getSettings = NetworkAPIV1_APIV1CaptureResponse_GetSettings.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.setSettings = NetworkAPIV1_APIV1CaptureResponse_SetSettings.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.getEncodings = NetworkAPIV1_APIV1CaptureResponse_Encodings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1CaptureResponse {
    return {
      getStatus: isSet(object.getStatus)
        ? NetworkAPIV1_APIV1CaptureResponse_GetStatus.fromJSON(object.getStatus)
        : undefined,
      operation: isSet(object.operation)
        ? NetworkAPIV1_APIV1CaptureResponse_Operation.fromJSON(object.operation)
        : undefined,
      getSettings: isSet(object.getSettings)
        ? NetworkAPIV1_APIV1CaptureResponse_GetSettings.fromJSON(object.getSettings)
        : undefined,
      setSettings: isSet(object.setSettings)
        ? NetworkAPIV1_APIV1CaptureResponse_SetSettings.fromJSON(object.setSettings)
        : undefined,
      getEncodings: isSet(object.getEncodings)
        ? NetworkAPIV1_APIV1CaptureResponse_Encodings.fromJSON(object.getEncodings)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1CaptureResponse): unknown {
    const obj: any = {};
    message.getStatus !== undefined && (obj.getStatus = message.getStatus
      ? NetworkAPIV1_APIV1CaptureResponse_GetStatus.toJSON(message.getStatus)
      : undefined);
    message.operation !== undefined && (obj.operation = message.operation
      ? NetworkAPIV1_APIV1CaptureResponse_Operation.toJSON(message.operation)
      : undefined);
    message.getSettings !== undefined && (obj.getSettings = message.getSettings
      ? NetworkAPIV1_APIV1CaptureResponse_GetSettings.toJSON(message.getSettings)
      : undefined);
    message.setSettings !== undefined && (obj.setSettings = message.setSettings
      ? NetworkAPIV1_APIV1CaptureResponse_SetSettings.toJSON(message.setSettings)
      : undefined);
    message.getEncodings !== undefined && (obj.getEncodings = message.getEncodings
      ? NetworkAPIV1_APIV1CaptureResponse_Encodings.toJSON(message.getEncodings)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureResponse {
    return NetworkAPIV1_APIV1CaptureResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1CaptureResponse {
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse();
    message.getStatus = (object.getStatus !== undefined && object.getStatus !== null)
      ? NetworkAPIV1_APIV1CaptureResponse_GetStatus.fromPartial(object.getStatus)
      : undefined;
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? NetworkAPIV1_APIV1CaptureResponse_Operation.fromPartial(object.operation)
      : undefined;
    message.getSettings = (object.getSettings !== undefined && object.getSettings !== null)
      ? NetworkAPIV1_APIV1CaptureResponse_GetSettings.fromPartial(object.getSettings)
      : undefined;
    message.setSettings = (object.setSettings !== undefined && object.setSettings !== null)
      ? NetworkAPIV1_APIV1CaptureResponse_SetSettings.fromPartial(object.setSettings)
      : undefined;
    message.getEncodings = (object.getEncodings !== undefined && object.getEncodings !== null)
      ? NetworkAPIV1_APIV1CaptureResponse_Encodings.fromPartial(object.getEncodings)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureResponse_GetStatus(): NetworkAPIV1_APIV1CaptureResponse_GetStatus {
  return { status: 0, captureTime: "", statusText: "" };
}

export const NetworkAPIV1_APIV1CaptureResponse_GetStatus = {
  encode(message: NetworkAPIV1_APIV1CaptureResponse_GetStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.captureTime !== "") {
      writer.uint32(18).string(message.captureTime);
    }
    if (message.statusText !== "") {
      writer.uint32(26).string(message.statusText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureResponse_GetStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse_GetStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.captureTime = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.statusText = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1CaptureResponse_GetStatus {
    return {
      status: isSet(object.status)
        ? networkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatusFromJSON(object.status)
        : 0,
      captureTime: isSet(object.captureTime) ? String(object.captureTime) : "",
      statusText: isSet(object.statusText) ? String(object.statusText) : "",
    };
  },

  toJSON(message: NetworkAPIV1_APIV1CaptureResponse_GetStatus): unknown {
    const obj: any = {};
    message.status !== undefined &&
      (obj.status = networkAPIV1_APIV1CaptureResponse_GetStatus_APIV1CaptureStatusToJSON(message.status));
    message.captureTime !== undefined && (obj.captureTime = message.captureTime);
    message.statusText !== undefined && (obj.statusText = message.statusText);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse_GetStatus>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureResponse_GetStatus {
    return NetworkAPIV1_APIV1CaptureResponse_GetStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse_GetStatus>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1CaptureResponse_GetStatus {
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse_GetStatus();
    message.status = object.status ?? 0;
    message.captureTime = object.captureTime ?? "";
    message.statusText = object.statusText ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureResponse_Operation(): NetworkAPIV1_APIV1CaptureResponse_Operation {
  return {};
}

export const NetworkAPIV1_APIV1CaptureResponse_Operation = {
  encode(_: NetworkAPIV1_APIV1CaptureResponse_Operation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureResponse_Operation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse_Operation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1CaptureResponse_Operation {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1CaptureResponse_Operation): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse_Operation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureResponse_Operation {
    return NetworkAPIV1_APIV1CaptureResponse_Operation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse_Operation>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1CaptureResponse_Operation {
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse_Operation();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureResponse_GetSettings(): NetworkAPIV1_APIV1CaptureResponse_GetSettings {
  return { settings: undefined };
}

export const NetworkAPIV1_APIV1CaptureResponse_GetSettings = {
  encode(message: NetworkAPIV1_APIV1CaptureResponse_GetSettings, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.settings !== undefined) {
      APIV1CaptureSettings.encode(message.settings, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureResponse_GetSettings {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse_GetSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.settings = APIV1CaptureSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1CaptureResponse_GetSettings {
    return { settings: isSet(object.settings) ? APIV1CaptureSettings.fromJSON(object.settings) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1CaptureResponse_GetSettings): unknown {
    const obj: any = {};
    message.settings !== undefined &&
      (obj.settings = message.settings ? APIV1CaptureSettings.toJSON(message.settings) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse_GetSettings>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureResponse_GetSettings {
    return NetworkAPIV1_APIV1CaptureResponse_GetSettings.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse_GetSettings>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1CaptureResponse_GetSettings {
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse_GetSettings();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? APIV1CaptureSettings.fromPartial(object.settings)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureResponse_SetSettings(): NetworkAPIV1_APIV1CaptureResponse_SetSettings {
  return {};
}

export const NetworkAPIV1_APIV1CaptureResponse_SetSettings = {
  encode(_: NetworkAPIV1_APIV1CaptureResponse_SetSettings, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureResponse_SetSettings {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse_SetSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1CaptureResponse_SetSettings {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1CaptureResponse_SetSettings): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse_SetSettings>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureResponse_SetSettings {
    return NetworkAPIV1_APIV1CaptureResponse_SetSettings.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse_SetSettings>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1CaptureResponse_SetSettings {
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse_SetSettings();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1CaptureResponse_Encodings(): NetworkAPIV1_APIV1CaptureResponse_Encodings {
  return { encodings: [] };
}

export const NetworkAPIV1_APIV1CaptureResponse_Encodings = {
  encode(message: NetworkAPIV1_APIV1CaptureResponse_Encodings, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.encodings) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1CaptureResponse_Encodings {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse_Encodings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.encodings.push(reader.string());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1CaptureResponse_Encodings {
    return { encodings: Array.isArray(object?.encodings) ? object.encodings.map((e: any) => String(e)) : [] };
  },

  toJSON(message: NetworkAPIV1_APIV1CaptureResponse_Encodings): unknown {
    const obj: any = {};
    if (message.encodings) {
      obj.encodings = message.encodings.map((e) => e);
    } else {
      obj.encodings = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse_Encodings>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1CaptureResponse_Encodings {
    return NetworkAPIV1_APIV1CaptureResponse_Encodings.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1CaptureResponse_Encodings>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1CaptureResponse_Encodings {
    const message = createBaseNetworkAPIV1_APIV1CaptureResponse_Encodings();
    message.encodings = object.encodings?.map((e) => e) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearResponse(): NetworkAPIV1_APIV1ClearResponse {
  return {
    clearLayer: undefined,
    createGroup: undefined,
    getGroup: undefined,
    putGroup: undefined,
    deleteGroup: undefined,
    triggerGroup: undefined,
    getGroups: undefined,
    getGroupIcon: undefined,
    putGroupIcon: undefined,
  };
}

export const NetworkAPIV1_APIV1ClearResponse = {
  encode(message: NetworkAPIV1_APIV1ClearResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clearLayer !== undefined) {
      NetworkAPIV1_APIV1ClearResponse_ClearLayer.encode(message.clearLayer, writer.uint32(10).fork()).ldelim();
    }
    if (message.createGroup !== undefined) {
      NetworkAPIV1_APIV1ClearResponse_CreateGroup.encode(message.createGroup, writer.uint32(18).fork()).ldelim();
    }
    if (message.getGroup !== undefined) {
      NetworkAPIV1_APIV1ClearResponse_GetGroup.encode(message.getGroup, writer.uint32(26).fork()).ldelim();
    }
    if (message.putGroup !== undefined) {
      NetworkAPIV1_APIV1ClearResponse_PutGroup.encode(message.putGroup, writer.uint32(34).fork()).ldelim();
    }
    if (message.deleteGroup !== undefined) {
      NetworkAPIV1_APIV1ClearResponse_DeleteGroup.encode(message.deleteGroup, writer.uint32(42).fork()).ldelim();
    }
    if (message.triggerGroup !== undefined) {
      NetworkAPIV1_APIV1ClearResponse_TriggerGroup.encode(message.triggerGroup, writer.uint32(50).fork()).ldelim();
    }
    if (message.getGroups !== undefined) {
      NetworkAPIV1_APIV1ClearResponse_GetGroups.encode(message.getGroups, writer.uint32(58).fork()).ldelim();
    }
    if (message.getGroupIcon !== undefined) {
      NetworkAPIV1_APIV1ClearResponse_GetGroupIcon.encode(message.getGroupIcon, writer.uint32(66).fork()).ldelim();
    }
    if (message.putGroupIcon !== undefined) {
      NetworkAPIV1_APIV1ClearResponse_PutGroupIcon.encode(message.putGroupIcon, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.clearLayer = NetworkAPIV1_APIV1ClearResponse_ClearLayer.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.createGroup = NetworkAPIV1_APIV1ClearResponse_CreateGroup.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getGroup = NetworkAPIV1_APIV1ClearResponse_GetGroup.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.putGroup = NetworkAPIV1_APIV1ClearResponse_PutGroup.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.deleteGroup = NetworkAPIV1_APIV1ClearResponse_DeleteGroup.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.triggerGroup = NetworkAPIV1_APIV1ClearResponse_TriggerGroup.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.getGroups = NetworkAPIV1_APIV1ClearResponse_GetGroups.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.getGroupIcon = NetworkAPIV1_APIV1ClearResponse_GetGroupIcon.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.putGroupIcon = NetworkAPIV1_APIV1ClearResponse_PutGroupIcon.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearResponse {
    return {
      clearLayer: isSet(object.clearLayer)
        ? NetworkAPIV1_APIV1ClearResponse_ClearLayer.fromJSON(object.clearLayer)
        : undefined,
      createGroup: isSet(object.createGroup)
        ? NetworkAPIV1_APIV1ClearResponse_CreateGroup.fromJSON(object.createGroup)
        : undefined,
      getGroup: isSet(object.getGroup) ? NetworkAPIV1_APIV1ClearResponse_GetGroup.fromJSON(object.getGroup) : undefined,
      putGroup: isSet(object.putGroup) ? NetworkAPIV1_APIV1ClearResponse_PutGroup.fromJSON(object.putGroup) : undefined,
      deleteGroup: isSet(object.deleteGroup)
        ? NetworkAPIV1_APIV1ClearResponse_DeleteGroup.fromJSON(object.deleteGroup)
        : undefined,
      triggerGroup: isSet(object.triggerGroup)
        ? NetworkAPIV1_APIV1ClearResponse_TriggerGroup.fromJSON(object.triggerGroup)
        : undefined,
      getGroups: isSet(object.getGroups)
        ? NetworkAPIV1_APIV1ClearResponse_GetGroups.fromJSON(object.getGroups)
        : undefined,
      getGroupIcon: isSet(object.getGroupIcon)
        ? NetworkAPIV1_APIV1ClearResponse_GetGroupIcon.fromJSON(object.getGroupIcon)
        : undefined,
      putGroupIcon: isSet(object.putGroupIcon)
        ? NetworkAPIV1_APIV1ClearResponse_PutGroupIcon.fromJSON(object.putGroupIcon)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearResponse): unknown {
    const obj: any = {};
    message.clearLayer !== undefined && (obj.clearLayer = message.clearLayer
      ? NetworkAPIV1_APIV1ClearResponse_ClearLayer.toJSON(message.clearLayer)
      : undefined);
    message.createGroup !== undefined && (obj.createGroup = message.createGroup
      ? NetworkAPIV1_APIV1ClearResponse_CreateGroup.toJSON(message.createGroup)
      : undefined);
    message.getGroup !== undefined &&
      (obj.getGroup = message.getGroup ? NetworkAPIV1_APIV1ClearResponse_GetGroup.toJSON(message.getGroup) : undefined);
    message.putGroup !== undefined &&
      (obj.putGroup = message.putGroup ? NetworkAPIV1_APIV1ClearResponse_PutGroup.toJSON(message.putGroup) : undefined);
    message.deleteGroup !== undefined && (obj.deleteGroup = message.deleteGroup
      ? NetworkAPIV1_APIV1ClearResponse_DeleteGroup.toJSON(message.deleteGroup)
      : undefined);
    message.triggerGroup !== undefined && (obj.triggerGroup = message.triggerGroup
      ? NetworkAPIV1_APIV1ClearResponse_TriggerGroup.toJSON(message.triggerGroup)
      : undefined);
    message.getGroups !== undefined && (obj.getGroups = message.getGroups
      ? NetworkAPIV1_APIV1ClearResponse_GetGroups.toJSON(message.getGroups)
      : undefined);
    message.getGroupIcon !== undefined && (obj.getGroupIcon = message.getGroupIcon
      ? NetworkAPIV1_APIV1ClearResponse_GetGroupIcon.toJSON(message.getGroupIcon)
      : undefined);
    message.putGroupIcon !== undefined && (obj.putGroupIcon = message.putGroupIcon
      ? NetworkAPIV1_APIV1ClearResponse_PutGroupIcon.toJSON(message.putGroupIcon)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse>, I>>(base?: I): NetworkAPIV1_APIV1ClearResponse {
    return NetworkAPIV1_APIV1ClearResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearResponse {
    const message = createBaseNetworkAPIV1_APIV1ClearResponse();
    message.clearLayer = (object.clearLayer !== undefined && object.clearLayer !== null)
      ? NetworkAPIV1_APIV1ClearResponse_ClearLayer.fromPartial(object.clearLayer)
      : undefined;
    message.createGroup = (object.createGroup !== undefined && object.createGroup !== null)
      ? NetworkAPIV1_APIV1ClearResponse_CreateGroup.fromPartial(object.createGroup)
      : undefined;
    message.getGroup = (object.getGroup !== undefined && object.getGroup !== null)
      ? NetworkAPIV1_APIV1ClearResponse_GetGroup.fromPartial(object.getGroup)
      : undefined;
    message.putGroup = (object.putGroup !== undefined && object.putGroup !== null)
      ? NetworkAPIV1_APIV1ClearResponse_PutGroup.fromPartial(object.putGroup)
      : undefined;
    message.deleteGroup = (object.deleteGroup !== undefined && object.deleteGroup !== null)
      ? NetworkAPIV1_APIV1ClearResponse_DeleteGroup.fromPartial(object.deleteGroup)
      : undefined;
    message.triggerGroup = (object.triggerGroup !== undefined && object.triggerGroup !== null)
      ? NetworkAPIV1_APIV1ClearResponse_TriggerGroup.fromPartial(object.triggerGroup)
      : undefined;
    message.getGroups = (object.getGroups !== undefined && object.getGroups !== null)
      ? NetworkAPIV1_APIV1ClearResponse_GetGroups.fromPartial(object.getGroups)
      : undefined;
    message.getGroupIcon = (object.getGroupIcon !== undefined && object.getGroupIcon !== null)
      ? NetworkAPIV1_APIV1ClearResponse_GetGroupIcon.fromPartial(object.getGroupIcon)
      : undefined;
    message.putGroupIcon = (object.putGroupIcon !== undefined && object.putGroupIcon !== null)
      ? NetworkAPIV1_APIV1ClearResponse_PutGroupIcon.fromPartial(object.putGroupIcon)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearResponse_ClearLayer(): NetworkAPIV1_APIV1ClearResponse_ClearLayer {
  return {};
}

export const NetworkAPIV1_APIV1ClearResponse_ClearLayer = {
  encode(_: NetworkAPIV1_APIV1ClearResponse_ClearLayer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearResponse_ClearLayer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_ClearLayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1ClearResponse_ClearLayer {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1ClearResponse_ClearLayer): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_ClearLayer>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearResponse_ClearLayer {
    return NetworkAPIV1_APIV1ClearResponse_ClearLayer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_ClearLayer>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1ClearResponse_ClearLayer {
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_ClearLayer();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearResponse_PutGroup(): NetworkAPIV1_APIV1ClearResponse_PutGroup {
  return { group: undefined };
}

export const NetworkAPIV1_APIV1ClearResponse_PutGroup = {
  encode(message: NetworkAPIV1_APIV1ClearResponse_PutGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.group !== undefined) {
      APIV1ClearGroup.encode(message.group, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearResponse_PutGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_PutGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.group = APIV1ClearGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearResponse_PutGroup {
    return { group: isSet(object.group) ? APIV1ClearGroup.fromJSON(object.group) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearResponse_PutGroup): unknown {
    const obj: any = {};
    message.group !== undefined && (obj.group = message.group ? APIV1ClearGroup.toJSON(message.group) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_PutGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearResponse_PutGroup {
    return NetworkAPIV1_APIV1ClearResponse_PutGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_PutGroup>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearResponse_PutGroup {
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_PutGroup();
    message.group = (object.group !== undefined && object.group !== null)
      ? APIV1ClearGroup.fromPartial(object.group)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearResponse_DeleteGroup(): NetworkAPIV1_APIV1ClearResponse_DeleteGroup {
  return {};
}

export const NetworkAPIV1_APIV1ClearResponse_DeleteGroup = {
  encode(_: NetworkAPIV1_APIV1ClearResponse_DeleteGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearResponse_DeleteGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_DeleteGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1ClearResponse_DeleteGroup {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1ClearResponse_DeleteGroup): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_DeleteGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearResponse_DeleteGroup {
    return NetworkAPIV1_APIV1ClearResponse_DeleteGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_DeleteGroup>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1ClearResponse_DeleteGroup {
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_DeleteGroup();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearResponse_TriggerGroup(): NetworkAPIV1_APIV1ClearResponse_TriggerGroup {
  return {};
}

export const NetworkAPIV1_APIV1ClearResponse_TriggerGroup = {
  encode(_: NetworkAPIV1_APIV1ClearResponse_TriggerGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearResponse_TriggerGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_TriggerGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1ClearResponse_TriggerGroup {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1ClearResponse_TriggerGroup): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_TriggerGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearResponse_TriggerGroup {
    return NetworkAPIV1_APIV1ClearResponse_TriggerGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_TriggerGroup>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1ClearResponse_TriggerGroup {
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_TriggerGroup();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearResponse_CreateGroup(): NetworkAPIV1_APIV1ClearResponse_CreateGroup {
  return { group: undefined };
}

export const NetworkAPIV1_APIV1ClearResponse_CreateGroup = {
  encode(message: NetworkAPIV1_APIV1ClearResponse_CreateGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.group !== undefined) {
      APIV1ClearGroup.encode(message.group, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearResponse_CreateGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_CreateGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.group = APIV1ClearGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearResponse_CreateGroup {
    return { group: isSet(object.group) ? APIV1ClearGroup.fromJSON(object.group) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearResponse_CreateGroup): unknown {
    const obj: any = {};
    message.group !== undefined && (obj.group = message.group ? APIV1ClearGroup.toJSON(message.group) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_CreateGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearResponse_CreateGroup {
    return NetworkAPIV1_APIV1ClearResponse_CreateGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_CreateGroup>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearResponse_CreateGroup {
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_CreateGroup();
    message.group = (object.group !== undefined && object.group !== null)
      ? APIV1ClearGroup.fromPartial(object.group)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearResponse_GetGroup(): NetworkAPIV1_APIV1ClearResponse_GetGroup {
  return { group: undefined };
}

export const NetworkAPIV1_APIV1ClearResponse_GetGroup = {
  encode(message: NetworkAPIV1_APIV1ClearResponse_GetGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.group !== undefined) {
      APIV1ClearGroup.encode(message.group, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearResponse_GetGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_GetGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.group = APIV1ClearGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearResponse_GetGroup {
    return { group: isSet(object.group) ? APIV1ClearGroup.fromJSON(object.group) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearResponse_GetGroup): unknown {
    const obj: any = {};
    message.group !== undefined && (obj.group = message.group ? APIV1ClearGroup.toJSON(message.group) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_GetGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearResponse_GetGroup {
    return NetworkAPIV1_APIV1ClearResponse_GetGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_GetGroup>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearResponse_GetGroup {
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_GetGroup();
    message.group = (object.group !== undefined && object.group !== null)
      ? APIV1ClearGroup.fromPartial(object.group)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearResponse_GetGroups(): NetworkAPIV1_APIV1ClearResponse_GetGroups {
  return { groups: [] };
}

export const NetworkAPIV1_APIV1ClearResponse_GetGroups = {
  encode(message: NetworkAPIV1_APIV1ClearResponse_GetGroups, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.groups) {
      APIV1ClearGroup.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearResponse_GetGroups {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_GetGroups();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.groups.push(APIV1ClearGroup.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearResponse_GetGroups {
    return { groups: Array.isArray(object?.groups) ? object.groups.map((e: any) => APIV1ClearGroup.fromJSON(e)) : [] };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearResponse_GetGroups): unknown {
    const obj: any = {};
    if (message.groups) {
      obj.groups = message.groups.map((e) => e ? APIV1ClearGroup.toJSON(e) : undefined);
    } else {
      obj.groups = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_GetGroups>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearResponse_GetGroups {
    return NetworkAPIV1_APIV1ClearResponse_GetGroups.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_GetGroups>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearResponse_GetGroups {
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_GetGroups();
    message.groups = object.groups?.map((e) => APIV1ClearGroup.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearResponse_GetGroupIcon(): NetworkAPIV1_APIV1ClearResponse_GetGroupIcon {
  return { contentType: "", icon: new Uint8Array() };
}

export const NetworkAPIV1_APIV1ClearResponse_GetGroupIcon = {
  encode(message: NetworkAPIV1_APIV1ClearResponse_GetGroupIcon, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contentType !== "") {
      writer.uint32(10).string(message.contentType);
    }
    if (message.icon.length !== 0) {
      writer.uint32(18).bytes(message.icon);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearResponse_GetGroupIcon {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_GetGroupIcon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.contentType = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.icon = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ClearResponse_GetGroupIcon {
    return {
      contentType: isSet(object.contentType) ? String(object.contentType) : "",
      icon: isSet(object.icon) ? bytesFromBase64(object.icon) : new Uint8Array(),
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ClearResponse_GetGroupIcon): unknown {
    const obj: any = {};
    message.contentType !== undefined && (obj.contentType = message.contentType);
    message.icon !== undefined &&
      (obj.icon = base64FromBytes(message.icon !== undefined ? message.icon : new Uint8Array()));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_GetGroupIcon>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearResponse_GetGroupIcon {
    return NetworkAPIV1_APIV1ClearResponse_GetGroupIcon.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_GetGroupIcon>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ClearResponse_GetGroupIcon {
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_GetGroupIcon();
    message.contentType = object.contentType ?? "";
    message.icon = object.icon ?? new Uint8Array();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ClearResponse_PutGroupIcon(): NetworkAPIV1_APIV1ClearResponse_PutGroupIcon {
  return {};
}

export const NetworkAPIV1_APIV1ClearResponse_PutGroupIcon = {
  encode(_: NetworkAPIV1_APIV1ClearResponse_PutGroupIcon, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ClearResponse_PutGroupIcon {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_PutGroupIcon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1ClearResponse_PutGroupIcon {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1ClearResponse_PutGroupIcon): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_PutGroupIcon>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ClearResponse_PutGroupIcon {
    return NetworkAPIV1_APIV1ClearResponse_PutGroupIcon.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ClearResponse_PutGroupIcon>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1ClearResponse_PutGroupIcon {
    const message = createBaseNetworkAPIV1_APIV1ClearResponse_PutGroupIcon();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1GroupsResponse(): NetworkAPIV1_APIV1GroupsResponse {
  return { groups: undefined, triggerGroup: undefined };
}

export const NetworkAPIV1_APIV1GroupsResponse = {
  encode(message: NetworkAPIV1_APIV1GroupsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.groups !== undefined) {
      NetworkAPIV1_APIV1GroupsResponse_GroupsRequest.encode(message.groups, writer.uint32(10).fork()).ldelim();
    }
    if (message.triggerGroup !== undefined) {
      NetworkAPIV1_APIV1GroupsResponse_TriggerGroup.encode(message.triggerGroup, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1GroupsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1GroupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.groups = NetworkAPIV1_APIV1GroupsResponse_GroupsRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.triggerGroup = NetworkAPIV1_APIV1GroupsResponse_TriggerGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1GroupsResponse {
    return {
      groups: isSet(object.groups) ? NetworkAPIV1_APIV1GroupsResponse_GroupsRequest.fromJSON(object.groups) : undefined,
      triggerGroup: isSet(object.triggerGroup)
        ? NetworkAPIV1_APIV1GroupsResponse_TriggerGroup.fromJSON(object.triggerGroup)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1GroupsResponse): unknown {
    const obj: any = {};
    message.groups !== undefined &&
      (obj.groups = message.groups ? NetworkAPIV1_APIV1GroupsResponse_GroupsRequest.toJSON(message.groups) : undefined);
    message.triggerGroup !== undefined && (obj.triggerGroup = message.triggerGroup
      ? NetworkAPIV1_APIV1GroupsResponse_TriggerGroup.toJSON(message.triggerGroup)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1GroupsResponse {
    return NetworkAPIV1_APIV1GroupsResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1GroupsResponse {
    const message = createBaseNetworkAPIV1_APIV1GroupsResponse();
    message.groups = (object.groups !== undefined && object.groups !== null)
      ? NetworkAPIV1_APIV1GroupsResponse_GroupsRequest.fromPartial(object.groups)
      : undefined;
    message.triggerGroup = (object.triggerGroup !== undefined && object.triggerGroup !== null)
      ? NetworkAPIV1_APIV1GroupsResponse_TriggerGroup.fromPartial(object.triggerGroup)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1GroupsResponse_GroupsRequest(): NetworkAPIV1_APIV1GroupsResponse_GroupsRequest {
  return { groups: [] };
}

export const NetworkAPIV1_APIV1GroupsResponse_GroupsRequest = {
  encode(
    message: NetworkAPIV1_APIV1GroupsResponse_GroupsRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.groups) {
      NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1GroupsResponse_GroupsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1GroupsResponse_GroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.groups.push(NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1GroupsResponse_GroupsRequest {
    return {
      groups: Array.isArray(object?.groups)
        ? object.groups.map((e: any) => NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group.fromJSON(e))
        : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1GroupsResponse_GroupsRequest): unknown {
    const obj: any = {};
    if (message.groups) {
      obj.groups = message.groups.map((e) =>
        e ? NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group.toJSON(e) : undefined
      );
    } else {
      obj.groups = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsResponse_GroupsRequest>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1GroupsResponse_GroupsRequest {
    return NetworkAPIV1_APIV1GroupsResponse_GroupsRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsResponse_GroupsRequest>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1GroupsResponse_GroupsRequest {
    const message = createBaseNetworkAPIV1_APIV1GroupsResponse_GroupsRequest();
    message.groups = object.groups?.map((e) => NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group(): NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group {
  return { id: undefined, color: undefined };
}

export const NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group = {
  encode(
    message: NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.color !== undefined) {
      APIV1Color.encode(message.color, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.color = APIV1Color.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group {
    return {
      id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined,
      color: isSet(object.color) ? APIV1Color.fromJSON(object.color) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    message.color !== undefined && (obj.color = message.color ? APIV1Color.toJSON(message.color) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group {
    return NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group {
    const message = createBaseNetworkAPIV1_APIV1GroupsResponse_GroupsRequest_Group();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    message.color = (object.color !== undefined && object.color !== null)
      ? APIV1Color.fromPartial(object.color)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1GroupsResponse_TriggerGroup(): NetworkAPIV1_APIV1GroupsResponse_TriggerGroup {
  return {};
}

export const NetworkAPIV1_APIV1GroupsResponse_TriggerGroup = {
  encode(_: NetworkAPIV1_APIV1GroupsResponse_TriggerGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1GroupsResponse_TriggerGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1GroupsResponse_TriggerGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1GroupsResponse_TriggerGroup {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1GroupsResponse_TriggerGroup): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsResponse_TriggerGroup>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1GroupsResponse_TriggerGroup {
    return NetworkAPIV1_APIV1GroupsResponse_TriggerGroup.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1GroupsResponse_TriggerGroup>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1GroupsResponse_TriggerGroup {
    const message = createBaseNetworkAPIV1_APIV1GroupsResponse_TriggerGroup();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkResponse(): NetworkAPIV1_APIV1LinkResponse {
  return { heartbeat: undefined, status: undefined, addMember: undefined, removeMember: undefined };
}

export const NetworkAPIV1_APIV1LinkResponse = {
  encode(message: NetworkAPIV1_APIV1LinkResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.heartbeat !== undefined) {
      NetworkAPIV1_APIV1LinkResponse_Heartbeat.encode(message.heartbeat, writer.uint32(10).fork()).ldelim();
    }
    if (message.status !== undefined) {
      NetworkAPIV1_APIV1LinkResponse_Status.encode(message.status, writer.uint32(18).fork()).ldelim();
    }
    if (message.addMember !== undefined) {
      NetworkAPIV1_APIV1LinkResponse_AddMember.encode(message.addMember, writer.uint32(26).fork()).ldelim();
    }
    if (message.removeMember !== undefined) {
      NetworkAPIV1_APIV1LinkResponse_RemoveMember.encode(message.removeMember, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LinkResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.heartbeat = NetworkAPIV1_APIV1LinkResponse_Heartbeat.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.status = NetworkAPIV1_APIV1LinkResponse_Status.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.addMember = NetworkAPIV1_APIV1LinkResponse_AddMember.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.removeMember = NetworkAPIV1_APIV1LinkResponse_RemoveMember.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LinkResponse {
    return {
      heartbeat: isSet(object.heartbeat)
        ? NetworkAPIV1_APIV1LinkResponse_Heartbeat.fromJSON(object.heartbeat)
        : undefined,
      status: isSet(object.status) ? NetworkAPIV1_APIV1LinkResponse_Status.fromJSON(object.status) : undefined,
      addMember: isSet(object.addMember)
        ? NetworkAPIV1_APIV1LinkResponse_AddMember.fromJSON(object.addMember)
        : undefined,
      removeMember: isSet(object.removeMember)
        ? NetworkAPIV1_APIV1LinkResponse_RemoveMember.fromJSON(object.removeMember)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LinkResponse): unknown {
    const obj: any = {};
    message.heartbeat !== undefined && (obj.heartbeat = message.heartbeat
      ? NetworkAPIV1_APIV1LinkResponse_Heartbeat.toJSON(message.heartbeat)
      : undefined);
    message.status !== undefined &&
      (obj.status = message.status ? NetworkAPIV1_APIV1LinkResponse_Status.toJSON(message.status) : undefined);
    message.addMember !== undefined && (obj.addMember = message.addMember
      ? NetworkAPIV1_APIV1LinkResponse_AddMember.toJSON(message.addMember)
      : undefined);
    message.removeMember !== undefined && (obj.removeMember = message.removeMember
      ? NetworkAPIV1_APIV1LinkResponse_RemoveMember.toJSON(message.removeMember)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse>, I>>(base?: I): NetworkAPIV1_APIV1LinkResponse {
    return NetworkAPIV1_APIV1LinkResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LinkResponse {
    const message = createBaseNetworkAPIV1_APIV1LinkResponse();
    message.heartbeat = (object.heartbeat !== undefined && object.heartbeat !== null)
      ? NetworkAPIV1_APIV1LinkResponse_Heartbeat.fromPartial(object.heartbeat)
      : undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? NetworkAPIV1_APIV1LinkResponse_Status.fromPartial(object.status)
      : undefined;
    message.addMember = (object.addMember !== undefined && object.addMember !== null)
      ? NetworkAPIV1_APIV1LinkResponse_AddMember.fromPartial(object.addMember)
      : undefined;
    message.removeMember = (object.removeMember !== undefined && object.removeMember !== null)
      ? NetworkAPIV1_APIV1LinkResponse_RemoveMember.fromPartial(object.removeMember)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkResponse_Heartbeat(): NetworkAPIV1_APIV1LinkResponse_Heartbeat {
  return { groupDefinition: undefined, status: undefined };
}

export const NetworkAPIV1_APIV1LinkResponse_Heartbeat = {
  encode(message: NetworkAPIV1_APIV1LinkResponse_Heartbeat, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.groupDefinition !== undefined) {
      APIV1GroupDefinition.encode(message.groupDefinition, writer.uint32(10).fork()).ldelim();
    }
    if (message.status !== undefined) {
      APIV1GroupMemberStatus.encode(message.status, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LinkResponse_Heartbeat {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_Heartbeat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.groupDefinition = APIV1GroupDefinition.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.status = APIV1GroupMemberStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LinkResponse_Heartbeat {
    return {
      groupDefinition: isSet(object.groupDefinition)
        ? APIV1GroupDefinition.fromJSON(object.groupDefinition)
        : undefined,
      status: isSet(object.status) ? APIV1GroupMemberStatus.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LinkResponse_Heartbeat): unknown {
    const obj: any = {};
    message.groupDefinition !== undefined &&
      (obj.groupDefinition = message.groupDefinition
        ? APIV1GroupDefinition.toJSON(message.groupDefinition)
        : undefined);
    message.status !== undefined &&
      (obj.status = message.status ? APIV1GroupMemberStatus.toJSON(message.status) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_Heartbeat>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LinkResponse_Heartbeat {
    return NetworkAPIV1_APIV1LinkResponse_Heartbeat.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_Heartbeat>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LinkResponse_Heartbeat {
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_Heartbeat();
    message.groupDefinition = (object.groupDefinition !== undefined && object.groupDefinition !== null)
      ? APIV1GroupDefinition.fromPartial(object.groupDefinition)
      : undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? APIV1GroupMemberStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkResponse_Status(): NetworkAPIV1_APIV1LinkResponse_Status {
  return { groupDefinition: undefined, memberName: "" };
}

export const NetworkAPIV1_APIV1LinkResponse_Status = {
  encode(message: NetworkAPIV1_APIV1LinkResponse_Status, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.groupDefinition !== undefined) {
      APIV1GroupDefinition.encode(message.groupDefinition, writer.uint32(10).fork()).ldelim();
    }
    if (message.memberName !== "") {
      writer.uint32(18).string(message.memberName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LinkResponse_Status {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_Status();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.groupDefinition = APIV1GroupDefinition.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.memberName = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LinkResponse_Status {
    return {
      groupDefinition: isSet(object.groupDefinition)
        ? APIV1GroupDefinition.fromJSON(object.groupDefinition)
        : undefined,
      memberName: isSet(object.memberName) ? String(object.memberName) : "",
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LinkResponse_Status): unknown {
    const obj: any = {};
    message.groupDefinition !== undefined &&
      (obj.groupDefinition = message.groupDefinition
        ? APIV1GroupDefinition.toJSON(message.groupDefinition)
        : undefined);
    message.memberName !== undefined && (obj.memberName = message.memberName);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_Status>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LinkResponse_Status {
    return NetworkAPIV1_APIV1LinkResponse_Status.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_Status>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LinkResponse_Status {
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_Status();
    message.groupDefinition = (object.groupDefinition !== undefined && object.groupDefinition !== null)
      ? APIV1GroupDefinition.fromPartial(object.groupDefinition)
      : undefined;
    message.memberName = object.memberName ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkResponse_AddMember(): NetworkAPIV1_APIV1LinkResponse_AddMember {
  return { groupDefinition: undefined, accept: undefined, decline: undefined };
}

export const NetworkAPIV1_APIV1LinkResponse_AddMember = {
  encode(message: NetworkAPIV1_APIV1LinkResponse_AddMember, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.groupDefinition !== undefined) {
      APIV1GroupDefinition.encode(message.groupDefinition, writer.uint32(10).fork()).ldelim();
    }
    if (message.accept !== undefined) {
      NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts.encode(message.accept, writer.uint32(18).fork())
        .ldelim();
    }
    if (message.decline !== undefined) {
      NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline.encode(message.decline, writer.uint32(26).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LinkResponse_AddMember {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_AddMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.groupDefinition = APIV1GroupDefinition.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.accept = NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.decline = NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LinkResponse_AddMember {
    return {
      groupDefinition: isSet(object.groupDefinition)
        ? APIV1GroupDefinition.fromJSON(object.groupDefinition)
        : undefined,
      accept: isSet(object.accept)
        ? NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts.fromJSON(object.accept)
        : undefined,
      decline: isSet(object.decline)
        ? NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline.fromJSON(object.decline)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LinkResponse_AddMember): unknown {
    const obj: any = {};
    message.groupDefinition !== undefined &&
      (obj.groupDefinition = message.groupDefinition
        ? APIV1GroupDefinition.toJSON(message.groupDefinition)
        : undefined);
    message.accept !== undefined && (obj.accept = message.accept
      ? NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts.toJSON(message.accept)
      : undefined);
    message.decline !== undefined && (obj.decline = message.decline
      ? NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline.toJSON(message.decline)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_AddMember>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LinkResponse_AddMember {
    return NetworkAPIV1_APIV1LinkResponse_AddMember.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_AddMember>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LinkResponse_AddMember {
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_AddMember();
    message.groupDefinition = (object.groupDefinition !== undefined && object.groupDefinition !== null)
      ? APIV1GroupDefinition.fromPartial(object.groupDefinition)
      : undefined;
    message.accept = (object.accept !== undefined && object.accept !== null)
      ? NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts.fromPartial(object.accept)
      : undefined;
    message.decline = (object.decline !== undefined && object.decline !== null)
      ? NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline.fromPartial(object.decline)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts(): NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts {
  return {};
}

export const NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts = {
  encode(
    _: NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts {
    return NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts {
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineAccepts();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline(): NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline {
  return { reason: 0 };
}

export const NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline = {
  encode(
    message: NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.reason !== 0) {
      writer.uint32(8).int32(message.reason);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline {
    return {
      reason: isSet(object.reason)
        ? networkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReasonFromJSON(object.reason)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline): unknown {
    const obj: any = {};
    message.reason !== undefined &&
      (obj.reason = networkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline_DeclineReasonToJSON(message.reason));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline {
    return NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline {
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_AddMember_RemoteMachineDecline();
    message.reason = object.reason ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LinkResponse_RemoveMember(): NetworkAPIV1_APIV1LinkResponse_RemoveMember {
  return {};
}

export const NetworkAPIV1_APIV1LinkResponse_RemoveMember = {
  encode(_: NetworkAPIV1_APIV1LinkResponse_RemoveMember, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LinkResponse_RemoveMember {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_RemoveMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1LinkResponse_RemoveMember {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1LinkResponse_RemoveMember): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_RemoveMember>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LinkResponse_RemoveMember {
    return NetworkAPIV1_APIV1LinkResponse_RemoveMember.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LinkResponse_RemoveMember>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1LinkResponse_RemoveMember {
    const message = createBaseNetworkAPIV1_APIV1LinkResponse_RemoveMember();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LibraryResponse(): NetworkAPIV1_APIV1LibraryResponse {
  return { libraries: undefined, library: undefined, triggger: undefined };
}

export const NetworkAPIV1_APIV1LibraryResponse = {
  encode(message: NetworkAPIV1_APIV1LibraryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.libraries !== undefined) {
      NetworkAPIV1_APIV1LibraryResponse_Libraries.encode(message.libraries, writer.uint32(10).fork()).ldelim();
    }
    if (message.library !== undefined) {
      NetworkAPIV1_APIV1LibraryResponse_Library.encode(message.library, writer.uint32(18).fork()).ldelim();
    }
    if (message.triggger !== undefined) {
      NetworkAPIV1_APIV1LibraryResponse_Trigger.encode(message.triggger, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LibraryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LibraryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.libraries = NetworkAPIV1_APIV1LibraryResponse_Libraries.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.library = NetworkAPIV1_APIV1LibraryResponse_Library.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.triggger = NetworkAPIV1_APIV1LibraryResponse_Trigger.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LibraryResponse {
    return {
      libraries: isSet(object.libraries)
        ? NetworkAPIV1_APIV1LibraryResponse_Libraries.fromJSON(object.libraries)
        : undefined,
      library: isSet(object.library) ? NetworkAPIV1_APIV1LibraryResponse_Library.fromJSON(object.library) : undefined,
      triggger: isSet(object.triggger)
        ? NetworkAPIV1_APIV1LibraryResponse_Trigger.fromJSON(object.triggger)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LibraryResponse): unknown {
    const obj: any = {};
    message.libraries !== undefined && (obj.libraries = message.libraries
      ? NetworkAPIV1_APIV1LibraryResponse_Libraries.toJSON(message.libraries)
      : undefined);
    message.library !== undefined &&
      (obj.library = message.library ? NetworkAPIV1_APIV1LibraryResponse_Library.toJSON(message.library) : undefined);
    message.triggger !== undefined &&
      (obj.triggger = message.triggger
        ? NetworkAPIV1_APIV1LibraryResponse_Trigger.toJSON(message.triggger)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LibraryResponse {
    return NetworkAPIV1_APIV1LibraryResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LibraryResponse {
    const message = createBaseNetworkAPIV1_APIV1LibraryResponse();
    message.libraries = (object.libraries !== undefined && object.libraries !== null)
      ? NetworkAPIV1_APIV1LibraryResponse_Libraries.fromPartial(object.libraries)
      : undefined;
    message.library = (object.library !== undefined && object.library !== null)
      ? NetworkAPIV1_APIV1LibraryResponse_Library.fromPartial(object.library)
      : undefined;
    message.triggger = (object.triggger !== undefined && object.triggger !== null)
      ? NetworkAPIV1_APIV1LibraryResponse_Trigger.fromPartial(object.triggger)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LibraryResponse_Libraries(): NetworkAPIV1_APIV1LibraryResponse_Libraries {
  return { libraries: [] };
}

export const NetworkAPIV1_APIV1LibraryResponse_Libraries = {
  encode(message: NetworkAPIV1_APIV1LibraryResponse_Libraries, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.libraries) {
      APIV1Identifier.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LibraryResponse_Libraries {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LibraryResponse_Libraries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.libraries.push(APIV1Identifier.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LibraryResponse_Libraries {
    return {
      libraries: Array.isArray(object?.libraries) ? object.libraries.map((e: any) => APIV1Identifier.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LibraryResponse_Libraries): unknown {
    const obj: any = {};
    if (message.libraries) {
      obj.libraries = message.libraries.map((e) => e ? APIV1Identifier.toJSON(e) : undefined);
    } else {
      obj.libraries = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryResponse_Libraries>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LibraryResponse_Libraries {
    return NetworkAPIV1_APIV1LibraryResponse_Libraries.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryResponse_Libraries>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LibraryResponse_Libraries {
    const message = createBaseNetworkAPIV1_APIV1LibraryResponse_Libraries();
    message.libraries = object.libraries?.map((e) => APIV1Identifier.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LibraryResponse_Library(): NetworkAPIV1_APIV1LibraryResponse_Library {
  return { updateType: 0, items: [] };
}

export const NetworkAPIV1_APIV1LibraryResponse_Library = {
  encode(message: NetworkAPIV1_APIV1LibraryResponse_Library, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.updateType !== 0) {
      writer.uint32(8).int32(message.updateType);
    }
    for (const v of message.items) {
      APIV1Identifier.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LibraryResponse_Library {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LibraryResponse_Library();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.updateType = reader.int32() as any;
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.items.push(APIV1Identifier.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LibraryResponse_Library {
    return {
      updateType: isSet(object.updateType)
        ? networkAPIV1_APIV1LibraryResponse_Library_UpdateTypeFromJSON(object.updateType)
        : 0,
      items: Array.isArray(object?.items) ? object.items.map((e: any) => APIV1Identifier.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LibraryResponse_Library): unknown {
    const obj: any = {};
    message.updateType !== undefined &&
      (obj.updateType = networkAPIV1_APIV1LibraryResponse_Library_UpdateTypeToJSON(message.updateType));
    if (message.items) {
      obj.items = message.items.map((e) => e ? APIV1Identifier.toJSON(e) : undefined);
    } else {
      obj.items = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryResponse_Library>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LibraryResponse_Library {
    return NetworkAPIV1_APIV1LibraryResponse_Library.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryResponse_Library>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LibraryResponse_Library {
    const message = createBaseNetworkAPIV1_APIV1LibraryResponse_Library();
    message.updateType = object.updateType ?? 0;
    message.items = object.items?.map((e) => APIV1Identifier.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LibraryResponse_Trigger(): NetworkAPIV1_APIV1LibraryResponse_Trigger {
  return {};
}

export const NetworkAPIV1_APIV1LibraryResponse_Trigger = {
  encode(_: NetworkAPIV1_APIV1LibraryResponse_Trigger, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LibraryResponse_Trigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LibraryResponse_Trigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1LibraryResponse_Trigger {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1LibraryResponse_Trigger): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryResponse_Trigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LibraryResponse_Trigger {
    return NetworkAPIV1_APIV1LibraryResponse_Trigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LibraryResponse_Trigger>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1LibraryResponse_Trigger {
    const message = createBaseNetworkAPIV1_APIV1LibraryResponse_Trigger();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksResponse(): NetworkAPIV1_APIV1LooksResponse {
  return {
    looks: undefined,
    createLook: undefined,
    getCurrentLook: undefined,
    putCurrentLook: undefined,
    getLook: undefined,
    putLook: undefined,
    deleteLook: undefined,
    triggerLook: undefined,
  };
}

export const NetworkAPIV1_APIV1LooksResponse = {
  encode(message: NetworkAPIV1_APIV1LooksResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.looks !== undefined) {
      NetworkAPIV1_APIV1LooksResponse_Looks.encode(message.looks, writer.uint32(10).fork()).ldelim();
    }
    if (message.createLook !== undefined) {
      NetworkAPIV1_APIV1LooksResponse_CreateLook.encode(message.createLook, writer.uint32(18).fork()).ldelim();
    }
    if (message.getCurrentLook !== undefined) {
      NetworkAPIV1_APIV1LooksResponse_GetCurrentLook.encode(message.getCurrentLook, writer.uint32(26).fork()).ldelim();
    }
    if (message.putCurrentLook !== undefined) {
      NetworkAPIV1_APIV1LooksResponse_PutCurrentLook.encode(message.putCurrentLook, writer.uint32(34).fork()).ldelim();
    }
    if (message.getLook !== undefined) {
      NetworkAPIV1_APIV1LooksResponse_GetLook.encode(message.getLook, writer.uint32(42).fork()).ldelim();
    }
    if (message.putLook !== undefined) {
      NetworkAPIV1_APIV1LooksResponse_PutLook.encode(message.putLook, writer.uint32(50).fork()).ldelim();
    }
    if (message.deleteLook !== undefined) {
      NetworkAPIV1_APIV1LooksResponse_DeleteLook.encode(message.deleteLook, writer.uint32(58).fork()).ldelim();
    }
    if (message.triggerLook !== undefined) {
      NetworkAPIV1_APIV1LooksResponse_TriggerLook.encode(message.triggerLook, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.looks = NetworkAPIV1_APIV1LooksResponse_Looks.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.createLook = NetworkAPIV1_APIV1LooksResponse_CreateLook.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getCurrentLook = NetworkAPIV1_APIV1LooksResponse_GetCurrentLook.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.putCurrentLook = NetworkAPIV1_APIV1LooksResponse_PutCurrentLook.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.getLook = NetworkAPIV1_APIV1LooksResponse_GetLook.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.putLook = NetworkAPIV1_APIV1LooksResponse_PutLook.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.deleteLook = NetworkAPIV1_APIV1LooksResponse_DeleteLook.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.triggerLook = NetworkAPIV1_APIV1LooksResponse_TriggerLook.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksResponse {
    return {
      looks: isSet(object.looks) ? NetworkAPIV1_APIV1LooksResponse_Looks.fromJSON(object.looks) : undefined,
      createLook: isSet(object.createLook)
        ? NetworkAPIV1_APIV1LooksResponse_CreateLook.fromJSON(object.createLook)
        : undefined,
      getCurrentLook: isSet(object.getCurrentLook)
        ? NetworkAPIV1_APIV1LooksResponse_GetCurrentLook.fromJSON(object.getCurrentLook)
        : undefined,
      putCurrentLook: isSet(object.putCurrentLook)
        ? NetworkAPIV1_APIV1LooksResponse_PutCurrentLook.fromJSON(object.putCurrentLook)
        : undefined,
      getLook: isSet(object.getLook) ? NetworkAPIV1_APIV1LooksResponse_GetLook.fromJSON(object.getLook) : undefined,
      putLook: isSet(object.putLook) ? NetworkAPIV1_APIV1LooksResponse_PutLook.fromJSON(object.putLook) : undefined,
      deleteLook: isSet(object.deleteLook)
        ? NetworkAPIV1_APIV1LooksResponse_DeleteLook.fromJSON(object.deleteLook)
        : undefined,
      triggerLook: isSet(object.triggerLook)
        ? NetworkAPIV1_APIV1LooksResponse_TriggerLook.fromJSON(object.triggerLook)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksResponse): unknown {
    const obj: any = {};
    message.looks !== undefined &&
      (obj.looks = message.looks ? NetworkAPIV1_APIV1LooksResponse_Looks.toJSON(message.looks) : undefined);
    message.createLook !== undefined && (obj.createLook = message.createLook
      ? NetworkAPIV1_APIV1LooksResponse_CreateLook.toJSON(message.createLook)
      : undefined);
    message.getCurrentLook !== undefined && (obj.getCurrentLook = message.getCurrentLook
      ? NetworkAPIV1_APIV1LooksResponse_GetCurrentLook.toJSON(message.getCurrentLook)
      : undefined);
    message.putCurrentLook !== undefined && (obj.putCurrentLook = message.putCurrentLook
      ? NetworkAPIV1_APIV1LooksResponse_PutCurrentLook.toJSON(message.putCurrentLook)
      : undefined);
    message.getLook !== undefined &&
      (obj.getLook = message.getLook ? NetworkAPIV1_APIV1LooksResponse_GetLook.toJSON(message.getLook) : undefined);
    message.putLook !== undefined &&
      (obj.putLook = message.putLook ? NetworkAPIV1_APIV1LooksResponse_PutLook.toJSON(message.putLook) : undefined);
    message.deleteLook !== undefined && (obj.deleteLook = message.deleteLook
      ? NetworkAPIV1_APIV1LooksResponse_DeleteLook.toJSON(message.deleteLook)
      : undefined);
    message.triggerLook !== undefined && (obj.triggerLook = message.triggerLook
      ? NetworkAPIV1_APIV1LooksResponse_TriggerLook.toJSON(message.triggerLook)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse>, I>>(base?: I): NetworkAPIV1_APIV1LooksResponse {
    return NetworkAPIV1_APIV1LooksResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksResponse {
    const message = createBaseNetworkAPIV1_APIV1LooksResponse();
    message.looks = (object.looks !== undefined && object.looks !== null)
      ? NetworkAPIV1_APIV1LooksResponse_Looks.fromPartial(object.looks)
      : undefined;
    message.createLook = (object.createLook !== undefined && object.createLook !== null)
      ? NetworkAPIV1_APIV1LooksResponse_CreateLook.fromPartial(object.createLook)
      : undefined;
    message.getCurrentLook = (object.getCurrentLook !== undefined && object.getCurrentLook !== null)
      ? NetworkAPIV1_APIV1LooksResponse_GetCurrentLook.fromPartial(object.getCurrentLook)
      : undefined;
    message.putCurrentLook = (object.putCurrentLook !== undefined && object.putCurrentLook !== null)
      ? NetworkAPIV1_APIV1LooksResponse_PutCurrentLook.fromPartial(object.putCurrentLook)
      : undefined;
    message.getLook = (object.getLook !== undefined && object.getLook !== null)
      ? NetworkAPIV1_APIV1LooksResponse_GetLook.fromPartial(object.getLook)
      : undefined;
    message.putLook = (object.putLook !== undefined && object.putLook !== null)
      ? NetworkAPIV1_APIV1LooksResponse_PutLook.fromPartial(object.putLook)
      : undefined;
    message.deleteLook = (object.deleteLook !== undefined && object.deleteLook !== null)
      ? NetworkAPIV1_APIV1LooksResponse_DeleteLook.fromPartial(object.deleteLook)
      : undefined;
    message.triggerLook = (object.triggerLook !== undefined && object.triggerLook !== null)
      ? NetworkAPIV1_APIV1LooksResponse_TriggerLook.fromPartial(object.triggerLook)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksResponse_Looks(): NetworkAPIV1_APIV1LooksResponse_Looks {
  return { looks: [] };
}

export const NetworkAPIV1_APIV1LooksResponse_Looks = {
  encode(message: NetworkAPIV1_APIV1LooksResponse_Looks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.looks) {
      APIV1Look.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksResponse_Looks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_Looks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.looks.push(APIV1Look.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksResponse_Looks {
    return { looks: Array.isArray(object?.looks) ? object.looks.map((e: any) => APIV1Look.fromJSON(e)) : [] };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksResponse_Looks): unknown {
    const obj: any = {};
    if (message.looks) {
      obj.looks = message.looks.map((e) => e ? APIV1Look.toJSON(e) : undefined);
    } else {
      obj.looks = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_Looks>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksResponse_Looks {
    return NetworkAPIV1_APIV1LooksResponse_Looks.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_Looks>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksResponse_Looks {
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_Looks();
    message.looks = object.looks?.map((e) => APIV1Look.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksResponse_CreateLook(): NetworkAPIV1_APIV1LooksResponse_CreateLook {
  return { look: undefined };
}

export const NetworkAPIV1_APIV1LooksResponse_CreateLook = {
  encode(message: NetworkAPIV1_APIV1LooksResponse_CreateLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.look !== undefined) {
      APIV1Look.encode(message.look, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksResponse_CreateLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_CreateLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.look = APIV1Look.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksResponse_CreateLook {
    return { look: isSet(object.look) ? APIV1Look.fromJSON(object.look) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksResponse_CreateLook): unknown {
    const obj: any = {};
    message.look !== undefined && (obj.look = message.look ? APIV1Look.toJSON(message.look) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_CreateLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksResponse_CreateLook {
    return NetworkAPIV1_APIV1LooksResponse_CreateLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_CreateLook>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksResponse_CreateLook {
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_CreateLook();
    message.look = (object.look !== undefined && object.look !== null) ? APIV1Look.fromPartial(object.look) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksResponse_GetCurrentLook(): NetworkAPIV1_APIV1LooksResponse_GetCurrentLook {
  return { look: undefined };
}

export const NetworkAPIV1_APIV1LooksResponse_GetCurrentLook = {
  encode(
    message: NetworkAPIV1_APIV1LooksResponse_GetCurrentLook,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.look !== undefined) {
      APIV1Look.encode(message.look, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksResponse_GetCurrentLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_GetCurrentLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.look = APIV1Look.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksResponse_GetCurrentLook {
    return { look: isSet(object.look) ? APIV1Look.fromJSON(object.look) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksResponse_GetCurrentLook): unknown {
    const obj: any = {};
    message.look !== undefined && (obj.look = message.look ? APIV1Look.toJSON(message.look) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_GetCurrentLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksResponse_GetCurrentLook {
    return NetworkAPIV1_APIV1LooksResponse_GetCurrentLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_GetCurrentLook>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksResponse_GetCurrentLook {
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_GetCurrentLook();
    message.look = (object.look !== undefined && object.look !== null) ? APIV1Look.fromPartial(object.look) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksResponse_PutCurrentLook(): NetworkAPIV1_APIV1LooksResponse_PutCurrentLook {
  return { look: undefined };
}

export const NetworkAPIV1_APIV1LooksResponse_PutCurrentLook = {
  encode(
    message: NetworkAPIV1_APIV1LooksResponse_PutCurrentLook,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.look !== undefined) {
      APIV1Look.encode(message.look, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksResponse_PutCurrentLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_PutCurrentLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.look = APIV1Look.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksResponse_PutCurrentLook {
    return { look: isSet(object.look) ? APIV1Look.fromJSON(object.look) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksResponse_PutCurrentLook): unknown {
    const obj: any = {};
    message.look !== undefined && (obj.look = message.look ? APIV1Look.toJSON(message.look) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_PutCurrentLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksResponse_PutCurrentLook {
    return NetworkAPIV1_APIV1LooksResponse_PutCurrentLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_PutCurrentLook>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksResponse_PutCurrentLook {
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_PutCurrentLook();
    message.look = (object.look !== undefined && object.look !== null) ? APIV1Look.fromPartial(object.look) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksResponse_GetLook(): NetworkAPIV1_APIV1LooksResponse_GetLook {
  return { look: undefined };
}

export const NetworkAPIV1_APIV1LooksResponse_GetLook = {
  encode(message: NetworkAPIV1_APIV1LooksResponse_GetLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.look !== undefined) {
      APIV1Look.encode(message.look, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksResponse_GetLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_GetLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.look = APIV1Look.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksResponse_GetLook {
    return { look: isSet(object.look) ? APIV1Look.fromJSON(object.look) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksResponse_GetLook): unknown {
    const obj: any = {};
    message.look !== undefined && (obj.look = message.look ? APIV1Look.toJSON(message.look) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_GetLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksResponse_GetLook {
    return NetworkAPIV1_APIV1LooksResponse_GetLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_GetLook>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksResponse_GetLook {
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_GetLook();
    message.look = (object.look !== undefined && object.look !== null) ? APIV1Look.fromPartial(object.look) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksResponse_PutLook(): NetworkAPIV1_APIV1LooksResponse_PutLook {
  return { look: undefined };
}

export const NetworkAPIV1_APIV1LooksResponse_PutLook = {
  encode(message: NetworkAPIV1_APIV1LooksResponse_PutLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.look !== undefined) {
      APIV1Look.encode(message.look, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksResponse_PutLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_PutLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.look = APIV1Look.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1LooksResponse_PutLook {
    return { look: isSet(object.look) ? APIV1Look.fromJSON(object.look) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1LooksResponse_PutLook): unknown {
    const obj: any = {};
    message.look !== undefined && (obj.look = message.look ? APIV1Look.toJSON(message.look) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_PutLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksResponse_PutLook {
    return NetworkAPIV1_APIV1LooksResponse_PutLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_PutLook>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1LooksResponse_PutLook {
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_PutLook();
    message.look = (object.look !== undefined && object.look !== null) ? APIV1Look.fromPartial(object.look) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksResponse_DeleteLook(): NetworkAPIV1_APIV1LooksResponse_DeleteLook {
  return {};
}

export const NetworkAPIV1_APIV1LooksResponse_DeleteLook = {
  encode(_: NetworkAPIV1_APIV1LooksResponse_DeleteLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksResponse_DeleteLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_DeleteLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1LooksResponse_DeleteLook {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1LooksResponse_DeleteLook): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_DeleteLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksResponse_DeleteLook {
    return NetworkAPIV1_APIV1LooksResponse_DeleteLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_DeleteLook>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1LooksResponse_DeleteLook {
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_DeleteLook();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1LooksResponse_TriggerLook(): NetworkAPIV1_APIV1LooksResponse_TriggerLook {
  return {};
}

export const NetworkAPIV1_APIV1LooksResponse_TriggerLook = {
  encode(_: NetworkAPIV1_APIV1LooksResponse_TriggerLook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1LooksResponse_TriggerLook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_TriggerLook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1LooksResponse_TriggerLook {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1LooksResponse_TriggerLook): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_TriggerLook>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1LooksResponse_TriggerLook {
    return NetworkAPIV1_APIV1LooksResponse_TriggerLook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1LooksResponse_TriggerLook>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1LooksResponse_TriggerLook {
    const message = createBaseNetworkAPIV1_APIV1LooksResponse_TriggerLook();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroResponse(): NetworkAPIV1_APIV1MacroResponse {
  return {
    macros: undefined,
    getMacro: undefined,
    putMacro: undefined,
    deleteMacro: undefined,
    triggerMacro: undefined,
  };
}

export const NetworkAPIV1_APIV1MacroResponse = {
  encode(message: NetworkAPIV1_APIV1MacroResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.macros !== undefined) {
      NetworkAPIV1_APIV1MacroResponse_Macros.encode(message.macros, writer.uint32(10).fork()).ldelim();
    }
    if (message.getMacro !== undefined) {
      NetworkAPIV1_APIV1MacroResponse_GetMacro.encode(message.getMacro, writer.uint32(18).fork()).ldelim();
    }
    if (message.putMacro !== undefined) {
      NetworkAPIV1_APIV1MacroResponse_PutMacro.encode(message.putMacro, writer.uint32(26).fork()).ldelim();
    }
    if (message.deleteMacro !== undefined) {
      NetworkAPIV1_APIV1MacroResponse_DeleteMacro.encode(message.deleteMacro, writer.uint32(34).fork()).ldelim();
    }
    if (message.triggerMacro !== undefined) {
      NetworkAPIV1_APIV1MacroResponse_TriggerMacro.encode(message.triggerMacro, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.macros = NetworkAPIV1_APIV1MacroResponse_Macros.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getMacro = NetworkAPIV1_APIV1MacroResponse_GetMacro.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.putMacro = NetworkAPIV1_APIV1MacroResponse_PutMacro.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.deleteMacro = NetworkAPIV1_APIV1MacroResponse_DeleteMacro.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.triggerMacro = NetworkAPIV1_APIV1MacroResponse_TriggerMacro.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MacroResponse {
    return {
      macros: isSet(object.macros) ? NetworkAPIV1_APIV1MacroResponse_Macros.fromJSON(object.macros) : undefined,
      getMacro: isSet(object.getMacro) ? NetworkAPIV1_APIV1MacroResponse_GetMacro.fromJSON(object.getMacro) : undefined,
      putMacro: isSet(object.putMacro) ? NetworkAPIV1_APIV1MacroResponse_PutMacro.fromJSON(object.putMacro) : undefined,
      deleteMacro: isSet(object.deleteMacro)
        ? NetworkAPIV1_APIV1MacroResponse_DeleteMacro.fromJSON(object.deleteMacro)
        : undefined,
      triggerMacro: isSet(object.triggerMacro)
        ? NetworkAPIV1_APIV1MacroResponse_TriggerMacro.fromJSON(object.triggerMacro)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MacroResponse): unknown {
    const obj: any = {};
    message.macros !== undefined &&
      (obj.macros = message.macros ? NetworkAPIV1_APIV1MacroResponse_Macros.toJSON(message.macros) : undefined);
    message.getMacro !== undefined &&
      (obj.getMacro = message.getMacro ? NetworkAPIV1_APIV1MacroResponse_GetMacro.toJSON(message.getMacro) : undefined);
    message.putMacro !== undefined &&
      (obj.putMacro = message.putMacro ? NetworkAPIV1_APIV1MacroResponse_PutMacro.toJSON(message.putMacro) : undefined);
    message.deleteMacro !== undefined && (obj.deleteMacro = message.deleteMacro
      ? NetworkAPIV1_APIV1MacroResponse_DeleteMacro.toJSON(message.deleteMacro)
      : undefined);
    message.triggerMacro !== undefined && (obj.triggerMacro = message.triggerMacro
      ? NetworkAPIV1_APIV1MacroResponse_TriggerMacro.toJSON(message.triggerMacro)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse>, I>>(base?: I): NetworkAPIV1_APIV1MacroResponse {
    return NetworkAPIV1_APIV1MacroResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MacroResponse {
    const message = createBaseNetworkAPIV1_APIV1MacroResponse();
    message.macros = (object.macros !== undefined && object.macros !== null)
      ? NetworkAPIV1_APIV1MacroResponse_Macros.fromPartial(object.macros)
      : undefined;
    message.getMacro = (object.getMacro !== undefined && object.getMacro !== null)
      ? NetworkAPIV1_APIV1MacroResponse_GetMacro.fromPartial(object.getMacro)
      : undefined;
    message.putMacro = (object.putMacro !== undefined && object.putMacro !== null)
      ? NetworkAPIV1_APIV1MacroResponse_PutMacro.fromPartial(object.putMacro)
      : undefined;
    message.deleteMacro = (object.deleteMacro !== undefined && object.deleteMacro !== null)
      ? NetworkAPIV1_APIV1MacroResponse_DeleteMacro.fromPartial(object.deleteMacro)
      : undefined;
    message.triggerMacro = (object.triggerMacro !== undefined && object.triggerMacro !== null)
      ? NetworkAPIV1_APIV1MacroResponse_TriggerMacro.fromPartial(object.triggerMacro)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroResponse_Macros(): NetworkAPIV1_APIV1MacroResponse_Macros {
  return { macros: [] };
}

export const NetworkAPIV1_APIV1MacroResponse_Macros = {
  encode(message: NetworkAPIV1_APIV1MacroResponse_Macros, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.macros) {
      APIV1Macro.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroResponse_Macros {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroResponse_Macros();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.macros.push(APIV1Macro.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MacroResponse_Macros {
    return { macros: Array.isArray(object?.macros) ? object.macros.map((e: any) => APIV1Macro.fromJSON(e)) : [] };
  },

  toJSON(message: NetworkAPIV1_APIV1MacroResponse_Macros): unknown {
    const obj: any = {};
    if (message.macros) {
      obj.macros = message.macros.map((e) => e ? APIV1Macro.toJSON(e) : undefined);
    } else {
      obj.macros = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse_Macros>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MacroResponse_Macros {
    return NetworkAPIV1_APIV1MacroResponse_Macros.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse_Macros>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MacroResponse_Macros {
    const message = createBaseNetworkAPIV1_APIV1MacroResponse_Macros();
    message.macros = object.macros?.map((e) => APIV1Macro.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroResponse_GetMacro(): NetworkAPIV1_APIV1MacroResponse_GetMacro {
  return { macro: undefined };
}

export const NetworkAPIV1_APIV1MacroResponse_GetMacro = {
  encode(message: NetworkAPIV1_APIV1MacroResponse_GetMacro, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.macro !== undefined) {
      APIV1Macro.encode(message.macro, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroResponse_GetMacro {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroResponse_GetMacro();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.macro = APIV1Macro.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MacroResponse_GetMacro {
    return { macro: isSet(object.macro) ? APIV1Macro.fromJSON(object.macro) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1MacroResponse_GetMacro): unknown {
    const obj: any = {};
    message.macro !== undefined && (obj.macro = message.macro ? APIV1Macro.toJSON(message.macro) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse_GetMacro>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MacroResponse_GetMacro {
    return NetworkAPIV1_APIV1MacroResponse_GetMacro.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse_GetMacro>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MacroResponse_GetMacro {
    const message = createBaseNetworkAPIV1_APIV1MacroResponse_GetMacro();
    message.macro = (object.macro !== undefined && object.macro !== null)
      ? APIV1Macro.fromPartial(object.macro)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroResponse_PutMacro(): NetworkAPIV1_APIV1MacroResponse_PutMacro {
  return { macro: undefined };
}

export const NetworkAPIV1_APIV1MacroResponse_PutMacro = {
  encode(message: NetworkAPIV1_APIV1MacroResponse_PutMacro, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.macro !== undefined) {
      APIV1Macro.encode(message.macro, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroResponse_PutMacro {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroResponse_PutMacro();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.macro = APIV1Macro.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MacroResponse_PutMacro {
    return { macro: isSet(object.macro) ? APIV1Macro.fromJSON(object.macro) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1MacroResponse_PutMacro): unknown {
    const obj: any = {};
    message.macro !== undefined && (obj.macro = message.macro ? APIV1Macro.toJSON(message.macro) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse_PutMacro>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MacroResponse_PutMacro {
    return NetworkAPIV1_APIV1MacroResponse_PutMacro.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse_PutMacro>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MacroResponse_PutMacro {
    const message = createBaseNetworkAPIV1_APIV1MacroResponse_PutMacro();
    message.macro = (object.macro !== undefined && object.macro !== null)
      ? APIV1Macro.fromPartial(object.macro)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroResponse_DeleteMacro(): NetworkAPIV1_APIV1MacroResponse_DeleteMacro {
  return {};
}

export const NetworkAPIV1_APIV1MacroResponse_DeleteMacro = {
  encode(_: NetworkAPIV1_APIV1MacroResponse_DeleteMacro, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroResponse_DeleteMacro {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroResponse_DeleteMacro();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MacroResponse_DeleteMacro {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MacroResponse_DeleteMacro): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse_DeleteMacro>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MacroResponse_DeleteMacro {
    return NetworkAPIV1_APIV1MacroResponse_DeleteMacro.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse_DeleteMacro>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MacroResponse_DeleteMacro {
    const message = createBaseNetworkAPIV1_APIV1MacroResponse_DeleteMacro();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MacroResponse_TriggerMacro(): NetworkAPIV1_APIV1MacroResponse_TriggerMacro {
  return {};
}

export const NetworkAPIV1_APIV1MacroResponse_TriggerMacro = {
  encode(_: NetworkAPIV1_APIV1MacroResponse_TriggerMacro, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MacroResponse_TriggerMacro {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MacroResponse_TriggerMacro();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MacroResponse_TriggerMacro {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MacroResponse_TriggerMacro): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse_TriggerMacro>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MacroResponse_TriggerMacro {
    return NetworkAPIV1_APIV1MacroResponse_TriggerMacro.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MacroResponse_TriggerMacro>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MacroResponse_TriggerMacro {
    const message = createBaseNetworkAPIV1_APIV1MacroResponse_TriggerMacro();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MasksResponse(): NetworkAPIV1_APIV1MasksResponse {
  return { masks: undefined, getMask: undefined, getThumbnail: undefined };
}

export const NetworkAPIV1_APIV1MasksResponse = {
  encode(message: NetworkAPIV1_APIV1MasksResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.masks !== undefined) {
      NetworkAPIV1_APIV1MasksResponse_Masks.encode(message.masks, writer.uint32(10).fork()).ldelim();
    }
    if (message.getMask !== undefined) {
      NetworkAPIV1_APIV1MasksResponse_GetMask.encode(message.getMask, writer.uint32(18).fork()).ldelim();
    }
    if (message.getThumbnail !== undefined) {
      NetworkAPIV1_APIV1MasksResponse_GetThumbnail.encode(message.getThumbnail, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MasksResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MasksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.masks = NetworkAPIV1_APIV1MasksResponse_Masks.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getMask = NetworkAPIV1_APIV1MasksResponse_GetMask.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getThumbnail = NetworkAPIV1_APIV1MasksResponse_GetThumbnail.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MasksResponse {
    return {
      masks: isSet(object.masks) ? NetworkAPIV1_APIV1MasksResponse_Masks.fromJSON(object.masks) : undefined,
      getMask: isSet(object.getMask) ? NetworkAPIV1_APIV1MasksResponse_GetMask.fromJSON(object.getMask) : undefined,
      getThumbnail: isSet(object.getThumbnail)
        ? NetworkAPIV1_APIV1MasksResponse_GetThumbnail.fromJSON(object.getThumbnail)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MasksResponse): unknown {
    const obj: any = {};
    message.masks !== undefined &&
      (obj.masks = message.masks ? NetworkAPIV1_APIV1MasksResponse_Masks.toJSON(message.masks) : undefined);
    message.getMask !== undefined &&
      (obj.getMask = message.getMask ? NetworkAPIV1_APIV1MasksResponse_GetMask.toJSON(message.getMask) : undefined);
    message.getThumbnail !== undefined && (obj.getThumbnail = message.getThumbnail
      ? NetworkAPIV1_APIV1MasksResponse_GetThumbnail.toJSON(message.getThumbnail)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksResponse>, I>>(base?: I): NetworkAPIV1_APIV1MasksResponse {
    return NetworkAPIV1_APIV1MasksResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MasksResponse {
    const message = createBaseNetworkAPIV1_APIV1MasksResponse();
    message.masks = (object.masks !== undefined && object.masks !== null)
      ? NetworkAPIV1_APIV1MasksResponse_Masks.fromPartial(object.masks)
      : undefined;
    message.getMask = (object.getMask !== undefined && object.getMask !== null)
      ? NetworkAPIV1_APIV1MasksResponse_GetMask.fromPartial(object.getMask)
      : undefined;
    message.getThumbnail = (object.getThumbnail !== undefined && object.getThumbnail !== null)
      ? NetworkAPIV1_APIV1MasksResponse_GetThumbnail.fromPartial(object.getThumbnail)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MasksResponse_Masks(): NetworkAPIV1_APIV1MasksResponse_Masks {
  return { masks: [] };
}

export const NetworkAPIV1_APIV1MasksResponse_Masks = {
  encode(message: NetworkAPIV1_APIV1MasksResponse_Masks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.masks) {
      APIV1Identifier.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MasksResponse_Masks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MasksResponse_Masks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.masks.push(APIV1Identifier.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MasksResponse_Masks {
    return { masks: Array.isArray(object?.masks) ? object.masks.map((e: any) => APIV1Identifier.fromJSON(e)) : [] };
  },

  toJSON(message: NetworkAPIV1_APIV1MasksResponse_Masks): unknown {
    const obj: any = {};
    if (message.masks) {
      obj.masks = message.masks.map((e) => e ? APIV1Identifier.toJSON(e) : undefined);
    } else {
      obj.masks = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksResponse_Masks>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MasksResponse_Masks {
    return NetworkAPIV1_APIV1MasksResponse_Masks.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksResponse_Masks>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MasksResponse_Masks {
    const message = createBaseNetworkAPIV1_APIV1MasksResponse_Masks();
    message.masks = object.masks?.map((e) => APIV1Identifier.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MasksResponse_GetMask(): NetworkAPIV1_APIV1MasksResponse_GetMask {
  return { id: undefined };
}

export const NetworkAPIV1_APIV1MasksResponse_GetMask = {
  encode(message: NetworkAPIV1_APIV1MasksResponse_GetMask, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MasksResponse_GetMask {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MasksResponse_GetMask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MasksResponse_GetMask {
    return { id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1MasksResponse_GetMask): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksResponse_GetMask>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MasksResponse_GetMask {
    return NetworkAPIV1_APIV1MasksResponse_GetMask.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksResponse_GetMask>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MasksResponse_GetMask {
    const message = createBaseNetworkAPIV1_APIV1MasksResponse_GetMask();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MasksResponse_GetThumbnail(): NetworkAPIV1_APIV1MasksResponse_GetThumbnail {
  return { data: new Uint8Array() };
}

export const NetworkAPIV1_APIV1MasksResponse_GetThumbnail = {
  encode(message: NetworkAPIV1_APIV1MasksResponse_GetThumbnail, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MasksResponse_GetThumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MasksResponse_GetThumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MasksResponse_GetThumbnail {
    return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array() };
  },

  toJSON(message: NetworkAPIV1_APIV1MasksResponse_GetThumbnail): unknown {
    const obj: any = {};
    message.data !== undefined &&
      (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksResponse_GetThumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MasksResponse_GetThumbnail {
    return NetworkAPIV1_APIV1MasksResponse_GetThumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MasksResponse_GetThumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MasksResponse_GetThumbnail {
    const message = createBaseNetworkAPIV1_APIV1MasksResponse_GetThumbnail();
    message.data = object.data ?? new Uint8Array();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaResponse(): NetworkAPIV1_APIV1MediaResponse {
  return {
    playlists: undefined,
    getPlaylist: undefined,
    getPlaylistUpdates: undefined,
    getThumbnail: undefined,
    playlistFocused: undefined,
    playlistActive: undefined,
    focus: undefined,
    trigger: undefined,
  };
}

export const NetworkAPIV1_APIV1MediaResponse = {
  encode(message: NetworkAPIV1_APIV1MediaResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playlists !== undefined) {
      NetworkAPIV1_APIV1MediaResponse_Playlists.encode(message.playlists, writer.uint32(10).fork()).ldelim();
    }
    if (message.getPlaylist !== undefined) {
      NetworkAPIV1_APIV1MediaResponse_GetPlaylist.encode(message.getPlaylist, writer.uint32(18).fork()).ldelim();
    }
    if (message.getPlaylistUpdates !== undefined) {
      NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates.encode(message.getPlaylistUpdates, writer.uint32(26).fork())
        .ldelim();
    }
    if (message.getThumbnail !== undefined) {
      NetworkAPIV1_APIV1MediaResponse_GetThumbnail.encode(message.getThumbnail, writer.uint32(34).fork()).ldelim();
    }
    if (message.playlistFocused !== undefined) {
      NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist.encode(message.playlistFocused, writer.uint32(42).fork())
        .ldelim();
    }
    if (message.playlistActive !== undefined) {
      NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist.encode(message.playlistActive, writer.uint32(50).fork())
        .ldelim();
    }
    if (message.focus !== undefined) {
      NetworkAPIV1_APIV1MediaResponse_EmptyMessage.encode(message.focus, writer.uint32(58).fork()).ldelim();
    }
    if (message.trigger !== undefined) {
      NetworkAPIV1_APIV1MediaResponse_EmptyMessage.encode(message.trigger, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlists = NetworkAPIV1_APIV1MediaResponse_Playlists.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getPlaylist = NetworkAPIV1_APIV1MediaResponse_GetPlaylist.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getPlaylistUpdates = NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.getThumbnail = NetworkAPIV1_APIV1MediaResponse_GetThumbnail.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.playlistFocused = NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.playlistActive = NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.focus = NetworkAPIV1_APIV1MediaResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.trigger = NetworkAPIV1_APIV1MediaResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaResponse {
    return {
      playlists: isSet(object.playlists)
        ? NetworkAPIV1_APIV1MediaResponse_Playlists.fromJSON(object.playlists)
        : undefined,
      getPlaylist: isSet(object.getPlaylist)
        ? NetworkAPIV1_APIV1MediaResponse_GetPlaylist.fromJSON(object.getPlaylist)
        : undefined,
      getPlaylistUpdates: isSet(object.getPlaylistUpdates)
        ? NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates.fromJSON(object.getPlaylistUpdates)
        : undefined,
      getThumbnail: isSet(object.getThumbnail)
        ? NetworkAPIV1_APIV1MediaResponse_GetThumbnail.fromJSON(object.getThumbnail)
        : undefined,
      playlistFocused: isSet(object.playlistFocused)
        ? NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist.fromJSON(object.playlistFocused)
        : undefined,
      playlistActive: isSet(object.playlistActive)
        ? NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist.fromJSON(object.playlistActive)
        : undefined,
      focus: isSet(object.focus) ? NetworkAPIV1_APIV1MediaResponse_EmptyMessage.fromJSON(object.focus) : undefined,
      trigger: isSet(object.trigger)
        ? NetworkAPIV1_APIV1MediaResponse_EmptyMessage.fromJSON(object.trigger)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaResponse): unknown {
    const obj: any = {};
    message.playlists !== undefined && (obj.playlists = message.playlists
      ? NetworkAPIV1_APIV1MediaResponse_Playlists.toJSON(message.playlists)
      : undefined);
    message.getPlaylist !== undefined && (obj.getPlaylist = message.getPlaylist
      ? NetworkAPIV1_APIV1MediaResponse_GetPlaylist.toJSON(message.getPlaylist)
      : undefined);
    message.getPlaylistUpdates !== undefined && (obj.getPlaylistUpdates = message.getPlaylistUpdates
      ? NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates.toJSON(message.getPlaylistUpdates)
      : undefined);
    message.getThumbnail !== undefined && (obj.getThumbnail = message.getThumbnail
      ? NetworkAPIV1_APIV1MediaResponse_GetThumbnail.toJSON(message.getThumbnail)
      : undefined);
    message.playlistFocused !== undefined && (obj.playlistFocused = message.playlistFocused
      ? NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist.toJSON(message.playlistFocused)
      : undefined);
    message.playlistActive !== undefined && (obj.playlistActive = message.playlistActive
      ? NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist.toJSON(message.playlistActive)
      : undefined);
    message.focus !== undefined &&
      (obj.focus = message.focus ? NetworkAPIV1_APIV1MediaResponse_EmptyMessage.toJSON(message.focus) : undefined);
    message.trigger !== undefined &&
      (obj.trigger = message.trigger
        ? NetworkAPIV1_APIV1MediaResponse_EmptyMessage.toJSON(message.trigger)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse>, I>>(base?: I): NetworkAPIV1_APIV1MediaResponse {
    return NetworkAPIV1_APIV1MediaResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaResponse {
    const message = createBaseNetworkAPIV1_APIV1MediaResponse();
    message.playlists = (object.playlists !== undefined && object.playlists !== null)
      ? NetworkAPIV1_APIV1MediaResponse_Playlists.fromPartial(object.playlists)
      : undefined;
    message.getPlaylist = (object.getPlaylist !== undefined && object.getPlaylist !== null)
      ? NetworkAPIV1_APIV1MediaResponse_GetPlaylist.fromPartial(object.getPlaylist)
      : undefined;
    message.getPlaylistUpdates = (object.getPlaylistUpdates !== undefined && object.getPlaylistUpdates !== null)
      ? NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates.fromPartial(object.getPlaylistUpdates)
      : undefined;
    message.getThumbnail = (object.getThumbnail !== undefined && object.getThumbnail !== null)
      ? NetworkAPIV1_APIV1MediaResponse_GetThumbnail.fromPartial(object.getThumbnail)
      : undefined;
    message.playlistFocused = (object.playlistFocused !== undefined && object.playlistFocused !== null)
      ? NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist.fromPartial(object.playlistFocused)
      : undefined;
    message.playlistActive = (object.playlistActive !== undefined && object.playlistActive !== null)
      ? NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist.fromPartial(object.playlistActive)
      : undefined;
    message.focus = (object.focus !== undefined && object.focus !== null)
      ? NetworkAPIV1_APIV1MediaResponse_EmptyMessage.fromPartial(object.focus)
      : undefined;
    message.trigger = (object.trigger !== undefined && object.trigger !== null)
      ? NetworkAPIV1_APIV1MediaResponse_EmptyMessage.fromPartial(object.trigger)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaResponse_Playlists(): NetworkAPIV1_APIV1MediaResponse_Playlists {
  return { playlists: [] };
}

export const NetworkAPIV1_APIV1MediaResponse_Playlists = {
  encode(message: NetworkAPIV1_APIV1MediaResponse_Playlists, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.playlists) {
      APIV1Playlist.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaResponse_Playlists {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_Playlists();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlists.push(APIV1Playlist.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaResponse_Playlists {
    return {
      playlists: Array.isArray(object?.playlists) ? object.playlists.map((e: any) => APIV1Playlist.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaResponse_Playlists): unknown {
    const obj: any = {};
    if (message.playlists) {
      obj.playlists = message.playlists.map((e) => e ? APIV1Playlist.toJSON(e) : undefined);
    } else {
      obj.playlists = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_Playlists>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaResponse_Playlists {
    return NetworkAPIV1_APIV1MediaResponse_Playlists.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_Playlists>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaResponse_Playlists {
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_Playlists();
    message.playlists = object.playlists?.map((e) => APIV1Playlist.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaResponse_GetPlaylist(): NetworkAPIV1_APIV1MediaResponse_GetPlaylist {
  return { id: undefined, items: [] };
}

export const NetworkAPIV1_APIV1MediaResponse_GetPlaylist = {
  encode(message: NetworkAPIV1_APIV1MediaResponse_GetPlaylist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.items) {
      APIV1MediaPlaylistItem.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaResponse_GetPlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_GetPlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.items.push(APIV1MediaPlaylistItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaResponse_GetPlaylist {
    return {
      id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined,
      items: Array.isArray(object?.items) ? object.items.map((e: any) => APIV1MediaPlaylistItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaResponse_GetPlaylist): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    if (message.items) {
      obj.items = message.items.map((e) => e ? APIV1MediaPlaylistItem.toJSON(e) : undefined);
    } else {
      obj.items = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_GetPlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaResponse_GetPlaylist {
    return NetworkAPIV1_APIV1MediaResponse_GetPlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_GetPlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaResponse_GetPlaylist {
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_GetPlaylist();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    message.items = object.items?.map((e) => APIV1MediaPlaylistItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates(): NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates {
  return { id: undefined };
}

export const NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates = {
  encode(
    message: NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates {
    return { id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates {
    return NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates {
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_GetPlaylistUpdates();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaResponse_GetThumbnail(): NetworkAPIV1_APIV1MediaResponse_GetThumbnail {
  return { uuid: undefined, thumbnailData: new Uint8Array() };
}

export const NetworkAPIV1_APIV1MediaResponse_GetThumbnail = {
  encode(message: NetworkAPIV1_APIV1MediaResponse_GetThumbnail, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== undefined) {
      UUID.encode(message.uuid, writer.uint32(10).fork()).ldelim();
    }
    if (message.thumbnailData.length !== 0) {
      writer.uint32(18).bytes(message.thumbnailData);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaResponse_GetThumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_GetThumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.uuid = UUID.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.thumbnailData = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaResponse_GetThumbnail {
    return {
      uuid: isSet(object.uuid) ? UUID.fromJSON(object.uuid) : undefined,
      thumbnailData: isSet(object.thumbnailData) ? bytesFromBase64(object.thumbnailData) : new Uint8Array(),
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaResponse_GetThumbnail): unknown {
    const obj: any = {};
    message.uuid !== undefined && (obj.uuid = message.uuid ? UUID.toJSON(message.uuid) : undefined);
    message.thumbnailData !== undefined &&
      (obj.thumbnailData = base64FromBytes(
        message.thumbnailData !== undefined ? message.thumbnailData : new Uint8Array(),
      ));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_GetThumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaResponse_GetThumbnail {
    return NetworkAPIV1_APIV1MediaResponse_GetThumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_GetThumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaResponse_GetThumbnail {
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_GetThumbnail();
    message.uuid = (object.uuid !== undefined && object.uuid !== null) ? UUID.fromPartial(object.uuid) : undefined;
    message.thumbnailData = object.thumbnailData ?? new Uint8Array();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist(): NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist {
  return { id: undefined };
}

export const NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist = {
  encode(
    message: NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist {
    return { id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist {
    return NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist {
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_GetFocusedPlaylist();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaResponse_GetActivePlaylist(): NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist {
  return { playlist: undefined, item: undefined };
}

export const NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist = {
  encode(
    message: NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.playlist !== undefined) {
      APIV1Identifier.encode(message.playlist, writer.uint32(10).fork()).ldelim();
    }
    if (message.item !== undefined) {
      APIV1Identifier.encode(message.item, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_GetActivePlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlist = APIV1Identifier.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.item = APIV1Identifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist {
    return {
      playlist: isSet(object.playlist) ? APIV1Identifier.fromJSON(object.playlist) : undefined,
      item: isSet(object.item) ? APIV1Identifier.fromJSON(object.item) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist): unknown {
    const obj: any = {};
    message.playlist !== undefined &&
      (obj.playlist = message.playlist ? APIV1Identifier.toJSON(message.playlist) : undefined);
    message.item !== undefined && (obj.item = message.item ? APIV1Identifier.toJSON(message.item) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist {
    return NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MediaResponse_GetActivePlaylist {
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_GetActivePlaylist();
    message.playlist = (object.playlist !== undefined && object.playlist !== null)
      ? APIV1Identifier.fromPartial(object.playlist)
      : undefined;
    message.item = (object.item !== undefined && object.item !== null)
      ? APIV1Identifier.fromPartial(object.item)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MediaResponse_EmptyMessage(): NetworkAPIV1_APIV1MediaResponse_EmptyMessage {
  return {};
}

export const NetworkAPIV1_APIV1MediaResponse_EmptyMessage = {
  encode(_: NetworkAPIV1_APIV1MediaResponse_EmptyMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MediaResponse_EmptyMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_EmptyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MediaResponse_EmptyMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MediaResponse_EmptyMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_EmptyMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MediaResponse_EmptyMessage {
    return NetworkAPIV1_APIV1MediaResponse_EmptyMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MediaResponse_EmptyMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MediaResponse_EmptyMessage {
    const message = createBaseNetworkAPIV1_APIV1MediaResponse_EmptyMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageResponse(): NetworkAPIV1_APIV1MessageResponse {
  return {
    messages: undefined,
    createMessage: undefined,
    getMessage: undefined,
    putMessage: undefined,
    deleteMessage: undefined,
    triggerMessage: undefined,
    clearMessage: undefined,
  };
}

export const NetworkAPIV1_APIV1MessageResponse = {
  encode(message: NetworkAPIV1_APIV1MessageResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.messages !== undefined) {
      NetworkAPIV1_APIV1MessageResponse_Messages.encode(message.messages, writer.uint32(10).fork()).ldelim();
    }
    if (message.createMessage !== undefined) {
      NetworkAPIV1_APIV1MessageResponse_CreateMessage.encode(message.createMessage, writer.uint32(18).fork()).ldelim();
    }
    if (message.getMessage !== undefined) {
      NetworkAPIV1_APIV1MessageResponse_GetMessage.encode(message.getMessage, writer.uint32(26).fork()).ldelim();
    }
    if (message.putMessage !== undefined) {
      NetworkAPIV1_APIV1MessageResponse_PutMessage.encode(message.putMessage, writer.uint32(34).fork()).ldelim();
    }
    if (message.deleteMessage !== undefined) {
      NetworkAPIV1_APIV1MessageResponse_DeleteMessage.encode(message.deleteMessage, writer.uint32(42).fork()).ldelim();
    }
    if (message.triggerMessage !== undefined) {
      NetworkAPIV1_APIV1MessageResponse_TriggerMessage.encode(message.triggerMessage, writer.uint32(50).fork())
        .ldelim();
    }
    if (message.clearMessage !== undefined) {
      NetworkAPIV1_APIV1MessageResponse_ClearMessage.encode(message.clearMessage, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.messages = NetworkAPIV1_APIV1MessageResponse_Messages.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.createMessage = NetworkAPIV1_APIV1MessageResponse_CreateMessage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getMessage = NetworkAPIV1_APIV1MessageResponse_GetMessage.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.putMessage = NetworkAPIV1_APIV1MessageResponse_PutMessage.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.deleteMessage = NetworkAPIV1_APIV1MessageResponse_DeleteMessage.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.triggerMessage = NetworkAPIV1_APIV1MessageResponse_TriggerMessage.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.clearMessage = NetworkAPIV1_APIV1MessageResponse_ClearMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageResponse {
    return {
      messages: isSet(object.messages)
        ? NetworkAPIV1_APIV1MessageResponse_Messages.fromJSON(object.messages)
        : undefined,
      createMessage: isSet(object.createMessage)
        ? NetworkAPIV1_APIV1MessageResponse_CreateMessage.fromJSON(object.createMessage)
        : undefined,
      getMessage: isSet(object.getMessage)
        ? NetworkAPIV1_APIV1MessageResponse_GetMessage.fromJSON(object.getMessage)
        : undefined,
      putMessage: isSet(object.putMessage)
        ? NetworkAPIV1_APIV1MessageResponse_PutMessage.fromJSON(object.putMessage)
        : undefined,
      deleteMessage: isSet(object.deleteMessage)
        ? NetworkAPIV1_APIV1MessageResponse_DeleteMessage.fromJSON(object.deleteMessage)
        : undefined,
      triggerMessage: isSet(object.triggerMessage)
        ? NetworkAPIV1_APIV1MessageResponse_TriggerMessage.fromJSON(object.triggerMessage)
        : undefined,
      clearMessage: isSet(object.clearMessage)
        ? NetworkAPIV1_APIV1MessageResponse_ClearMessage.fromJSON(object.clearMessage)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageResponse): unknown {
    const obj: any = {};
    message.messages !== undefined &&
      (obj.messages = message.messages
        ? NetworkAPIV1_APIV1MessageResponse_Messages.toJSON(message.messages)
        : undefined);
    message.createMessage !== undefined && (obj.createMessage = message.createMessage
      ? NetworkAPIV1_APIV1MessageResponse_CreateMessage.toJSON(message.createMessage)
      : undefined);
    message.getMessage !== undefined && (obj.getMessage = message.getMessage
      ? NetworkAPIV1_APIV1MessageResponse_GetMessage.toJSON(message.getMessage)
      : undefined);
    message.putMessage !== undefined && (obj.putMessage = message.putMessage
      ? NetworkAPIV1_APIV1MessageResponse_PutMessage.toJSON(message.putMessage)
      : undefined);
    message.deleteMessage !== undefined && (obj.deleteMessage = message.deleteMessage
      ? NetworkAPIV1_APIV1MessageResponse_DeleteMessage.toJSON(message.deleteMessage)
      : undefined);
    message.triggerMessage !== undefined && (obj.triggerMessage = message.triggerMessage
      ? NetworkAPIV1_APIV1MessageResponse_TriggerMessage.toJSON(message.triggerMessage)
      : undefined);
    message.clearMessage !== undefined && (obj.clearMessage = message.clearMessage
      ? NetworkAPIV1_APIV1MessageResponse_ClearMessage.toJSON(message.clearMessage)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageResponse {
    return NetworkAPIV1_APIV1MessageResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageResponse {
    const message = createBaseNetworkAPIV1_APIV1MessageResponse();
    message.messages = (object.messages !== undefined && object.messages !== null)
      ? NetworkAPIV1_APIV1MessageResponse_Messages.fromPartial(object.messages)
      : undefined;
    message.createMessage = (object.createMessage !== undefined && object.createMessage !== null)
      ? NetworkAPIV1_APIV1MessageResponse_CreateMessage.fromPartial(object.createMessage)
      : undefined;
    message.getMessage = (object.getMessage !== undefined && object.getMessage !== null)
      ? NetworkAPIV1_APIV1MessageResponse_GetMessage.fromPartial(object.getMessage)
      : undefined;
    message.putMessage = (object.putMessage !== undefined && object.putMessage !== null)
      ? NetworkAPIV1_APIV1MessageResponse_PutMessage.fromPartial(object.putMessage)
      : undefined;
    message.deleteMessage = (object.deleteMessage !== undefined && object.deleteMessage !== null)
      ? NetworkAPIV1_APIV1MessageResponse_DeleteMessage.fromPartial(object.deleteMessage)
      : undefined;
    message.triggerMessage = (object.triggerMessage !== undefined && object.triggerMessage !== null)
      ? NetworkAPIV1_APIV1MessageResponse_TriggerMessage.fromPartial(object.triggerMessage)
      : undefined;
    message.clearMessage = (object.clearMessage !== undefined && object.clearMessage !== null)
      ? NetworkAPIV1_APIV1MessageResponse_ClearMessage.fromPartial(object.clearMessage)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageResponse_Messages(): NetworkAPIV1_APIV1MessageResponse_Messages {
  return { messages: [] };
}

export const NetworkAPIV1_APIV1MessageResponse_Messages = {
  encode(message: NetworkAPIV1_APIV1MessageResponse_Messages, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.messages) {
      APIV1Message.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageResponse_Messages {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_Messages();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.messages.push(APIV1Message.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageResponse_Messages {
    return {
      messages: Array.isArray(object?.messages) ? object.messages.map((e: any) => APIV1Message.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageResponse_Messages): unknown {
    const obj: any = {};
    if (message.messages) {
      obj.messages = message.messages.map((e) => e ? APIV1Message.toJSON(e) : undefined);
    } else {
      obj.messages = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_Messages>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageResponse_Messages {
    return NetworkAPIV1_APIV1MessageResponse_Messages.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_Messages>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageResponse_Messages {
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_Messages();
    message.messages = object.messages?.map((e) => APIV1Message.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageResponse_CreateMessage(): NetworkAPIV1_APIV1MessageResponse_CreateMessage {
  return { message: undefined };
}

export const NetworkAPIV1_APIV1MessageResponse_CreateMessage = {
  encode(
    message: NetworkAPIV1_APIV1MessageResponse_CreateMessage,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.message !== undefined) {
      APIV1Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageResponse_CreateMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_CreateMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.message = APIV1Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageResponse_CreateMessage {
    return { message: isSet(object.message) ? APIV1Message.fromJSON(object.message) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageResponse_CreateMessage): unknown {
    const obj: any = {};
    message.message !== undefined && (obj.message = message.message ? APIV1Message.toJSON(message.message) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_CreateMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageResponse_CreateMessage {
    return NetworkAPIV1_APIV1MessageResponse_CreateMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_CreateMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageResponse_CreateMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_CreateMessage();
    message.message = (object.message !== undefined && object.message !== null)
      ? APIV1Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageResponse_GetMessage(): NetworkAPIV1_APIV1MessageResponse_GetMessage {
  return { message: undefined };
}

export const NetworkAPIV1_APIV1MessageResponse_GetMessage = {
  encode(message: NetworkAPIV1_APIV1MessageResponse_GetMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== undefined) {
      APIV1Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageResponse_GetMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_GetMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.message = APIV1Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageResponse_GetMessage {
    return { message: isSet(object.message) ? APIV1Message.fromJSON(object.message) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageResponse_GetMessage): unknown {
    const obj: any = {};
    message.message !== undefined && (obj.message = message.message ? APIV1Message.toJSON(message.message) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_GetMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageResponse_GetMessage {
    return NetworkAPIV1_APIV1MessageResponse_GetMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_GetMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageResponse_GetMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_GetMessage();
    message.message = (object.message !== undefined && object.message !== null)
      ? APIV1Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageResponse_PutMessage(): NetworkAPIV1_APIV1MessageResponse_PutMessage {
  return { message: undefined };
}

export const NetworkAPIV1_APIV1MessageResponse_PutMessage = {
  encode(message: NetworkAPIV1_APIV1MessageResponse_PutMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== undefined) {
      APIV1Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageResponse_PutMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_PutMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.message = APIV1Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MessageResponse_PutMessage {
    return { message: isSet(object.message) ? APIV1Message.fromJSON(object.message) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1MessageResponse_PutMessage): unknown {
    const obj: any = {};
    message.message !== undefined && (obj.message = message.message ? APIV1Message.toJSON(message.message) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_PutMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageResponse_PutMessage {
    return NetworkAPIV1_APIV1MessageResponse_PutMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_PutMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MessageResponse_PutMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_PutMessage();
    message.message = (object.message !== undefined && object.message !== null)
      ? APIV1Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageResponse_DeleteMessage(): NetworkAPIV1_APIV1MessageResponse_DeleteMessage {
  return {};
}

export const NetworkAPIV1_APIV1MessageResponse_DeleteMessage = {
  encode(_: NetworkAPIV1_APIV1MessageResponse_DeleteMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageResponse_DeleteMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_DeleteMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MessageResponse_DeleteMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MessageResponse_DeleteMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_DeleteMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageResponse_DeleteMessage {
    return NetworkAPIV1_APIV1MessageResponse_DeleteMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_DeleteMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MessageResponse_DeleteMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_DeleteMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageResponse_TriggerMessage(): NetworkAPIV1_APIV1MessageResponse_TriggerMessage {
  return {};
}

export const NetworkAPIV1_APIV1MessageResponse_TriggerMessage = {
  encode(_: NetworkAPIV1_APIV1MessageResponse_TriggerMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageResponse_TriggerMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_TriggerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MessageResponse_TriggerMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MessageResponse_TriggerMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_TriggerMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageResponse_TriggerMessage {
    return NetworkAPIV1_APIV1MessageResponse_TriggerMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_TriggerMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MessageResponse_TriggerMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_TriggerMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MessageResponse_ClearMessage(): NetworkAPIV1_APIV1MessageResponse_ClearMessage {
  return {};
}

export const NetworkAPIV1_APIV1MessageResponse_ClearMessage = {
  encode(_: NetworkAPIV1_APIV1MessageResponse_ClearMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MessageResponse_ClearMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_ClearMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MessageResponse_ClearMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MessageResponse_ClearMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_ClearMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MessageResponse_ClearMessage {
    return NetworkAPIV1_APIV1MessageResponse_ClearMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MessageResponse_ClearMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MessageResponse_ClearMessage {
    const message = createBaseNetworkAPIV1_APIV1MessageResponse_ClearMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MiscellaneousResponse(): NetworkAPIV1_APIV1MiscellaneousResponse {
  return { findMyMouse: undefined };
}

export const NetworkAPIV1_APIV1MiscellaneousResponse = {
  encode(message: NetworkAPIV1_APIV1MiscellaneousResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.findMyMouse !== undefined) {
      NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse.encode(message.findMyMouse, writer.uint32(10).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MiscellaneousResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MiscellaneousResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.findMyMouse = NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1MiscellaneousResponse {
    return {
      findMyMouse: isSet(object.findMyMouse)
        ? NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse.fromJSON(object.findMyMouse)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1MiscellaneousResponse): unknown {
    const obj: any = {};
    message.findMyMouse !== undefined && (obj.findMyMouse = message.findMyMouse
      ? NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse.toJSON(message.findMyMouse)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MiscellaneousResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MiscellaneousResponse {
    return NetworkAPIV1_APIV1MiscellaneousResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MiscellaneousResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1MiscellaneousResponse {
    const message = createBaseNetworkAPIV1_APIV1MiscellaneousResponse();
    message.findMyMouse = (object.findMyMouse !== undefined && object.findMyMouse !== null)
      ? NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse.fromPartial(object.findMyMouse)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse(): NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse {
  return {};
}

export const NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse = {
  encode(_: NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse {
    return NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse {
    const message = createBaseNetworkAPIV1_APIV1MiscellaneousResponse_FindMyMouse();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistResponse(): NetworkAPIV1_APIV1PlaylistResponse {
  return {
    playlists: undefined,
    createPlaylist: undefined,
    getPlaylist: undefined,
    putPlaylist: undefined,
    postPlaylist: undefined,
    getActivePlaylist: undefined,
    focused: undefined,
    nextFocus: undefined,
    previousFocus: undefined,
    activePresentationFocus: undefined,
    activeAnnouncementFocus: undefined,
    focusedTrigger: undefined,
    activePresentationTrigger: undefined,
    activeAnnouncementTrigger: undefined,
    focusedNextTrigger: undefined,
    focusedPreviousTrigger: undefined,
    activePresentationNextTrigger: undefined,
    activeAnnouncementNextTrigger: undefined,
    activePresentationPreviousTrigger: undefined,
    activeAnnouncementPreviousTrigger: undefined,
    idFocus: undefined,
    idTrigger: undefined,
    idNextTrigger: undefined,
    idPreviousTrigger: undefined,
    focusedIndexTrigger: undefined,
    activePresentationIndexTrigger: undefined,
    activeAnnouncementIndexTrigger: undefined,
    idUpdates: undefined,
  };
}

export const NetworkAPIV1_APIV1PlaylistResponse = {
  encode(message: NetworkAPIV1_APIV1PlaylistResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playlists !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_Playlists.encode(message.playlists, writer.uint32(10).fork()).ldelim();
    }
    if (message.createPlaylist !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist.encode(message.createPlaylist, writer.uint32(18).fork())
        .ldelim();
    }
    if (message.getPlaylist !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist.encode(message.getPlaylist, writer.uint32(26).fork()).ldelim();
    }
    if (message.putPlaylist !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist.encode(message.putPlaylist, writer.uint32(34).fork()).ldelim();
    }
    if (message.postPlaylist !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist.encode(message.postPlaylist, writer.uint32(42).fork()).ldelim();
    }
    if (message.getActivePlaylist !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist.encode(message.getActivePlaylist, writer.uint32(50).fork())
        .ldelim();
    }
    if (message.focused !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist.encode(message.focused, writer.uint32(58).fork()).ldelim();
    }
    if (message.nextFocus !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.nextFocus, writer.uint32(66).fork()).ldelim();
    }
    if (message.previousFocus !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.previousFocus, writer.uint32(74).fork()).ldelim();
    }
    if (message.activePresentationFocus !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.activePresentationFocus, writer.uint32(82).fork())
        .ldelim();
    }
    if (message.activeAnnouncementFocus !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.activeAnnouncementFocus, writer.uint32(90).fork())
        .ldelim();
    }
    if (message.focusedTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.focusedTrigger, writer.uint32(98).fork()).ldelim();
    }
    if (message.activePresentationTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(
        message.activePresentationTrigger,
        writer.uint32(106).fork(),
      ).ldelim();
    }
    if (message.activeAnnouncementTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(
        message.activeAnnouncementTrigger,
        writer.uint32(114).fork(),
      ).ldelim();
    }
    if (message.focusedNextTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.focusedNextTrigger, writer.uint32(122).fork())
        .ldelim();
    }
    if (message.focusedPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.focusedPreviousTrigger, writer.uint32(130).fork())
        .ldelim();
    }
    if (message.activePresentationNextTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(
        message.activePresentationNextTrigger,
        writer.uint32(138).fork(),
      ).ldelim();
    }
    if (message.activeAnnouncementNextTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(
        message.activeAnnouncementNextTrigger,
        writer.uint32(146).fork(),
      ).ldelim();
    }
    if (message.activePresentationPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(
        message.activePresentationPreviousTrigger,
        writer.uint32(154).fork(),
      ).ldelim();
    }
    if (message.activeAnnouncementPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(
        message.activeAnnouncementPreviousTrigger,
        writer.uint32(162).fork(),
      ).ldelim();
    }
    if (message.idFocus !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.idFocus, writer.uint32(170).fork()).ldelim();
    }
    if (message.idTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.idTrigger, writer.uint32(178).fork()).ldelim();
    }
    if (message.idNextTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.idNextTrigger, writer.uint32(186).fork()).ldelim();
    }
    if (message.idPreviousTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.idPreviousTrigger, writer.uint32(194).fork())
        .ldelim();
    }
    if (message.focusedIndexTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.focusedIndexTrigger, writer.uint32(202).fork())
        .ldelim();
    }
    if (message.activePresentationIndexTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(
        message.activePresentationIndexTrigger,
        writer.uint32(210).fork(),
      ).ldelim();
    }
    if (message.activeAnnouncementIndexTrigger !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(
        message.activeAnnouncementIndexTrigger,
        writer.uint32(218).fork(),
      ).ldelim();
    }
    if (message.idUpdates !== undefined) {
      NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.encode(message.idUpdates, writer.uint32(226).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlists = NetworkAPIV1_APIV1PlaylistResponse_Playlists.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.createPlaylist = NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getPlaylist = NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.putPlaylist = NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.postPlaylist = NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getActivePlaylist = NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.focused = NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.nextFocus = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.previousFocus = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.activePresentationFocus = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.activeAnnouncementFocus = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.focusedTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 106) {
            break;
          }

          message.activePresentationTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 14:
          if (tag != 114) {
            break;
          }

          message.activeAnnouncementTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 15:
          if (tag != 122) {
            break;
          }

          message.focusedNextTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag != 130) {
            break;
          }

          message.focusedPreviousTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 17:
          if (tag != 138) {
            break;
          }

          message.activePresentationNextTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 18:
          if (tag != 146) {
            break;
          }

          message.activeAnnouncementNextTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 19:
          if (tag != 154) {
            break;
          }

          message.activePresentationPreviousTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 20:
          if (tag != 162) {
            break;
          }

          message.activeAnnouncementPreviousTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 21:
          if (tag != 170) {
            break;
          }

          message.idFocus = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag != 178) {
            break;
          }

          message.idTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag != 186) {
            break;
          }

          message.idNextTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag != 194) {
            break;
          }

          message.idPreviousTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag != 202) {
            break;
          }

          message.focusedIndexTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag != 210) {
            break;
          }

          message.activePresentationIndexTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 27:
          if (tag != 218) {
            break;
          }

          message.activeAnnouncementIndexTrigger = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 28:
          if (tag != 226) {
            break;
          }

          message.idUpdates = NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistResponse {
    return {
      playlists: isSet(object.playlists)
        ? NetworkAPIV1_APIV1PlaylistResponse_Playlists.fromJSON(object.playlists)
        : undefined,
      createPlaylist: isSet(object.createPlaylist)
        ? NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist.fromJSON(object.createPlaylist)
        : undefined,
      getPlaylist: isSet(object.getPlaylist)
        ? NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist.fromJSON(object.getPlaylist)
        : undefined,
      putPlaylist: isSet(object.putPlaylist)
        ? NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist.fromJSON(object.putPlaylist)
        : undefined,
      postPlaylist: isSet(object.postPlaylist)
        ? NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist.fromJSON(object.postPlaylist)
        : undefined,
      getActivePlaylist: isSet(object.getActivePlaylist)
        ? NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist.fromJSON(object.getActivePlaylist)
        : undefined,
      focused: isSet(object.focused)
        ? NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist.fromJSON(object.focused)
        : undefined,
      nextFocus: isSet(object.nextFocus)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.nextFocus)
        : undefined,
      previousFocus: isSet(object.previousFocus)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.previousFocus)
        : undefined,
      activePresentationFocus: isSet(object.activePresentationFocus)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.activePresentationFocus)
        : undefined,
      activeAnnouncementFocus: isSet(object.activeAnnouncementFocus)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.activeAnnouncementFocus)
        : undefined,
      focusedTrigger: isSet(object.focusedTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.focusedTrigger)
        : undefined,
      activePresentationTrigger: isSet(object.activePresentationTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.activePresentationTrigger)
        : undefined,
      activeAnnouncementTrigger: isSet(object.activeAnnouncementTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.activeAnnouncementTrigger)
        : undefined,
      focusedNextTrigger: isSet(object.focusedNextTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.focusedNextTrigger)
        : undefined,
      focusedPreviousTrigger: isSet(object.focusedPreviousTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.focusedPreviousTrigger)
        : undefined,
      activePresentationNextTrigger: isSet(object.activePresentationNextTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.activePresentationNextTrigger)
        : undefined,
      activeAnnouncementNextTrigger: isSet(object.activeAnnouncementNextTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.activeAnnouncementNextTrigger)
        : undefined,
      activePresentationPreviousTrigger: isSet(object.activePresentationPreviousTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.activePresentationPreviousTrigger)
        : undefined,
      activeAnnouncementPreviousTrigger: isSet(object.activeAnnouncementPreviousTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.activeAnnouncementPreviousTrigger)
        : undefined,
      idFocus: isSet(object.idFocus)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.idFocus)
        : undefined,
      idTrigger: isSet(object.idTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.idTrigger)
        : undefined,
      idNextTrigger: isSet(object.idNextTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.idNextTrigger)
        : undefined,
      idPreviousTrigger: isSet(object.idPreviousTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.idPreviousTrigger)
        : undefined,
      focusedIndexTrigger: isSet(object.focusedIndexTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.focusedIndexTrigger)
        : undefined,
      activePresentationIndexTrigger: isSet(object.activePresentationIndexTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.activePresentationIndexTrigger)
        : undefined,
      activeAnnouncementIndexTrigger: isSet(object.activeAnnouncementIndexTrigger)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.activeAnnouncementIndexTrigger)
        : undefined,
      idUpdates: isSet(object.idUpdates)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromJSON(object.idUpdates)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistResponse): unknown {
    const obj: any = {};
    message.playlists !== undefined && (obj.playlists = message.playlists
      ? NetworkAPIV1_APIV1PlaylistResponse_Playlists.toJSON(message.playlists)
      : undefined);
    message.createPlaylist !== undefined && (obj.createPlaylist = message.createPlaylist
      ? NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist.toJSON(message.createPlaylist)
      : undefined);
    message.getPlaylist !== undefined && (obj.getPlaylist = message.getPlaylist
      ? NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist.toJSON(message.getPlaylist)
      : undefined);
    message.putPlaylist !== undefined && (obj.putPlaylist = message.putPlaylist
      ? NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist.toJSON(message.putPlaylist)
      : undefined);
    message.postPlaylist !== undefined && (obj.postPlaylist = message.postPlaylist
      ? NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist.toJSON(message.postPlaylist)
      : undefined);
    message.getActivePlaylist !== undefined && (obj.getActivePlaylist = message.getActivePlaylist
      ? NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist.toJSON(message.getActivePlaylist)
      : undefined);
    message.focused !== undefined && (obj.focused = message.focused
      ? NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist.toJSON(message.focused)
      : undefined);
    message.nextFocus !== undefined && (obj.nextFocus = message.nextFocus
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.nextFocus)
      : undefined);
    message.previousFocus !== undefined && (obj.previousFocus = message.previousFocus
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.previousFocus)
      : undefined);
    message.activePresentationFocus !== undefined && (obj.activePresentationFocus = message.activePresentationFocus
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.activePresentationFocus)
      : undefined);
    message.activeAnnouncementFocus !== undefined && (obj.activeAnnouncementFocus = message.activeAnnouncementFocus
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.activeAnnouncementFocus)
      : undefined);
    message.focusedTrigger !== undefined && (obj.focusedTrigger = message.focusedTrigger
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.focusedTrigger)
      : undefined);
    message.activePresentationTrigger !== undefined &&
      (obj.activePresentationTrigger = message.activePresentationTrigger
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.activePresentationTrigger)
        : undefined);
    message.activeAnnouncementTrigger !== undefined &&
      (obj.activeAnnouncementTrigger = message.activeAnnouncementTrigger
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.activeAnnouncementTrigger)
        : undefined);
    message.focusedNextTrigger !== undefined && (obj.focusedNextTrigger = message.focusedNextTrigger
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.focusedNextTrigger)
      : undefined);
    message.focusedPreviousTrigger !== undefined && (obj.focusedPreviousTrigger = message.focusedPreviousTrigger
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.focusedPreviousTrigger)
      : undefined);
    message.activePresentationNextTrigger !== undefined &&
      (obj.activePresentationNextTrigger = message.activePresentationNextTrigger
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.activePresentationNextTrigger)
        : undefined);
    message.activeAnnouncementNextTrigger !== undefined &&
      (obj.activeAnnouncementNextTrigger = message.activeAnnouncementNextTrigger
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.activeAnnouncementNextTrigger)
        : undefined);
    message.activePresentationPreviousTrigger !== undefined &&
      (obj.activePresentationPreviousTrigger = message.activePresentationPreviousTrigger
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.activePresentationPreviousTrigger)
        : undefined);
    message.activeAnnouncementPreviousTrigger !== undefined &&
      (obj.activeAnnouncementPreviousTrigger = message.activeAnnouncementPreviousTrigger
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.activeAnnouncementPreviousTrigger)
        : undefined);
    message.idFocus !== undefined && (obj.idFocus = message.idFocus
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.idFocus)
      : undefined);
    message.idTrigger !== undefined && (obj.idTrigger = message.idTrigger
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.idTrigger)
      : undefined);
    message.idNextTrigger !== undefined && (obj.idNextTrigger = message.idNextTrigger
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.idNextTrigger)
      : undefined);
    message.idPreviousTrigger !== undefined && (obj.idPreviousTrigger = message.idPreviousTrigger
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.idPreviousTrigger)
      : undefined);
    message.focusedIndexTrigger !== undefined && (obj.focusedIndexTrigger = message.focusedIndexTrigger
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.focusedIndexTrigger)
      : undefined);
    message.activePresentationIndexTrigger !== undefined &&
      (obj.activePresentationIndexTrigger = message.activePresentationIndexTrigger
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.activePresentationIndexTrigger)
        : undefined);
    message.activeAnnouncementIndexTrigger !== undefined &&
      (obj.activeAnnouncementIndexTrigger = message.activeAnnouncementIndexTrigger
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.activeAnnouncementIndexTrigger)
        : undefined);
    message.idUpdates !== undefined && (obj.idUpdates = message.idUpdates
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.toJSON(message.idUpdates)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistResponse {
    return NetworkAPIV1_APIV1PlaylistResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistResponse {
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse();
    message.playlists = (object.playlists !== undefined && object.playlists !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_Playlists.fromPartial(object.playlists)
      : undefined;
    message.createPlaylist = (object.createPlaylist !== undefined && object.createPlaylist !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist.fromPartial(object.createPlaylist)
      : undefined;
    message.getPlaylist = (object.getPlaylist !== undefined && object.getPlaylist !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist.fromPartial(object.getPlaylist)
      : undefined;
    message.putPlaylist = (object.putPlaylist !== undefined && object.putPlaylist !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist.fromPartial(object.putPlaylist)
      : undefined;
    message.postPlaylist = (object.postPlaylist !== undefined && object.postPlaylist !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist.fromPartial(object.postPlaylist)
      : undefined;
    message.getActivePlaylist = (object.getActivePlaylist !== undefined && object.getActivePlaylist !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist.fromPartial(object.getActivePlaylist)
      : undefined;
    message.focused = (object.focused !== undefined && object.focused !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist.fromPartial(object.focused)
      : undefined;
    message.nextFocus = (object.nextFocus !== undefined && object.nextFocus !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.nextFocus)
      : undefined;
    message.previousFocus = (object.previousFocus !== undefined && object.previousFocus !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.previousFocus)
      : undefined;
    message.activePresentationFocus =
      (object.activePresentationFocus !== undefined && object.activePresentationFocus !== null)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.activePresentationFocus)
        : undefined;
    message.activeAnnouncementFocus =
      (object.activeAnnouncementFocus !== undefined && object.activeAnnouncementFocus !== null)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.activeAnnouncementFocus)
        : undefined;
    message.focusedTrigger = (object.focusedTrigger !== undefined && object.focusedTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.focusedTrigger)
      : undefined;
    message.activePresentationTrigger =
      (object.activePresentationTrigger !== undefined && object.activePresentationTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.activePresentationTrigger)
        : undefined;
    message.activeAnnouncementTrigger =
      (object.activeAnnouncementTrigger !== undefined && object.activeAnnouncementTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.activeAnnouncementTrigger)
        : undefined;
    message.focusedNextTrigger = (object.focusedNextTrigger !== undefined && object.focusedNextTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.focusedNextTrigger)
      : undefined;
    message.focusedPreviousTrigger =
      (object.focusedPreviousTrigger !== undefined && object.focusedPreviousTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.focusedPreviousTrigger)
        : undefined;
    message.activePresentationNextTrigger =
      (object.activePresentationNextTrigger !== undefined && object.activePresentationNextTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.activePresentationNextTrigger)
        : undefined;
    message.activeAnnouncementNextTrigger =
      (object.activeAnnouncementNextTrigger !== undefined && object.activeAnnouncementNextTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.activeAnnouncementNextTrigger)
        : undefined;
    message.activePresentationPreviousTrigger =
      (object.activePresentationPreviousTrigger !== undefined && object.activePresentationPreviousTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.activePresentationPreviousTrigger)
        : undefined;
    message.activeAnnouncementPreviousTrigger =
      (object.activeAnnouncementPreviousTrigger !== undefined && object.activeAnnouncementPreviousTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.activeAnnouncementPreviousTrigger)
        : undefined;
    message.idFocus = (object.idFocus !== undefined && object.idFocus !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.idFocus)
      : undefined;
    message.idTrigger = (object.idTrigger !== undefined && object.idTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.idTrigger)
      : undefined;
    message.idNextTrigger = (object.idNextTrigger !== undefined && object.idNextTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.idNextTrigger)
      : undefined;
    message.idPreviousTrigger = (object.idPreviousTrigger !== undefined && object.idPreviousTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.idPreviousTrigger)
      : undefined;
    message.focusedIndexTrigger = (object.focusedIndexTrigger !== undefined && object.focusedIndexTrigger !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.focusedIndexTrigger)
      : undefined;
    message.activePresentationIndexTrigger =
      (object.activePresentationIndexTrigger !== undefined && object.activePresentationIndexTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.activePresentationIndexTrigger)
        : undefined;
    message.activeAnnouncementIndexTrigger =
      (object.activeAnnouncementIndexTrigger !== undefined && object.activeAnnouncementIndexTrigger !== null)
        ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.activeAnnouncementIndexTrigger)
        : undefined;
    message.idUpdates = (object.idUpdates !== undefined && object.idUpdates !== null)
      ? NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(object.idUpdates)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistResponse_Playlists(): NetworkAPIV1_APIV1PlaylistResponse_Playlists {
  return { playlists: [] };
}

export const NetworkAPIV1_APIV1PlaylistResponse_Playlists = {
  encode(message: NetworkAPIV1_APIV1PlaylistResponse_Playlists, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.playlists) {
      APIV1Playlist.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistResponse_Playlists {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_Playlists();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlists.push(APIV1Playlist.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistResponse_Playlists {
    return {
      playlists: Array.isArray(object?.playlists) ? object.playlists.map((e: any) => APIV1Playlist.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistResponse_Playlists): unknown {
    const obj: any = {};
    if (message.playlists) {
      obj.playlists = message.playlists.map((e) => e ? APIV1Playlist.toJSON(e) : undefined);
    } else {
      obj.playlists = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_Playlists>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_Playlists {
    return NetworkAPIV1_APIV1PlaylistResponse_Playlists.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_Playlists>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_Playlists {
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_Playlists();
    message.playlists = object.playlists?.map((e) => APIV1Playlist.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist(): NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist {
  return { playlist: undefined };
}

export const NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist = {
  encode(
    message: NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.playlist !== undefined) {
      APIV1Playlist.encode(message.playlist, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlist = APIV1Playlist.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist {
    return { playlist: isSet(object.playlist) ? APIV1Playlist.fromJSON(object.playlist) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist): unknown {
    const obj: any = {};
    message.playlist !== undefined &&
      (obj.playlist = message.playlist ? APIV1Playlist.toJSON(message.playlist) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist {
    return NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist {
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_CreatePlaylist();
    message.playlist = (object.playlist !== undefined && object.playlist !== null)
      ? APIV1Playlist.fromPartial(object.playlist)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist(): NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist {
  return { presentation: undefined, announcements: undefined };
}

export const NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist = {
  encode(
    message: NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.presentation !== undefined) {
      APIV1PlaylistAndItem.encode(message.presentation, writer.uint32(10).fork()).ldelim();
    }
    if (message.announcements !== undefined) {
      APIV1PlaylistAndItem.encode(message.announcements, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.presentation = APIV1PlaylistAndItem.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.announcements = APIV1PlaylistAndItem.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist {
    return {
      presentation: isSet(object.presentation) ? APIV1PlaylistAndItem.fromJSON(object.presentation) : undefined,
      announcements: isSet(object.announcements) ? APIV1PlaylistAndItem.fromJSON(object.announcements) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist): unknown {
    const obj: any = {};
    message.presentation !== undefined &&
      (obj.presentation = message.presentation ? APIV1PlaylistAndItem.toJSON(message.presentation) : undefined);
    message.announcements !== undefined &&
      (obj.announcements = message.announcements ? APIV1PlaylistAndItem.toJSON(message.announcements) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist {
    return NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist {
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_GetActivePlaylist();
    message.presentation = (object.presentation !== undefined && object.presentation !== null)
      ? APIV1PlaylistAndItem.fromPartial(object.presentation)
      : undefined;
    message.announcements = (object.announcements !== undefined && object.announcements !== null)
      ? APIV1PlaylistAndItem.fromPartial(object.announcements)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistResponse_GetPlaylist(): NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist {
  return { id: undefined, items: [] };
}

export const NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist = {
  encode(
    message: NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.items) {
      APIV1PlaylistItem.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_GetPlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.items.push(APIV1PlaylistItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist {
    return {
      id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined,
      items: Array.isArray(object?.items) ? object.items.map((e: any) => APIV1PlaylistItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    if (message.items) {
      obj.items = message.items.map((e) => e ? APIV1PlaylistItem.toJSON(e) : undefined);
    } else {
      obj.items = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist {
    return NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_GetPlaylist {
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_GetPlaylist();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    message.items = object.items?.map((e) => APIV1PlaylistItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistResponse_PutPlaylist(): NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist {
  return {};
}

export const NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist = {
  encode(_: NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_PutPlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist {
    return NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_PutPlaylist {
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_PutPlaylist();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistResponse_PostPlaylist(): NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist {
  return { playlist: undefined };
}

export const NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist = {
  encode(
    message: NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.playlist !== undefined) {
      APIV1Playlist.encode(message.playlist, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_PostPlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlist = APIV1Playlist.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist {
    return { playlist: isSet(object.playlist) ? APIV1Playlist.fromJSON(object.playlist) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist): unknown {
    const obj: any = {};
    message.playlist !== undefined &&
      (obj.playlist = message.playlist ? APIV1Playlist.toJSON(message.playlist) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist {
    return NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_PostPlaylist {
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_PostPlaylist();
    message.playlist = (object.playlist !== undefined && object.playlist !== null)
      ? APIV1Playlist.fromPartial(object.playlist)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist(): NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist {
  return { playlist: undefined };
}

export const NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist = {
  encode(
    message: NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.playlist !== undefined) {
      APIV1PlaylistAndItem.encode(message.playlist, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playlist = APIV1PlaylistAndItem.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist {
    return { playlist: isSet(object.playlist) ? APIV1PlaylistAndItem.fromJSON(object.playlist) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist): unknown {
    const obj: any = {};
    message.playlist !== undefined &&
      (obj.playlist = message.playlist ? APIV1PlaylistAndItem.toJSON(message.playlist) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist {
    return NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist {
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_GetFocusedPlaylist();
    message.playlist = (object.playlist !== undefined && object.playlist !== null)
      ? APIV1PlaylistAndItem.fromPartial(object.playlist)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PlaylistResponse_EmptyMessage(): NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage {
  return {};
}

export const NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage = {
  encode(_: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_EmptyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage {
    return NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PlaylistResponse_EmptyMessage {
    const message = createBaseNetworkAPIV1_APIV1PlaylistResponse_EmptyMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollResponse(): NetworkAPIV1_APIV1PrerollResponse {
  return { prerollReady: undefined, activatePrerollItem: undefined, cancelPrerollItem: undefined };
}

export const NetworkAPIV1_APIV1PrerollResponse = {
  encode(message: NetworkAPIV1_APIV1PrerollResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.prerollReady !== undefined) {
      NetworkAPIV1_APIV1PrerollResponse_PrerollReady.encode(message.prerollReady, writer.uint32(10).fork()).ldelim();
    }
    if (message.activatePrerollItem !== undefined) {
      NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem.encode(
        message.activatePrerollItem,
        writer.uint32(26).fork(),
      ).ldelim();
    }
    if (message.cancelPrerollItem !== undefined) {
      NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem.encode(message.cancelPrerollItem, writer.uint32(34).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.prerollReady = NetworkAPIV1_APIV1PrerollResponse_PrerollReady.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.activatePrerollItem = NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.cancelPrerollItem = NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollResponse {
    return {
      prerollReady: isSet(object.prerollReady)
        ? NetworkAPIV1_APIV1PrerollResponse_PrerollReady.fromJSON(object.prerollReady)
        : undefined,
      activatePrerollItem: isSet(object.activatePrerollItem)
        ? NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem.fromJSON(object.activatePrerollItem)
        : undefined,
      cancelPrerollItem: isSet(object.cancelPrerollItem)
        ? NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem.fromJSON(object.cancelPrerollItem)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollResponse): unknown {
    const obj: any = {};
    message.prerollReady !== undefined && (obj.prerollReady = message.prerollReady
      ? NetworkAPIV1_APIV1PrerollResponse_PrerollReady.toJSON(message.prerollReady)
      : undefined);
    message.activatePrerollItem !== undefined && (obj.activatePrerollItem = message.activatePrerollItem
      ? NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem.toJSON(message.activatePrerollItem)
      : undefined);
    message.cancelPrerollItem !== undefined && (obj.cancelPrerollItem = message.cancelPrerollItem
      ? NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem.toJSON(message.cancelPrerollItem)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollResponse {
    return NetworkAPIV1_APIV1PrerollResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollResponse {
    const message = createBaseNetworkAPIV1_APIV1PrerollResponse();
    message.prerollReady = (object.prerollReady !== undefined && object.prerollReady !== null)
      ? NetworkAPIV1_APIV1PrerollResponse_PrerollReady.fromPartial(object.prerollReady)
      : undefined;
    message.activatePrerollItem = (object.activatePrerollItem !== undefined && object.activatePrerollItem !== null)
      ? NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem.fromPartial(object.activatePrerollItem)
      : undefined;
    message.cancelPrerollItem = (object.cancelPrerollItem !== undefined && object.cancelPrerollItem !== null)
      ? NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem.fromPartial(object.cancelPrerollItem)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollResponse_PrerollReady(): NetworkAPIV1_APIV1PrerollResponse_PrerollReady {
  return { id: 0, latency: 0, time: 0 };
}

export const NetworkAPIV1_APIV1PrerollResponse_PrerollReady = {
  encode(
    message: NetworkAPIV1_APIV1PrerollResponse_PrerollReady,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.latency !== 0) {
      writer.uint32(16).uint64(message.latency);
    }
    if (message.time !== 0) {
      writer.uint32(24).uint64(message.time);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollResponse_PrerollReady {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollResponse_PrerollReady();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.latency = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.time = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollResponse_PrerollReady {
    return {
      id: isSet(object.id) ? Number(object.id) : 0,
      latency: isSet(object.latency) ? Number(object.latency) : 0,
      time: isSet(object.time) ? Number(object.time) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollResponse_PrerollReady): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    message.latency !== undefined && (obj.latency = Math.round(message.latency));
    message.time !== undefined && (obj.time = Math.round(message.time));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollResponse_PrerollReady>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollResponse_PrerollReady {
    return NetworkAPIV1_APIV1PrerollResponse_PrerollReady.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollResponse_PrerollReady>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollResponse_PrerollReady {
    const message = createBaseNetworkAPIV1_APIV1PrerollResponse_PrerollReady();
    message.id = object.id ?? 0;
    message.latency = object.latency ?? 0;
    message.time = object.time ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem(): NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem {
  return { success: false };
}

export const NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem = {
  encode(
    message: NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.success === true) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem {
    return { success: isSet(object.success) ? Boolean(object.success) : false };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem): unknown {
    const obj: any = {};
    message.success !== undefined && (obj.success = message.success);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem {
    return NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem {
    const message = createBaseNetworkAPIV1_APIV1PrerollResponse_ActivatePrerollItem();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem(): NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem {
  return { success: false };
}

export const NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem = {
  encode(
    message: NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.success === true) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem {
    return { success: isSet(object.success) ? Boolean(object.success) : false };
  },

  toJSON(message: NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem): unknown {
    const obj: any = {};
    message.success !== undefined && (obj.success = message.success);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem {
    return NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem {
    const message = createBaseNetworkAPIV1_APIV1PrerollResponse_CancelPrerollItem();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse(): NetworkAPIV1_APIV1PresentationResponse {
  return {
    active: undefined,
    slideIndex: undefined,
    chordChart: undefined,
    chordChartUpdate: undefined,
    presentation: undefined,
    deletePresentation: undefined,
    triggerPresentation: undefined,
    triggerCue: undefined,
    timelineOperation: undefined,
    activePresentationTimelineOperation: undefined,
    focusedPresentationTimelineOperation: undefined,
    activePresentationTimelineStatus: undefined,
    focusedPresentationTimelineStatus: undefined,
    thumbnail: undefined,
    focused: undefined,
    focus: undefined,
    trigger: undefined,
  };
}

export const NetworkAPIV1_APIV1PresentationResponse = {
  encode(message: NetworkAPIV1_APIV1PresentationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.active !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_Active.encode(message.active, writer.uint32(10).fork()).ldelim();
    }
    if (message.slideIndex !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_SlideIndex.encode(message.slideIndex, writer.uint32(18).fork()).ldelim();
    }
    if (message.chordChart !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_ChordChart.encode(message.chordChart, writer.uint32(26).fork()).ldelim();
    }
    if (message.chordChartUpdate !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates.encode(
        message.chordChartUpdate,
        writer.uint32(34).fork(),
      ).ldelim();
    }
    if (message.presentation !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_Presentation.encode(message.presentation, writer.uint32(42).fork())
        .ldelim();
    }
    if (message.deletePresentation !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_DeletePresentation.encode(
        message.deletePresentation,
        writer.uint32(50).fork(),
      ).ldelim();
    }
    if (message.triggerPresentation !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation.encode(
        message.triggerPresentation,
        writer.uint32(58).fork(),
      ).ldelim();
    }
    if (message.triggerCue !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_TriggerCue.encode(message.triggerCue, writer.uint32(66).fork()).ldelim();
    }
    if (message.timelineOperation !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_TimelineOperation.encode(
        message.timelineOperation,
        writer.uint32(74).fork(),
      ).ldelim();
    }
    if (message.activePresentationTimelineOperation !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation.encode(
        message.activePresentationTimelineOperation,
        writer.uint32(82).fork(),
      ).ldelim();
    }
    if (message.focusedPresentationTimelineOperation !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation.encode(
        message.focusedPresentationTimelineOperation,
        writer.uint32(90).fork(),
      ).ldelim();
    }
    if (message.activePresentationTimelineStatus !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus.encode(
        message.activePresentationTimelineStatus,
        writer.uint32(98).fork(),
      ).ldelim();
    }
    if (message.focusedPresentationTimelineStatus !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus.encode(
        message.focusedPresentationTimelineStatus,
        writer.uint32(106).fork(),
      ).ldelim();
    }
    if (message.thumbnail !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_Thumbnail.encode(message.thumbnail, writer.uint32(114).fork()).ldelim();
    }
    if (message.focused !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_Focused.encode(message.focused, writer.uint32(122).fork()).ldelim();
    }
    if (message.focus !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_EmptyMessage.encode(message.focus, writer.uint32(130).fork()).ldelim();
    }
    if (message.trigger !== undefined) {
      NetworkAPIV1_APIV1PresentationResponse_EmptyMessage.encode(message.trigger, writer.uint32(138).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.active = NetworkAPIV1_APIV1PresentationResponse_Active.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.slideIndex = NetworkAPIV1_APIV1PresentationResponse_SlideIndex.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.chordChart = NetworkAPIV1_APIV1PresentationResponse_ChordChart.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.chordChartUpdate = NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.presentation = NetworkAPIV1_APIV1PresentationResponse_Presentation.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.deletePresentation = NetworkAPIV1_APIV1PresentationResponse_DeletePresentation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.triggerPresentation = NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.triggerCue = NetworkAPIV1_APIV1PresentationResponse_TriggerCue.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.timelineOperation = NetworkAPIV1_APIV1PresentationResponse_TimelineOperation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.activePresentationTimelineOperation =
            NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.focusedPresentationTimelineOperation =
            NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.activePresentationTimelineStatus =
            NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 106) {
            break;
          }

          message.focusedPresentationTimelineStatus =
            NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag != 114) {
            break;
          }

          message.thumbnail = NetworkAPIV1_APIV1PresentationResponse_Thumbnail.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag != 122) {
            break;
          }

          message.focused = NetworkAPIV1_APIV1PresentationResponse_Focused.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag != 130) {
            break;
          }

          message.focus = NetworkAPIV1_APIV1PresentationResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag != 138) {
            break;
          }

          message.trigger = NetworkAPIV1_APIV1PresentationResponse_EmptyMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationResponse {
    return {
      active: isSet(object.active) ? NetworkAPIV1_APIV1PresentationResponse_Active.fromJSON(object.active) : undefined,
      slideIndex: isSet(object.slideIndex)
        ? NetworkAPIV1_APIV1PresentationResponse_SlideIndex.fromJSON(object.slideIndex)
        : undefined,
      chordChart: isSet(object.chordChart)
        ? NetworkAPIV1_APIV1PresentationResponse_ChordChart.fromJSON(object.chordChart)
        : undefined,
      chordChartUpdate: isSet(object.chordChartUpdate)
        ? NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates.fromJSON(object.chordChartUpdate)
        : undefined,
      presentation: isSet(object.presentation)
        ? NetworkAPIV1_APIV1PresentationResponse_Presentation.fromJSON(object.presentation)
        : undefined,
      deletePresentation: isSet(object.deletePresentation)
        ? NetworkAPIV1_APIV1PresentationResponse_DeletePresentation.fromJSON(object.deletePresentation)
        : undefined,
      triggerPresentation: isSet(object.triggerPresentation)
        ? NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation.fromJSON(object.triggerPresentation)
        : undefined,
      triggerCue: isSet(object.triggerCue)
        ? NetworkAPIV1_APIV1PresentationResponse_TriggerCue.fromJSON(object.triggerCue)
        : undefined,
      timelineOperation: isSet(object.timelineOperation)
        ? NetworkAPIV1_APIV1PresentationResponse_TimelineOperation.fromJSON(object.timelineOperation)
        : undefined,
      activePresentationTimelineOperation: isSet(object.activePresentationTimelineOperation)
        ? NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation.fromJSON(
          object.activePresentationTimelineOperation,
        )
        : undefined,
      focusedPresentationTimelineOperation: isSet(object.focusedPresentationTimelineOperation)
        ? NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation.fromJSON(
          object.focusedPresentationTimelineOperation,
        )
        : undefined,
      activePresentationTimelineStatus: isSet(object.activePresentationTimelineStatus)
        ? NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus.fromJSON(
          object.activePresentationTimelineStatus,
        )
        : undefined,
      focusedPresentationTimelineStatus: isSet(object.focusedPresentationTimelineStatus)
        ? NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus.fromJSON(
          object.focusedPresentationTimelineStatus,
        )
        : undefined,
      thumbnail: isSet(object.thumbnail)
        ? NetworkAPIV1_APIV1PresentationResponse_Thumbnail.fromJSON(object.thumbnail)
        : undefined,
      focused: isSet(object.focused)
        ? NetworkAPIV1_APIV1PresentationResponse_Focused.fromJSON(object.focused)
        : undefined,
      focus: isSet(object.focus)
        ? NetworkAPIV1_APIV1PresentationResponse_EmptyMessage.fromJSON(object.focus)
        : undefined,
      trigger: isSet(object.trigger)
        ? NetworkAPIV1_APIV1PresentationResponse_EmptyMessage.fromJSON(object.trigger)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationResponse): unknown {
    const obj: any = {};
    message.active !== undefined &&
      (obj.active = message.active ? NetworkAPIV1_APIV1PresentationResponse_Active.toJSON(message.active) : undefined);
    message.slideIndex !== undefined && (obj.slideIndex = message.slideIndex
      ? NetworkAPIV1_APIV1PresentationResponse_SlideIndex.toJSON(message.slideIndex)
      : undefined);
    message.chordChart !== undefined && (obj.chordChart = message.chordChart
      ? NetworkAPIV1_APIV1PresentationResponse_ChordChart.toJSON(message.chordChart)
      : undefined);
    message.chordChartUpdate !== undefined && (obj.chordChartUpdate = message.chordChartUpdate
      ? NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates.toJSON(message.chordChartUpdate)
      : undefined);
    message.presentation !== undefined && (obj.presentation = message.presentation
      ? NetworkAPIV1_APIV1PresentationResponse_Presentation.toJSON(message.presentation)
      : undefined);
    message.deletePresentation !== undefined && (obj.deletePresentation = message.deletePresentation
      ? NetworkAPIV1_APIV1PresentationResponse_DeletePresentation.toJSON(message.deletePresentation)
      : undefined);
    message.triggerPresentation !== undefined && (obj.triggerPresentation = message.triggerPresentation
      ? NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation.toJSON(message.triggerPresentation)
      : undefined);
    message.triggerCue !== undefined && (obj.triggerCue = message.triggerCue
      ? NetworkAPIV1_APIV1PresentationResponse_TriggerCue.toJSON(message.triggerCue)
      : undefined);
    message.timelineOperation !== undefined && (obj.timelineOperation = message.timelineOperation
      ? NetworkAPIV1_APIV1PresentationResponse_TimelineOperation.toJSON(message.timelineOperation)
      : undefined);
    message.activePresentationTimelineOperation !== undefined &&
      (obj.activePresentationTimelineOperation = message.activePresentationTimelineOperation
        ? NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation.toJSON(
          message.activePresentationTimelineOperation,
        )
        : undefined);
    message.focusedPresentationTimelineOperation !== undefined &&
      (obj.focusedPresentationTimelineOperation = message.focusedPresentationTimelineOperation
        ? NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation.toJSON(
          message.focusedPresentationTimelineOperation,
        )
        : undefined);
    message.activePresentationTimelineStatus !== undefined &&
      (obj.activePresentationTimelineStatus = message.activePresentationTimelineStatus
        ? NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus.toJSON(
          message.activePresentationTimelineStatus,
        )
        : undefined);
    message.focusedPresentationTimelineStatus !== undefined &&
      (obj.focusedPresentationTimelineStatus = message.focusedPresentationTimelineStatus
        ? NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus.toJSON(
          message.focusedPresentationTimelineStatus,
        )
        : undefined);
    message.thumbnail !== undefined && (obj.thumbnail = message.thumbnail
      ? NetworkAPIV1_APIV1PresentationResponse_Thumbnail.toJSON(message.thumbnail)
      : undefined);
    message.focused !== undefined && (obj.focused = message.focused
      ? NetworkAPIV1_APIV1PresentationResponse_Focused.toJSON(message.focused)
      : undefined);
    message.focus !== undefined &&
      (obj.focus = message.focus
        ? NetworkAPIV1_APIV1PresentationResponse_EmptyMessage.toJSON(message.focus)
        : undefined);
    message.trigger !== undefined && (obj.trigger = message.trigger
      ? NetworkAPIV1_APIV1PresentationResponse_EmptyMessage.toJSON(message.trigger)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse {
    return NetworkAPIV1_APIV1PresentationResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationResponse {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse();
    message.active = (object.active !== undefined && object.active !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_Active.fromPartial(object.active)
      : undefined;
    message.slideIndex = (object.slideIndex !== undefined && object.slideIndex !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_SlideIndex.fromPartial(object.slideIndex)
      : undefined;
    message.chordChart = (object.chordChart !== undefined && object.chordChart !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_ChordChart.fromPartial(object.chordChart)
      : undefined;
    message.chordChartUpdate = (object.chordChartUpdate !== undefined && object.chordChartUpdate !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates.fromPartial(object.chordChartUpdate)
      : undefined;
    message.presentation = (object.presentation !== undefined && object.presentation !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_Presentation.fromPartial(object.presentation)
      : undefined;
    message.deletePresentation = (object.deletePresentation !== undefined && object.deletePresentation !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_DeletePresentation.fromPartial(object.deletePresentation)
      : undefined;
    message.triggerPresentation = (object.triggerPresentation !== undefined && object.triggerPresentation !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation.fromPartial(object.triggerPresentation)
      : undefined;
    message.triggerCue = (object.triggerCue !== undefined && object.triggerCue !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_TriggerCue.fromPartial(object.triggerCue)
      : undefined;
    message.timelineOperation = (object.timelineOperation !== undefined && object.timelineOperation !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_TimelineOperation.fromPartial(object.timelineOperation)
      : undefined;
    message.activePresentationTimelineOperation =
      (object.activePresentationTimelineOperation !== undefined && object.activePresentationTimelineOperation !== null)
        ? NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation.fromPartial(
          object.activePresentationTimelineOperation,
        )
        : undefined;
    message.focusedPresentationTimelineOperation =
      (object.focusedPresentationTimelineOperation !== undefined &&
          object.focusedPresentationTimelineOperation !== null)
        ? NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation.fromPartial(
          object.focusedPresentationTimelineOperation,
        )
        : undefined;
    message.activePresentationTimelineStatus =
      (object.activePresentationTimelineStatus !== undefined && object.activePresentationTimelineStatus !== null)
        ? NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus.fromPartial(
          object.activePresentationTimelineStatus,
        )
        : undefined;
    message.focusedPresentationTimelineStatus =
      (object.focusedPresentationTimelineStatus !== undefined && object.focusedPresentationTimelineStatus !== null)
        ? NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus.fromPartial(
          object.focusedPresentationTimelineStatus,
        )
        : undefined;
    message.thumbnail = (object.thumbnail !== undefined && object.thumbnail !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_Thumbnail.fromPartial(object.thumbnail)
      : undefined;
    message.focused = (object.focused !== undefined && object.focused !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_Focused.fromPartial(object.focused)
      : undefined;
    message.focus = (object.focus !== undefined && object.focus !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_EmptyMessage.fromPartial(object.focus)
      : undefined;
    message.trigger = (object.trigger !== undefined && object.trigger !== null)
      ? NetworkAPIV1_APIV1PresentationResponse_EmptyMessage.fromPartial(object.trigger)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_Active(): NetworkAPIV1_APIV1PresentationResponse_Active {
  return { presentation: undefined };
}

export const NetworkAPIV1_APIV1PresentationResponse_Active = {
  encode(message: NetworkAPIV1_APIV1PresentationResponse_Active, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.presentation !== undefined) {
      APIV1Presentation.encode(message.presentation, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_Active {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_Active();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.presentation = APIV1Presentation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationResponse_Active {
    return { presentation: isSet(object.presentation) ? APIV1Presentation.fromJSON(object.presentation) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationResponse_Active): unknown {
    const obj: any = {};
    message.presentation !== undefined &&
      (obj.presentation = message.presentation ? APIV1Presentation.toJSON(message.presentation) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_Active>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_Active {
    return NetworkAPIV1_APIV1PresentationResponse_Active.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_Active>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationResponse_Active {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_Active();
    message.presentation = (object.presentation !== undefined && object.presentation !== null)
      ? APIV1Presentation.fromPartial(object.presentation)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_SlideIndex(): NetworkAPIV1_APIV1PresentationResponse_SlideIndex {
  return { presentationIndex: undefined };
}

export const NetworkAPIV1_APIV1PresentationResponse_SlideIndex = {
  encode(
    message: NetworkAPIV1_APIV1PresentationResponse_SlideIndex,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.presentationIndex !== undefined) {
      APIV1SlideIndex.encode(message.presentationIndex, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_SlideIndex {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_SlideIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.presentationIndex = APIV1SlideIndex.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationResponse_SlideIndex {
    return {
      presentationIndex: isSet(object.presentationIndex)
        ? APIV1SlideIndex.fromJSON(object.presentationIndex)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationResponse_SlideIndex): unknown {
    const obj: any = {};
    message.presentationIndex !== undefined &&
      (obj.presentationIndex = message.presentationIndex
        ? APIV1SlideIndex.toJSON(message.presentationIndex)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_SlideIndex>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_SlideIndex {
    return NetworkAPIV1_APIV1PresentationResponse_SlideIndex.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_SlideIndex>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationResponse_SlideIndex {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_SlideIndex();
    message.presentationIndex = (object.presentationIndex !== undefined && object.presentationIndex !== null)
      ? APIV1SlideIndex.fromPartial(object.presentationIndex)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_ChordChart(): NetworkAPIV1_APIV1PresentationResponse_ChordChart {
  return { chordChart: new Uint8Array() };
}

export const NetworkAPIV1_APIV1PresentationResponse_ChordChart = {
  encode(
    message: NetworkAPIV1_APIV1PresentationResponse_ChordChart,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chordChart.length !== 0) {
      writer.uint32(10).bytes(message.chordChart);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_ChordChart {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_ChordChart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.chordChart = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationResponse_ChordChart {
    return { chordChart: isSet(object.chordChart) ? bytesFromBase64(object.chordChart) : new Uint8Array() };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationResponse_ChordChart): unknown {
    const obj: any = {};
    message.chordChart !== undefined &&
      (obj.chordChart = base64FromBytes(message.chordChart !== undefined ? message.chordChart : new Uint8Array()));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_ChordChart>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_ChordChart {
    return NetworkAPIV1_APIV1PresentationResponse_ChordChart.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_ChordChart>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationResponse_ChordChart {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_ChordChart();
    message.chordChart = object.chordChart ?? new Uint8Array();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates(): NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates {
  return {};
}

export const NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates = {
  encode(
    _: NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates {
    return NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_ChordChartUpdates();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_Presentation(): NetworkAPIV1_APIV1PresentationResponse_Presentation {
  return { presentation: undefined };
}

export const NetworkAPIV1_APIV1PresentationResponse_Presentation = {
  encode(
    message: NetworkAPIV1_APIV1PresentationResponse_Presentation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.presentation !== undefined) {
      APIV1Presentation.encode(message.presentation, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_Presentation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_Presentation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.presentation = APIV1Presentation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationResponse_Presentation {
    return { presentation: isSet(object.presentation) ? APIV1Presentation.fromJSON(object.presentation) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationResponse_Presentation): unknown {
    const obj: any = {};
    message.presentation !== undefined &&
      (obj.presentation = message.presentation ? APIV1Presentation.toJSON(message.presentation) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_Presentation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_Presentation {
    return NetworkAPIV1_APIV1PresentationResponse_Presentation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_Presentation>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationResponse_Presentation {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_Presentation();
    message.presentation = (object.presentation !== undefined && object.presentation !== null)
      ? APIV1Presentation.fromPartial(object.presentation)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_DeletePresentation(): NetworkAPIV1_APIV1PresentationResponse_DeletePresentation {
  return {};
}

export const NetworkAPIV1_APIV1PresentationResponse_DeletePresentation = {
  encode(
    _: NetworkAPIV1_APIV1PresentationResponse_DeletePresentation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_DeletePresentation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_DeletePresentation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationResponse_DeletePresentation {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationResponse_DeletePresentation): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_DeletePresentation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_DeletePresentation {
    return NetworkAPIV1_APIV1PresentationResponse_DeletePresentation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_DeletePresentation>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationResponse_DeletePresentation {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_DeletePresentation();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_TriggerPresentation(): NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation {
  return {};
}

export const NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation = {
  encode(
    _: NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_TriggerPresentation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation {
    return NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationResponse_TriggerPresentation {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_TriggerPresentation();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_TriggerCue(): NetworkAPIV1_APIV1PresentationResponse_TriggerCue {
  return {};
}

export const NetworkAPIV1_APIV1PresentationResponse_TriggerCue = {
  encode(_: NetworkAPIV1_APIV1PresentationResponse_TriggerCue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_TriggerCue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_TriggerCue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationResponse_TriggerCue {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationResponse_TriggerCue): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_TriggerCue>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_TriggerCue {
    return NetworkAPIV1_APIV1PresentationResponse_TriggerCue.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_TriggerCue>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationResponse_TriggerCue {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_TriggerCue();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_TimelineOperation(): NetworkAPIV1_APIV1PresentationResponse_TimelineOperation {
  return {};
}

export const NetworkAPIV1_APIV1PresentationResponse_TimelineOperation = {
  encode(
    _: NetworkAPIV1_APIV1PresentationResponse_TimelineOperation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_TimelineOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_TimelineOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationResponse_TimelineOperation {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationResponse_TimelineOperation): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_TimelineOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_TimelineOperation {
    return NetworkAPIV1_APIV1PresentationResponse_TimelineOperation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_TimelineOperation>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationResponse_TimelineOperation {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_TimelineOperation();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation(): NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation {
  return {};
}

export const NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation = {
  encode(
    _: NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation {
    return NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation.fromPartial(base ?? {});
  },

  fromPartial<
    I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation>, I>,
  >(_: I): NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineOperation();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation(): NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation {
  return {};
}

export const NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation = {
  encode(
    _: NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation {
    return NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation.fromPartial(base ?? {});
  },

  fromPartial<
    I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation>, I>,
  >(_: I): NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineOperation();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus(): NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus {
  return { isRunning: false, currentTime: 0 };
}

export const NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus = {
  encode(
    message: NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.isRunning === true) {
      writer.uint32(8).bool(message.isRunning);
    }
    if (message.currentTime !== 0) {
      writer.uint32(17).double(message.currentTime);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.isRunning = reader.bool();
          continue;
        case 2:
          if (tag != 17) {
            break;
          }

          message.currentTime = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus {
    return {
      isRunning: isSet(object.isRunning) ? Boolean(object.isRunning) : false,
      currentTime: isSet(object.currentTime) ? Number(object.currentTime) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus): unknown {
    const obj: any = {};
    message.isRunning !== undefined && (obj.isRunning = message.isRunning);
    message.currentTime !== undefined && (obj.currentTime = message.currentTime);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus {
    return NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_ActivePresentationTimelineStatus();
    message.isRunning = object.isRunning ?? false;
    message.currentTime = object.currentTime ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus(): NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus {
  return { isRunning: false, currentTime: 0 };
}

export const NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus = {
  encode(
    message: NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.isRunning === true) {
      writer.uint32(8).bool(message.isRunning);
    }
    if (message.currentTime !== 0) {
      writer.uint32(17).double(message.currentTime);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.isRunning = reader.bool();
          continue;
        case 2:
          if (tag != 17) {
            break;
          }

          message.currentTime = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus {
    return {
      isRunning: isSet(object.isRunning) ? Boolean(object.isRunning) : false,
      currentTime: isSet(object.currentTime) ? Number(object.currentTime) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus): unknown {
    const obj: any = {};
    message.isRunning !== undefined && (obj.isRunning = message.isRunning);
    message.currentTime !== undefined && (obj.currentTime = message.currentTime);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus {
    return NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus.fromPartial(base ?? {});
  },

  fromPartial<
    I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus>, I>,
  >(object: I): NetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_FocusedPresentationTimelineStatus();
    message.isRunning = object.isRunning ?? false;
    message.currentTime = object.currentTime ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_Thumbnail(): NetworkAPIV1_APIV1PresentationResponse_Thumbnail {
  return { data: new Uint8Array(), contentType: 0 };
}

export const NetworkAPIV1_APIV1PresentationResponse_Thumbnail = {
  encode(
    message: NetworkAPIV1_APIV1PresentationResponse_Thumbnail,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    if (message.contentType !== 0) {
      writer.uint32(16).int32(message.contentType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_Thumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_Thumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.contentType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationResponse_Thumbnail {
    return {
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(),
      contentType: isSet(object.contentType)
        ? networkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentTypeFromJSON(object.contentType)
        : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationResponse_Thumbnail): unknown {
    const obj: any = {};
    message.data !== undefined &&
      (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
    message.contentType !== undefined &&
      (obj.contentType = networkAPIV1_APIV1PresentationResponse_Thumbnail_APIV1ContentTypeToJSON(message.contentType));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_Thumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_Thumbnail {
    return NetworkAPIV1_APIV1PresentationResponse_Thumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_Thumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationResponse_Thumbnail {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_Thumbnail();
    message.data = object.data ?? new Uint8Array();
    message.contentType = object.contentType ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_Focused(): NetworkAPIV1_APIV1PresentationResponse_Focused {
  return { id: undefined };
}

export const NetworkAPIV1_APIV1PresentationResponse_Focused = {
  encode(
    message: NetworkAPIV1_APIV1PresentationResponse_Focused,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_Focused {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_Focused();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PresentationResponse_Focused {
    return { id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1PresentationResponse_Focused): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_Focused>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_Focused {
    return NetworkAPIV1_APIV1PresentationResponse_Focused.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_Focused>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PresentationResponse_Focused {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_Focused();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PresentationResponse_EmptyMessage(): NetworkAPIV1_APIV1PresentationResponse_EmptyMessage {
  return {};
}

export const NetworkAPIV1_APIV1PresentationResponse_EmptyMessage = {
  encode(_: NetworkAPIV1_APIV1PresentationResponse_EmptyMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PresentationResponse_EmptyMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_EmptyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PresentationResponse_EmptyMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PresentationResponse_EmptyMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_EmptyMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PresentationResponse_EmptyMessage {
    return NetworkAPIV1_APIV1PresentationResponse_EmptyMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PresentationResponse_EmptyMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PresentationResponse_EmptyMessage {
    const message = createBaseNetworkAPIV1_APIV1PresentationResponse_EmptyMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropResponse(): NetworkAPIV1_APIV1PropResponse {
  return {
    props: undefined,
    getProp: undefined,
    deleteProp: undefined,
    triggerProp: undefined,
    clearProp: undefined,
    getThumbnail: undefined,
  };
}

export const NetworkAPIV1_APIV1PropResponse = {
  encode(message: NetworkAPIV1_APIV1PropResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.props !== undefined) {
      NetworkAPIV1_APIV1PropResponse_Props.encode(message.props, writer.uint32(10).fork()).ldelim();
    }
    if (message.getProp !== undefined) {
      NetworkAPIV1_APIV1PropResponse_GetProp.encode(message.getProp, writer.uint32(18).fork()).ldelim();
    }
    if (message.deleteProp !== undefined) {
      NetworkAPIV1_APIV1PropResponse_DeleteProp.encode(message.deleteProp, writer.uint32(26).fork()).ldelim();
    }
    if (message.triggerProp !== undefined) {
      NetworkAPIV1_APIV1PropResponse_TriggerProp.encode(message.triggerProp, writer.uint32(34).fork()).ldelim();
    }
    if (message.clearProp !== undefined) {
      NetworkAPIV1_APIV1PropResponse_ClearProp.encode(message.clearProp, writer.uint32(42).fork()).ldelim();
    }
    if (message.getThumbnail !== undefined) {
      NetworkAPIV1_APIV1PropResponse_GetThumbnail.encode(message.getThumbnail, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.props = NetworkAPIV1_APIV1PropResponse_Props.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getProp = NetworkAPIV1_APIV1PropResponse_GetProp.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.deleteProp = NetworkAPIV1_APIV1PropResponse_DeleteProp.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.triggerProp = NetworkAPIV1_APIV1PropResponse_TriggerProp.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.clearProp = NetworkAPIV1_APIV1PropResponse_ClearProp.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getThumbnail = NetworkAPIV1_APIV1PropResponse_GetThumbnail.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PropResponse {
    return {
      props: isSet(object.props) ? NetworkAPIV1_APIV1PropResponse_Props.fromJSON(object.props) : undefined,
      getProp: isSet(object.getProp) ? NetworkAPIV1_APIV1PropResponse_GetProp.fromJSON(object.getProp) : undefined,
      deleteProp: isSet(object.deleteProp)
        ? NetworkAPIV1_APIV1PropResponse_DeleteProp.fromJSON(object.deleteProp)
        : undefined,
      triggerProp: isSet(object.triggerProp)
        ? NetworkAPIV1_APIV1PropResponse_TriggerProp.fromJSON(object.triggerProp)
        : undefined,
      clearProp: isSet(object.clearProp)
        ? NetworkAPIV1_APIV1PropResponse_ClearProp.fromJSON(object.clearProp)
        : undefined,
      getThumbnail: isSet(object.getThumbnail)
        ? NetworkAPIV1_APIV1PropResponse_GetThumbnail.fromJSON(object.getThumbnail)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1PropResponse): unknown {
    const obj: any = {};
    message.props !== undefined &&
      (obj.props = message.props ? NetworkAPIV1_APIV1PropResponse_Props.toJSON(message.props) : undefined);
    message.getProp !== undefined &&
      (obj.getProp = message.getProp ? NetworkAPIV1_APIV1PropResponse_GetProp.toJSON(message.getProp) : undefined);
    message.deleteProp !== undefined && (obj.deleteProp = message.deleteProp
      ? NetworkAPIV1_APIV1PropResponse_DeleteProp.toJSON(message.deleteProp)
      : undefined);
    message.triggerProp !== undefined && (obj.triggerProp = message.triggerProp
      ? NetworkAPIV1_APIV1PropResponse_TriggerProp.toJSON(message.triggerProp)
      : undefined);
    message.clearProp !== undefined && (obj.clearProp = message.clearProp
      ? NetworkAPIV1_APIV1PropResponse_ClearProp.toJSON(message.clearProp)
      : undefined);
    message.getThumbnail !== undefined && (obj.getThumbnail = message.getThumbnail
      ? NetworkAPIV1_APIV1PropResponse_GetThumbnail.toJSON(message.getThumbnail)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse>, I>>(base?: I): NetworkAPIV1_APIV1PropResponse {
    return NetworkAPIV1_APIV1PropResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PropResponse {
    const message = createBaseNetworkAPIV1_APIV1PropResponse();
    message.props = (object.props !== undefined && object.props !== null)
      ? NetworkAPIV1_APIV1PropResponse_Props.fromPartial(object.props)
      : undefined;
    message.getProp = (object.getProp !== undefined && object.getProp !== null)
      ? NetworkAPIV1_APIV1PropResponse_GetProp.fromPartial(object.getProp)
      : undefined;
    message.deleteProp = (object.deleteProp !== undefined && object.deleteProp !== null)
      ? NetworkAPIV1_APIV1PropResponse_DeleteProp.fromPartial(object.deleteProp)
      : undefined;
    message.triggerProp = (object.triggerProp !== undefined && object.triggerProp !== null)
      ? NetworkAPIV1_APIV1PropResponse_TriggerProp.fromPartial(object.triggerProp)
      : undefined;
    message.clearProp = (object.clearProp !== undefined && object.clearProp !== null)
      ? NetworkAPIV1_APIV1PropResponse_ClearProp.fromPartial(object.clearProp)
      : undefined;
    message.getThumbnail = (object.getThumbnail !== undefined && object.getThumbnail !== null)
      ? NetworkAPIV1_APIV1PropResponse_GetThumbnail.fromPartial(object.getThumbnail)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropResponse_Props(): NetworkAPIV1_APIV1PropResponse_Props {
  return { props: [] };
}

export const NetworkAPIV1_APIV1PropResponse_Props = {
  encode(message: NetworkAPIV1_APIV1PropResponse_Props, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.props) {
      APIV1PropData.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropResponse_Props {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropResponse_Props();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.props.push(APIV1PropData.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PropResponse_Props {
    return { props: Array.isArray(object?.props) ? object.props.map((e: any) => APIV1PropData.fromJSON(e)) : [] };
  },

  toJSON(message: NetworkAPIV1_APIV1PropResponse_Props): unknown {
    const obj: any = {};
    if (message.props) {
      obj.props = message.props.map((e) => e ? APIV1PropData.toJSON(e) : undefined);
    } else {
      obj.props = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_Props>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropResponse_Props {
    return NetworkAPIV1_APIV1PropResponse_Props.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_Props>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PropResponse_Props {
    const message = createBaseNetworkAPIV1_APIV1PropResponse_Props();
    message.props = object.props?.map((e) => APIV1PropData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropResponse_GetProp(): NetworkAPIV1_APIV1PropResponse_GetProp {
  return { prop: undefined };
}

export const NetworkAPIV1_APIV1PropResponse_GetProp = {
  encode(message: NetworkAPIV1_APIV1PropResponse_GetProp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.prop !== undefined) {
      APIV1PropData.encode(message.prop, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropResponse_GetProp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropResponse_GetProp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.prop = APIV1PropData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PropResponse_GetProp {
    return { prop: isSet(object.prop) ? APIV1PropData.fromJSON(object.prop) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1PropResponse_GetProp): unknown {
    const obj: any = {};
    message.prop !== undefined && (obj.prop = message.prop ? APIV1PropData.toJSON(message.prop) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_GetProp>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropResponse_GetProp {
    return NetworkAPIV1_APIV1PropResponse_GetProp.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_GetProp>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PropResponse_GetProp {
    const message = createBaseNetworkAPIV1_APIV1PropResponse_GetProp();
    message.prop = (object.prop !== undefined && object.prop !== null)
      ? APIV1PropData.fromPartial(object.prop)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropResponse_DeleteProp(): NetworkAPIV1_APIV1PropResponse_DeleteProp {
  return {};
}

export const NetworkAPIV1_APIV1PropResponse_DeleteProp = {
  encode(_: NetworkAPIV1_APIV1PropResponse_DeleteProp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropResponse_DeleteProp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropResponse_DeleteProp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PropResponse_DeleteProp {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PropResponse_DeleteProp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_DeleteProp>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropResponse_DeleteProp {
    return NetworkAPIV1_APIV1PropResponse_DeleteProp.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_DeleteProp>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PropResponse_DeleteProp {
    const message = createBaseNetworkAPIV1_APIV1PropResponse_DeleteProp();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropResponse_TriggerProp(): NetworkAPIV1_APIV1PropResponse_TriggerProp {
  return {};
}

export const NetworkAPIV1_APIV1PropResponse_TriggerProp = {
  encode(_: NetworkAPIV1_APIV1PropResponse_TriggerProp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropResponse_TriggerProp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropResponse_TriggerProp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PropResponse_TriggerProp {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PropResponse_TriggerProp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_TriggerProp>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropResponse_TriggerProp {
    return NetworkAPIV1_APIV1PropResponse_TriggerProp.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_TriggerProp>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PropResponse_TriggerProp {
    const message = createBaseNetworkAPIV1_APIV1PropResponse_TriggerProp();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropResponse_ClearProp(): NetworkAPIV1_APIV1PropResponse_ClearProp {
  return {};
}

export const NetworkAPIV1_APIV1PropResponse_ClearProp = {
  encode(_: NetworkAPIV1_APIV1PropResponse_ClearProp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropResponse_ClearProp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropResponse_ClearProp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1PropResponse_ClearProp {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1PropResponse_ClearProp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_ClearProp>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropResponse_ClearProp {
    return NetworkAPIV1_APIV1PropResponse_ClearProp.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_ClearProp>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1PropResponse_ClearProp {
    const message = createBaseNetworkAPIV1_APIV1PropResponse_ClearProp();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1PropResponse_GetThumbnail(): NetworkAPIV1_APIV1PropResponse_GetThumbnail {
  return { data: new Uint8Array() };
}

export const NetworkAPIV1_APIV1PropResponse_GetThumbnail = {
  encode(message: NetworkAPIV1_APIV1PropResponse_GetThumbnail, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1PropResponse_GetThumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1PropResponse_GetThumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1PropResponse_GetThumbnail {
    return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array() };
  },

  toJSON(message: NetworkAPIV1_APIV1PropResponse_GetThumbnail): unknown {
    const obj: any = {};
    message.data !== undefined &&
      (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_GetThumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1PropResponse_GetThumbnail {
    return NetworkAPIV1_APIV1PropResponse_GetThumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1PropResponse_GetThumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1PropResponse_GetThumbnail {
    const message = createBaseNetworkAPIV1_APIV1PropResponse_GetThumbnail();
    message.data = object.data ?? new Uint8Array();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse(): NetworkAPIV1_APIV1StageResponse {
  return {
    getLayoutMap: undefined,
    setLayoutMap: undefined,
    getMessage: undefined,
    putMessage: undefined,
    deleteMessage: undefined,
    getScreens: undefined,
    getScreenLayout: undefined,
    setScreenLayout: undefined,
    getLayouts: undefined,
    deleteLayout: undefined,
    getLayoutThumbnail: undefined,
  };
}

export const NetworkAPIV1_APIV1StageResponse = {
  encode(message: NetworkAPIV1_APIV1StageResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.getLayoutMap !== undefined) {
      NetworkAPIV1_APIV1StageResponse_GetLayoutMap.encode(message.getLayoutMap, writer.uint32(10).fork()).ldelim();
    }
    if (message.setLayoutMap !== undefined) {
      NetworkAPIV1_APIV1StageResponse_SetLayoutMap.encode(message.setLayoutMap, writer.uint32(18).fork()).ldelim();
    }
    if (message.getMessage !== undefined) {
      NetworkAPIV1_APIV1StageResponse_GetMessage.encode(message.getMessage, writer.uint32(26).fork()).ldelim();
    }
    if (message.putMessage !== undefined) {
      NetworkAPIV1_APIV1StageResponse_PutMessage.encode(message.putMessage, writer.uint32(34).fork()).ldelim();
    }
    if (message.deleteMessage !== undefined) {
      NetworkAPIV1_APIV1StageResponse_DeleteMessage.encode(message.deleteMessage, writer.uint32(42).fork()).ldelim();
    }
    if (message.getScreens !== undefined) {
      NetworkAPIV1_APIV1StageResponse_GetScreens.encode(message.getScreens, writer.uint32(50).fork()).ldelim();
    }
    if (message.getScreenLayout !== undefined) {
      NetworkAPIV1_APIV1StageResponse_GetScreenLayout.encode(message.getScreenLayout, writer.uint32(58).fork())
        .ldelim();
    }
    if (message.setScreenLayout !== undefined) {
      NetworkAPIV1_APIV1StageResponse_SetScreenLayout.encode(message.setScreenLayout, writer.uint32(66).fork())
        .ldelim();
    }
    if (message.getLayouts !== undefined) {
      NetworkAPIV1_APIV1StageResponse_GetLayouts.encode(message.getLayouts, writer.uint32(74).fork()).ldelim();
    }
    if (message.deleteLayout !== undefined) {
      NetworkAPIV1_APIV1StageResponse_DeleteLayout.encode(message.deleteLayout, writer.uint32(82).fork()).ldelim();
    }
    if (message.getLayoutThumbnail !== undefined) {
      NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail.encode(message.getLayoutThumbnail, writer.uint32(90).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.getLayoutMap = NetworkAPIV1_APIV1StageResponse_GetLayoutMap.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.setLayoutMap = NetworkAPIV1_APIV1StageResponse_SetLayoutMap.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.getMessage = NetworkAPIV1_APIV1StageResponse_GetMessage.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.putMessage = NetworkAPIV1_APIV1StageResponse_PutMessage.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.deleteMessage = NetworkAPIV1_APIV1StageResponse_DeleteMessage.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getScreens = NetworkAPIV1_APIV1StageResponse_GetScreens.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.getScreenLayout = NetworkAPIV1_APIV1StageResponse_GetScreenLayout.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.setScreenLayout = NetworkAPIV1_APIV1StageResponse_SetScreenLayout.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.getLayouts = NetworkAPIV1_APIV1StageResponse_GetLayouts.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.deleteLayout = NetworkAPIV1_APIV1StageResponse_DeleteLayout.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.getLayoutThumbnail = NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageResponse {
    return {
      getLayoutMap: isSet(object.getLayoutMap)
        ? NetworkAPIV1_APIV1StageResponse_GetLayoutMap.fromJSON(object.getLayoutMap)
        : undefined,
      setLayoutMap: isSet(object.setLayoutMap)
        ? NetworkAPIV1_APIV1StageResponse_SetLayoutMap.fromJSON(object.setLayoutMap)
        : undefined,
      getMessage: isSet(object.getMessage)
        ? NetworkAPIV1_APIV1StageResponse_GetMessage.fromJSON(object.getMessage)
        : undefined,
      putMessage: isSet(object.putMessage)
        ? NetworkAPIV1_APIV1StageResponse_PutMessage.fromJSON(object.putMessage)
        : undefined,
      deleteMessage: isSet(object.deleteMessage)
        ? NetworkAPIV1_APIV1StageResponse_DeleteMessage.fromJSON(object.deleteMessage)
        : undefined,
      getScreens: isSet(object.getScreens)
        ? NetworkAPIV1_APIV1StageResponse_GetScreens.fromJSON(object.getScreens)
        : undefined,
      getScreenLayout: isSet(object.getScreenLayout)
        ? NetworkAPIV1_APIV1StageResponse_GetScreenLayout.fromJSON(object.getScreenLayout)
        : undefined,
      setScreenLayout: isSet(object.setScreenLayout)
        ? NetworkAPIV1_APIV1StageResponse_SetScreenLayout.fromJSON(object.setScreenLayout)
        : undefined,
      getLayouts: isSet(object.getLayouts)
        ? NetworkAPIV1_APIV1StageResponse_GetLayouts.fromJSON(object.getLayouts)
        : undefined,
      deleteLayout: isSet(object.deleteLayout)
        ? NetworkAPIV1_APIV1StageResponse_DeleteLayout.fromJSON(object.deleteLayout)
        : undefined,
      getLayoutThumbnail: isSet(object.getLayoutThumbnail)
        ? NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail.fromJSON(object.getLayoutThumbnail)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1StageResponse): unknown {
    const obj: any = {};
    message.getLayoutMap !== undefined && (obj.getLayoutMap = message.getLayoutMap
      ? NetworkAPIV1_APIV1StageResponse_GetLayoutMap.toJSON(message.getLayoutMap)
      : undefined);
    message.setLayoutMap !== undefined && (obj.setLayoutMap = message.setLayoutMap
      ? NetworkAPIV1_APIV1StageResponse_SetLayoutMap.toJSON(message.setLayoutMap)
      : undefined);
    message.getMessage !== undefined && (obj.getMessage = message.getMessage
      ? NetworkAPIV1_APIV1StageResponse_GetMessage.toJSON(message.getMessage)
      : undefined);
    message.putMessage !== undefined && (obj.putMessage = message.putMessage
      ? NetworkAPIV1_APIV1StageResponse_PutMessage.toJSON(message.putMessage)
      : undefined);
    message.deleteMessage !== undefined && (obj.deleteMessage = message.deleteMessage
      ? NetworkAPIV1_APIV1StageResponse_DeleteMessage.toJSON(message.deleteMessage)
      : undefined);
    message.getScreens !== undefined && (obj.getScreens = message.getScreens
      ? NetworkAPIV1_APIV1StageResponse_GetScreens.toJSON(message.getScreens)
      : undefined);
    message.getScreenLayout !== undefined && (obj.getScreenLayout = message.getScreenLayout
      ? NetworkAPIV1_APIV1StageResponse_GetScreenLayout.toJSON(message.getScreenLayout)
      : undefined);
    message.setScreenLayout !== undefined && (obj.setScreenLayout = message.setScreenLayout
      ? NetworkAPIV1_APIV1StageResponse_SetScreenLayout.toJSON(message.setScreenLayout)
      : undefined);
    message.getLayouts !== undefined && (obj.getLayouts = message.getLayouts
      ? NetworkAPIV1_APIV1StageResponse_GetLayouts.toJSON(message.getLayouts)
      : undefined);
    message.deleteLayout !== undefined && (obj.deleteLayout = message.deleteLayout
      ? NetworkAPIV1_APIV1StageResponse_DeleteLayout.toJSON(message.deleteLayout)
      : undefined);
    message.getLayoutThumbnail !== undefined && (obj.getLayoutThumbnail = message.getLayoutThumbnail
      ? NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail.toJSON(message.getLayoutThumbnail)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse>, I>>(base?: I): NetworkAPIV1_APIV1StageResponse {
    return NetworkAPIV1_APIV1StageResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageResponse {
    const message = createBaseNetworkAPIV1_APIV1StageResponse();
    message.getLayoutMap = (object.getLayoutMap !== undefined && object.getLayoutMap !== null)
      ? NetworkAPIV1_APIV1StageResponse_GetLayoutMap.fromPartial(object.getLayoutMap)
      : undefined;
    message.setLayoutMap = (object.setLayoutMap !== undefined && object.setLayoutMap !== null)
      ? NetworkAPIV1_APIV1StageResponse_SetLayoutMap.fromPartial(object.setLayoutMap)
      : undefined;
    message.getMessage = (object.getMessage !== undefined && object.getMessage !== null)
      ? NetworkAPIV1_APIV1StageResponse_GetMessage.fromPartial(object.getMessage)
      : undefined;
    message.putMessage = (object.putMessage !== undefined && object.putMessage !== null)
      ? NetworkAPIV1_APIV1StageResponse_PutMessage.fromPartial(object.putMessage)
      : undefined;
    message.deleteMessage = (object.deleteMessage !== undefined && object.deleteMessage !== null)
      ? NetworkAPIV1_APIV1StageResponse_DeleteMessage.fromPartial(object.deleteMessage)
      : undefined;
    message.getScreens = (object.getScreens !== undefined && object.getScreens !== null)
      ? NetworkAPIV1_APIV1StageResponse_GetScreens.fromPartial(object.getScreens)
      : undefined;
    message.getScreenLayout = (object.getScreenLayout !== undefined && object.getScreenLayout !== null)
      ? NetworkAPIV1_APIV1StageResponse_GetScreenLayout.fromPartial(object.getScreenLayout)
      : undefined;
    message.setScreenLayout = (object.setScreenLayout !== undefined && object.setScreenLayout !== null)
      ? NetworkAPIV1_APIV1StageResponse_SetScreenLayout.fromPartial(object.setScreenLayout)
      : undefined;
    message.getLayouts = (object.getLayouts !== undefined && object.getLayouts !== null)
      ? NetworkAPIV1_APIV1StageResponse_GetLayouts.fromPartial(object.getLayouts)
      : undefined;
    message.deleteLayout = (object.deleteLayout !== undefined && object.deleteLayout !== null)
      ? NetworkAPIV1_APIV1StageResponse_DeleteLayout.fromPartial(object.deleteLayout)
      : undefined;
    message.getLayoutThumbnail = (object.getLayoutThumbnail !== undefined && object.getLayoutThumbnail !== null)
      ? NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail.fromPartial(object.getLayoutThumbnail)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_GetLayoutMap(): NetworkAPIV1_APIV1StageResponse_GetLayoutMap {
  return { map: undefined };
}

export const NetworkAPIV1_APIV1StageResponse_GetLayoutMap = {
  encode(message: NetworkAPIV1_APIV1StageResponse_GetLayoutMap, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.map !== undefined) {
      APIV1StageLayoutMap.encode(message.map, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_GetLayoutMap {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetLayoutMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.map = APIV1StageLayoutMap.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageResponse_GetLayoutMap {
    return { map: isSet(object.map) ? APIV1StageLayoutMap.fromJSON(object.map) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1StageResponse_GetLayoutMap): unknown {
    const obj: any = {};
    message.map !== undefined && (obj.map = message.map ? APIV1StageLayoutMap.toJSON(message.map) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetLayoutMap>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_GetLayoutMap {
    return NetworkAPIV1_APIV1StageResponse_GetLayoutMap.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetLayoutMap>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageResponse_GetLayoutMap {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetLayoutMap();
    message.map = (object.map !== undefined && object.map !== null)
      ? APIV1StageLayoutMap.fromPartial(object.map)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_SetLayoutMap(): NetworkAPIV1_APIV1StageResponse_SetLayoutMap {
  return {};
}

export const NetworkAPIV1_APIV1StageResponse_SetLayoutMap = {
  encode(_: NetworkAPIV1_APIV1StageResponse_SetLayoutMap, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_SetLayoutMap {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_SetLayoutMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StageResponse_SetLayoutMap {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StageResponse_SetLayoutMap): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_SetLayoutMap>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_SetLayoutMap {
    return NetworkAPIV1_APIV1StageResponse_SetLayoutMap.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_SetLayoutMap>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StageResponse_SetLayoutMap {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_SetLayoutMap();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_GetMessage(): NetworkAPIV1_APIV1StageResponse_GetMessage {
  return { message: "" };
}

export const NetworkAPIV1_APIV1StageResponse_GetMessage = {
  encode(message: NetworkAPIV1_APIV1StageResponse_GetMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_GetMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageResponse_GetMessage {
    return { message: isSet(object.message) ? String(object.message) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1StageResponse_GetMessage): unknown {
    const obj: any = {};
    message.message !== undefined && (obj.message = message.message);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_GetMessage {
    return NetworkAPIV1_APIV1StageResponse_GetMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetMessage>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageResponse_GetMessage {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetMessage();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_PutMessage(): NetworkAPIV1_APIV1StageResponse_PutMessage {
  return {};
}

export const NetworkAPIV1_APIV1StageResponse_PutMessage = {
  encode(_: NetworkAPIV1_APIV1StageResponse_PutMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_PutMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_PutMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StageResponse_PutMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StageResponse_PutMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_PutMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_PutMessage {
    return NetworkAPIV1_APIV1StageResponse_PutMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_PutMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StageResponse_PutMessage {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_PutMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_DeleteMessage(): NetworkAPIV1_APIV1StageResponse_DeleteMessage {
  return {};
}

export const NetworkAPIV1_APIV1StageResponse_DeleteMessage = {
  encode(_: NetworkAPIV1_APIV1StageResponse_DeleteMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_DeleteMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_DeleteMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StageResponse_DeleteMessage {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StageResponse_DeleteMessage): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_DeleteMessage>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_DeleteMessage {
    return NetworkAPIV1_APIV1StageResponse_DeleteMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_DeleteMessage>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StageResponse_DeleteMessage {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_DeleteMessage();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_GetScreens(): NetworkAPIV1_APIV1StageResponse_GetScreens {
  return { screens: [] };
}

export const NetworkAPIV1_APIV1StageResponse_GetScreens = {
  encode(message: NetworkAPIV1_APIV1StageResponse_GetScreens, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.screens) {
      APIV1Identifier.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_GetScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.screens.push(APIV1Identifier.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageResponse_GetScreens {
    return {
      screens: Array.isArray(object?.screens) ? object.screens.map((e: any) => APIV1Identifier.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1StageResponse_GetScreens): unknown {
    const obj: any = {};
    if (message.screens) {
      obj.screens = message.screens.map((e) => e ? APIV1Identifier.toJSON(e) : undefined);
    } else {
      obj.screens = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_GetScreens {
    return NetworkAPIV1_APIV1StageResponse_GetScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetScreens>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageResponse_GetScreens {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetScreens();
    message.screens = object.screens?.map((e) => APIV1Identifier.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_GetScreenLayout(): NetworkAPIV1_APIV1StageResponse_GetScreenLayout {
  return { id: undefined };
}

export const NetworkAPIV1_APIV1StageResponse_GetScreenLayout = {
  encode(
    message: NetworkAPIV1_APIV1StageResponse_GetScreenLayout,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_GetScreenLayout {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetScreenLayout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageResponse_GetScreenLayout {
    return { id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1StageResponse_GetScreenLayout): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetScreenLayout>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_GetScreenLayout {
    return NetworkAPIV1_APIV1StageResponse_GetScreenLayout.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetScreenLayout>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageResponse_GetScreenLayout {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetScreenLayout();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_SetScreenLayout(): NetworkAPIV1_APIV1StageResponse_SetScreenLayout {
  return {};
}

export const NetworkAPIV1_APIV1StageResponse_SetScreenLayout = {
  encode(_: NetworkAPIV1_APIV1StageResponse_SetScreenLayout, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_SetScreenLayout {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_SetScreenLayout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StageResponse_SetScreenLayout {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StageResponse_SetScreenLayout): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_SetScreenLayout>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_SetScreenLayout {
    return NetworkAPIV1_APIV1StageResponse_SetScreenLayout.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_SetScreenLayout>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StageResponse_SetScreenLayout {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_SetScreenLayout();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_GetLayouts(): NetworkAPIV1_APIV1StageResponse_GetLayouts {
  return { layouts: [] };
}

export const NetworkAPIV1_APIV1StageResponse_GetLayouts = {
  encode(message: NetworkAPIV1_APIV1StageResponse_GetLayouts, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.layouts) {
      NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_GetLayouts {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetLayouts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.layouts.push(NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageResponse_GetLayouts {
    return {
      layouts: Array.isArray(object?.layouts)
        ? object.layouts.map((e: any) => NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout.fromJSON(e))
        : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1StageResponse_GetLayouts): unknown {
    const obj: any = {};
    if (message.layouts) {
      obj.layouts = message.layouts.map((e) =>
        e ? NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout.toJSON(e) : undefined
      );
    } else {
      obj.layouts = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetLayouts>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_GetLayouts {
    return NetworkAPIV1_APIV1StageResponse_GetLayouts.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetLayouts>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageResponse_GetLayouts {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetLayouts();
    message.layouts = object.layouts?.map((e) => NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_GetLayouts_Layout(): NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout {
  return { id: undefined };
}

export const NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout = {
  encode(
    message: NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== undefined) {
      APIV1Identifier.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetLayouts_Layout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = APIV1Identifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout {
    return { id: isSet(object.id) ? APIV1Identifier.fromJSON(object.id) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? APIV1Identifier.toJSON(message.id) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout {
    return NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageResponse_GetLayouts_Layout {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetLayouts_Layout();
    message.id = (object.id !== undefined && object.id !== null) ? APIV1Identifier.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_DeleteLayout(): NetworkAPIV1_APIV1StageResponse_DeleteLayout {
  return {};
}

export const NetworkAPIV1_APIV1StageResponse_DeleteLayout = {
  encode(_: NetworkAPIV1_APIV1StageResponse_DeleteLayout, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_DeleteLayout {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_DeleteLayout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StageResponse_DeleteLayout {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StageResponse_DeleteLayout): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_DeleteLayout>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_DeleteLayout {
    return NetworkAPIV1_APIV1StageResponse_DeleteLayout.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_DeleteLayout>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StageResponse_DeleteLayout {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_DeleteLayout();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail(): NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail {
  return { data: new Uint8Array() };
}

export const NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail = {
  encode(
    message: NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail {
    return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array() };
  },

  toJSON(message: NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail): unknown {
    const obj: any = {};
    message.data !== undefined &&
      (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail {
    return NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail {
    const message = createBaseNetworkAPIV1_APIV1StageResponse_GetLayoutThumbnail();
    message.data = object.data ?? new Uint8Array();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusResponse(): NetworkAPIV1_APIV1StatusResponse {
  return {
    getLayers: undefined,
    getStageScreens: undefined,
    putStageScreens: undefined,
    getAudienceScreens: undefined,
    putAudienceScreens: undefined,
    getScreens: undefined,
    getSlide: undefined,
  };
}

export const NetworkAPIV1_APIV1StatusResponse = {
  encode(message: NetworkAPIV1_APIV1StatusResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.getLayers !== undefined) {
      NetworkAPIV1_APIV1StatusResponse_GetLayers.encode(message.getLayers, writer.uint32(10).fork()).ldelim();
    }
    if (message.getStageScreens !== undefined) {
      NetworkAPIV1_APIV1StatusResponse_GetStageScreens.encode(message.getStageScreens, writer.uint32(18).fork())
        .ldelim();
    }
    if (message.putStageScreens !== undefined) {
      NetworkAPIV1_APIV1StatusResponse_PutStageScreens.encode(message.putStageScreens, writer.uint32(26).fork())
        .ldelim();
    }
    if (message.getAudienceScreens !== undefined) {
      NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens.encode(message.getAudienceScreens, writer.uint32(34).fork())
        .ldelim();
    }
    if (message.putAudienceScreens !== undefined) {
      NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens.encode(message.putAudienceScreens, writer.uint32(42).fork())
        .ldelim();
    }
    if (message.getScreens !== undefined) {
      NetworkAPIV1_APIV1StatusResponse_GetScreens.encode(message.getScreens, writer.uint32(50).fork()).ldelim();
    }
    if (message.getSlide !== undefined) {
      NetworkAPIV1_APIV1StatusResponse_GetSlide.encode(message.getSlide, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.getLayers = NetworkAPIV1_APIV1StatusResponse_GetLayers.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getStageScreens = NetworkAPIV1_APIV1StatusResponse_GetStageScreens.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.putStageScreens = NetworkAPIV1_APIV1StatusResponse_PutStageScreens.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.getAudienceScreens = NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.putAudienceScreens = NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getScreens = NetworkAPIV1_APIV1StatusResponse_GetScreens.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.getSlide = NetworkAPIV1_APIV1StatusResponse_GetSlide.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StatusResponse {
    return {
      getLayers: isSet(object.getLayers)
        ? NetworkAPIV1_APIV1StatusResponse_GetLayers.fromJSON(object.getLayers)
        : undefined,
      getStageScreens: isSet(object.getStageScreens)
        ? NetworkAPIV1_APIV1StatusResponse_GetStageScreens.fromJSON(object.getStageScreens)
        : undefined,
      putStageScreens: isSet(object.putStageScreens)
        ? NetworkAPIV1_APIV1StatusResponse_PutStageScreens.fromJSON(object.putStageScreens)
        : undefined,
      getAudienceScreens: isSet(object.getAudienceScreens)
        ? NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens.fromJSON(object.getAudienceScreens)
        : undefined,
      putAudienceScreens: isSet(object.putAudienceScreens)
        ? NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens.fromJSON(object.putAudienceScreens)
        : undefined,
      getScreens: isSet(object.getScreens)
        ? NetworkAPIV1_APIV1StatusResponse_GetScreens.fromJSON(object.getScreens)
        : undefined,
      getSlide: isSet(object.getSlide)
        ? NetworkAPIV1_APIV1StatusResponse_GetSlide.fromJSON(object.getSlide)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1StatusResponse): unknown {
    const obj: any = {};
    message.getLayers !== undefined && (obj.getLayers = message.getLayers
      ? NetworkAPIV1_APIV1StatusResponse_GetLayers.toJSON(message.getLayers)
      : undefined);
    message.getStageScreens !== undefined && (obj.getStageScreens = message.getStageScreens
      ? NetworkAPIV1_APIV1StatusResponse_GetStageScreens.toJSON(message.getStageScreens)
      : undefined);
    message.putStageScreens !== undefined && (obj.putStageScreens = message.putStageScreens
      ? NetworkAPIV1_APIV1StatusResponse_PutStageScreens.toJSON(message.putStageScreens)
      : undefined);
    message.getAudienceScreens !== undefined && (obj.getAudienceScreens = message.getAudienceScreens
      ? NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens.toJSON(message.getAudienceScreens)
      : undefined);
    message.putAudienceScreens !== undefined && (obj.putAudienceScreens = message.putAudienceScreens
      ? NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens.toJSON(message.putAudienceScreens)
      : undefined);
    message.getScreens !== undefined && (obj.getScreens = message.getScreens
      ? NetworkAPIV1_APIV1StatusResponse_GetScreens.toJSON(message.getScreens)
      : undefined);
    message.getSlide !== undefined &&
      (obj.getSlide = message.getSlide
        ? NetworkAPIV1_APIV1StatusResponse_GetSlide.toJSON(message.getSlide)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusResponse {
    return NetworkAPIV1_APIV1StatusResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StatusResponse {
    const message = createBaseNetworkAPIV1_APIV1StatusResponse();
    message.getLayers = (object.getLayers !== undefined && object.getLayers !== null)
      ? NetworkAPIV1_APIV1StatusResponse_GetLayers.fromPartial(object.getLayers)
      : undefined;
    message.getStageScreens = (object.getStageScreens !== undefined && object.getStageScreens !== null)
      ? NetworkAPIV1_APIV1StatusResponse_GetStageScreens.fromPartial(object.getStageScreens)
      : undefined;
    message.putStageScreens = (object.putStageScreens !== undefined && object.putStageScreens !== null)
      ? NetworkAPIV1_APIV1StatusResponse_PutStageScreens.fromPartial(object.putStageScreens)
      : undefined;
    message.getAudienceScreens = (object.getAudienceScreens !== undefined && object.getAudienceScreens !== null)
      ? NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens.fromPartial(object.getAudienceScreens)
      : undefined;
    message.putAudienceScreens = (object.putAudienceScreens !== undefined && object.putAudienceScreens !== null)
      ? NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens.fromPartial(object.putAudienceScreens)
      : undefined;
    message.getScreens = (object.getScreens !== undefined && object.getScreens !== null)
      ? NetworkAPIV1_APIV1StatusResponse_GetScreens.fromPartial(object.getScreens)
      : undefined;
    message.getSlide = (object.getSlide !== undefined && object.getSlide !== null)
      ? NetworkAPIV1_APIV1StatusResponse_GetSlide.fromPartial(object.getSlide)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusResponse_GetLayers(): NetworkAPIV1_APIV1StatusResponse_GetLayers {
  return {
    videoInput: false,
    media: false,
    slide: false,
    announcements: false,
    props: false,
    messages: false,
    audio: false,
  };
}

export const NetworkAPIV1_APIV1StatusResponse_GetLayers = {
  encode(message: NetworkAPIV1_APIV1StatusResponse_GetLayers, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.videoInput === true) {
      writer.uint32(8).bool(message.videoInput);
    }
    if (message.media === true) {
      writer.uint32(16).bool(message.media);
    }
    if (message.slide === true) {
      writer.uint32(24).bool(message.slide);
    }
    if (message.announcements === true) {
      writer.uint32(32).bool(message.announcements);
    }
    if (message.props === true) {
      writer.uint32(40).bool(message.props);
    }
    if (message.messages === true) {
      writer.uint32(48).bool(message.messages);
    }
    if (message.audio === true) {
      writer.uint32(56).bool(message.audio);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusResponse_GetLayers {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_GetLayers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.videoInput = reader.bool();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.media = reader.bool();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.slide = reader.bool();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.announcements = reader.bool();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.props = reader.bool();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }

          message.messages = reader.bool();
          continue;
        case 7:
          if (tag != 56) {
            break;
          }

          message.audio = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StatusResponse_GetLayers {
    return {
      videoInput: isSet(object.videoInput) ? Boolean(object.videoInput) : false,
      media: isSet(object.media) ? Boolean(object.media) : false,
      slide: isSet(object.slide) ? Boolean(object.slide) : false,
      announcements: isSet(object.announcements) ? Boolean(object.announcements) : false,
      props: isSet(object.props) ? Boolean(object.props) : false,
      messages: isSet(object.messages) ? Boolean(object.messages) : false,
      audio: isSet(object.audio) ? Boolean(object.audio) : false,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1StatusResponse_GetLayers): unknown {
    const obj: any = {};
    message.videoInput !== undefined && (obj.videoInput = message.videoInput);
    message.media !== undefined && (obj.media = message.media);
    message.slide !== undefined && (obj.slide = message.slide);
    message.announcements !== undefined && (obj.announcements = message.announcements);
    message.props !== undefined && (obj.props = message.props);
    message.messages !== undefined && (obj.messages = message.messages);
    message.audio !== undefined && (obj.audio = message.audio);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_GetLayers>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusResponse_GetLayers {
    return NetworkAPIV1_APIV1StatusResponse_GetLayers.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_GetLayers>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StatusResponse_GetLayers {
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_GetLayers();
    message.videoInput = object.videoInput ?? false;
    message.media = object.media ?? false;
    message.slide = object.slide ?? false;
    message.announcements = object.announcements ?? false;
    message.props = object.props ?? false;
    message.messages = object.messages ?? false;
    message.audio = object.audio ?? false;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusResponse_GetStageScreens(): NetworkAPIV1_APIV1StatusResponse_GetStageScreens {
  return { enabled: false };
}

export const NetworkAPIV1_APIV1StatusResponse_GetStageScreens = {
  encode(
    message: NetworkAPIV1_APIV1StatusResponse_GetStageScreens,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.enabled === true) {
      writer.uint32(8).bool(message.enabled);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusResponse_GetStageScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_GetStageScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StatusResponse_GetStageScreens {
    return { enabled: isSet(object.enabled) ? Boolean(object.enabled) : false };
  },

  toJSON(message: NetworkAPIV1_APIV1StatusResponse_GetStageScreens): unknown {
    const obj: any = {};
    message.enabled !== undefined && (obj.enabled = message.enabled);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_GetStageScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusResponse_GetStageScreens {
    return NetworkAPIV1_APIV1StatusResponse_GetStageScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_GetStageScreens>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StatusResponse_GetStageScreens {
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_GetStageScreens();
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusResponse_PutStageScreens(): NetworkAPIV1_APIV1StatusResponse_PutStageScreens {
  return {};
}

export const NetworkAPIV1_APIV1StatusResponse_PutStageScreens = {
  encode(_: NetworkAPIV1_APIV1StatusResponse_PutStageScreens, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusResponse_PutStageScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_PutStageScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StatusResponse_PutStageScreens {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StatusResponse_PutStageScreens): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_PutStageScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusResponse_PutStageScreens {
    return NetworkAPIV1_APIV1StatusResponse_PutStageScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_PutStageScreens>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StatusResponse_PutStageScreens {
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_PutStageScreens();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusResponse_GetAudienceScreens(): NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens {
  return { enabled: false };
}

export const NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens = {
  encode(
    message: NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.enabled === true) {
      writer.uint32(8).bool(message.enabled);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_GetAudienceScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens {
    return { enabled: isSet(object.enabled) ? Boolean(object.enabled) : false };
  },

  toJSON(message: NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens): unknown {
    const obj: any = {};
    message.enabled !== undefined && (obj.enabled = message.enabled);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens {
    return NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StatusResponse_GetAudienceScreens {
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_GetAudienceScreens();
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusResponse_PutAudienceScreens(): NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens {
  return {};
}

export const NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens = {
  encode(_: NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_PutAudienceScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens {
    return NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1StatusResponse_PutAudienceScreens {
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_PutAudienceScreens();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusResponse_GetScreens(): NetworkAPIV1_APIV1StatusResponse_GetScreens {
  return { screens: [] };
}

export const NetworkAPIV1_APIV1StatusResponse_GetScreens = {
  encode(message: NetworkAPIV1_APIV1StatusResponse_GetScreens, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.screens) {
      APIV1ScreenConfig.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusResponse_GetScreens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_GetScreens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.screens.push(APIV1ScreenConfig.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StatusResponse_GetScreens {
    return {
      screens: Array.isArray(object?.screens) ? object.screens.map((e: any) => APIV1ScreenConfig.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1StatusResponse_GetScreens): unknown {
    const obj: any = {};
    if (message.screens) {
      obj.screens = message.screens.map((e) => e ? APIV1ScreenConfig.toJSON(e) : undefined);
    } else {
      obj.screens = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_GetScreens>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusResponse_GetScreens {
    return NetworkAPIV1_APIV1StatusResponse_GetScreens.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_GetScreens>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StatusResponse_GetScreens {
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_GetScreens();
    message.screens = object.screens?.map((e) => APIV1ScreenConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1StatusResponse_GetSlide(): NetworkAPIV1_APIV1StatusResponse_GetSlide {
  return { current: undefined, next: undefined };
}

export const NetworkAPIV1_APIV1StatusResponse_GetSlide = {
  encode(message: NetworkAPIV1_APIV1StatusResponse_GetSlide, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.current !== undefined) {
      APIV1SlideDisplayDetails.encode(message.current, writer.uint32(10).fork()).ldelim();
    }
    if (message.next !== undefined) {
      APIV1SlideDisplayDetails.encode(message.next, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1StatusResponse_GetSlide {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_GetSlide();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.current = APIV1SlideDisplayDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.next = APIV1SlideDisplayDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1StatusResponse_GetSlide {
    return {
      current: isSet(object.current) ? APIV1SlideDisplayDetails.fromJSON(object.current) : undefined,
      next: isSet(object.next) ? APIV1SlideDisplayDetails.fromJSON(object.next) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1StatusResponse_GetSlide): unknown {
    const obj: any = {};
    message.current !== undefined &&
      (obj.current = message.current ? APIV1SlideDisplayDetails.toJSON(message.current) : undefined);
    message.next !== undefined && (obj.next = message.next ? APIV1SlideDisplayDetails.toJSON(message.next) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_GetSlide>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1StatusResponse_GetSlide {
    return NetworkAPIV1_APIV1StatusResponse_GetSlide.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1StatusResponse_GetSlide>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1StatusResponse_GetSlide {
    const message = createBaseNetworkAPIV1_APIV1StatusResponse_GetSlide();
    message.current = (object.current !== undefined && object.current !== null)
      ? APIV1SlideDisplayDetails.fromPartial(object.current)
      : undefined;
    message.next = (object.next !== undefined && object.next !== null)
      ? APIV1SlideDisplayDetails.fromPartial(object.next)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeResponse(): NetworkAPIV1_APIV1ThemeResponse {
  return {
    getAll: undefined,
    getTheme: undefined,
    deleteTheme: undefined,
    getThemeName: undefined,
    putThemeName: undefined,
    getThemeSlide: undefined,
    putThemeSlide: undefined,
    deleteThemeSlide: undefined,
    getThemeSlideThumbnail: undefined,
  };
}

export const NetworkAPIV1_APIV1ThemeResponse = {
  encode(message: NetworkAPIV1_APIV1ThemeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.getAll !== undefined) {
      NetworkAPIV1_APIV1ThemeResponse_GetAll.encode(message.getAll, writer.uint32(10).fork()).ldelim();
    }
    if (message.getTheme !== undefined) {
      NetworkAPIV1_APIV1ThemeResponse_GetTheme.encode(message.getTheme, writer.uint32(18).fork()).ldelim();
    }
    if (message.deleteTheme !== undefined) {
      NetworkAPIV1_APIV1ThemeResponse_DeleteTheme.encode(message.deleteTheme, writer.uint32(26).fork()).ldelim();
    }
    if (message.getThemeName !== undefined) {
      NetworkAPIV1_APIV1ThemeResponse_GetThemeName.encode(message.getThemeName, writer.uint32(34).fork()).ldelim();
    }
    if (message.putThemeName !== undefined) {
      NetworkAPIV1_APIV1ThemeResponse_PutThemeName.encode(message.putThemeName, writer.uint32(42).fork()).ldelim();
    }
    if (message.getThemeSlide !== undefined) {
      NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide.encode(message.getThemeSlide, writer.uint32(50).fork()).ldelim();
    }
    if (message.putThemeSlide !== undefined) {
      NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide.encode(message.putThemeSlide, writer.uint32(58).fork()).ldelim();
    }
    if (message.deleteThemeSlide !== undefined) {
      NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide.encode(message.deleteThemeSlide, writer.uint32(66).fork())
        .ldelim();
    }
    if (message.getThemeSlideThumbnail !== undefined) {
      NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail.encode(
        message.getThemeSlideThumbnail,
        writer.uint32(74).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.getAll = NetworkAPIV1_APIV1ThemeResponse_GetAll.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.getTheme = NetworkAPIV1_APIV1ThemeResponse_GetTheme.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.deleteTheme = NetworkAPIV1_APIV1ThemeResponse_DeleteTheme.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.getThemeName = NetworkAPIV1_APIV1ThemeResponse_GetThemeName.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.putThemeName = NetworkAPIV1_APIV1ThemeResponse_PutThemeName.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getThemeSlide = NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.putThemeSlide = NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.deleteThemeSlide = NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.getThemeSlideThumbnail = NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeResponse {
    return {
      getAll: isSet(object.getAll) ? NetworkAPIV1_APIV1ThemeResponse_GetAll.fromJSON(object.getAll) : undefined,
      getTheme: isSet(object.getTheme) ? NetworkAPIV1_APIV1ThemeResponse_GetTheme.fromJSON(object.getTheme) : undefined,
      deleteTheme: isSet(object.deleteTheme)
        ? NetworkAPIV1_APIV1ThemeResponse_DeleteTheme.fromJSON(object.deleteTheme)
        : undefined,
      getThemeName: isSet(object.getThemeName)
        ? NetworkAPIV1_APIV1ThemeResponse_GetThemeName.fromJSON(object.getThemeName)
        : undefined,
      putThemeName: isSet(object.putThemeName)
        ? NetworkAPIV1_APIV1ThemeResponse_PutThemeName.fromJSON(object.putThemeName)
        : undefined,
      getThemeSlide: isSet(object.getThemeSlide)
        ? NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide.fromJSON(object.getThemeSlide)
        : undefined,
      putThemeSlide: isSet(object.putThemeSlide)
        ? NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide.fromJSON(object.putThemeSlide)
        : undefined,
      deleteThemeSlide: isSet(object.deleteThemeSlide)
        ? NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide.fromJSON(object.deleteThemeSlide)
        : undefined,
      getThemeSlideThumbnail: isSet(object.getThemeSlideThumbnail)
        ? NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail.fromJSON(object.getThemeSlideThumbnail)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeResponse): unknown {
    const obj: any = {};
    message.getAll !== undefined &&
      (obj.getAll = message.getAll ? NetworkAPIV1_APIV1ThemeResponse_GetAll.toJSON(message.getAll) : undefined);
    message.getTheme !== undefined &&
      (obj.getTheme = message.getTheme ? NetworkAPIV1_APIV1ThemeResponse_GetTheme.toJSON(message.getTheme) : undefined);
    message.deleteTheme !== undefined && (obj.deleteTheme = message.deleteTheme
      ? NetworkAPIV1_APIV1ThemeResponse_DeleteTheme.toJSON(message.deleteTheme)
      : undefined);
    message.getThemeName !== undefined && (obj.getThemeName = message.getThemeName
      ? NetworkAPIV1_APIV1ThemeResponse_GetThemeName.toJSON(message.getThemeName)
      : undefined);
    message.putThemeName !== undefined && (obj.putThemeName = message.putThemeName
      ? NetworkAPIV1_APIV1ThemeResponse_PutThemeName.toJSON(message.putThemeName)
      : undefined);
    message.getThemeSlide !== undefined && (obj.getThemeSlide = message.getThemeSlide
      ? NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide.toJSON(message.getThemeSlide)
      : undefined);
    message.putThemeSlide !== undefined && (obj.putThemeSlide = message.putThemeSlide
      ? NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide.toJSON(message.putThemeSlide)
      : undefined);
    message.deleteThemeSlide !== undefined && (obj.deleteThemeSlide = message.deleteThemeSlide
      ? NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide.toJSON(message.deleteThemeSlide)
      : undefined);
    message.getThemeSlideThumbnail !== undefined && (obj.getThemeSlideThumbnail = message.getThemeSlideThumbnail
      ? NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail.toJSON(message.getThemeSlideThumbnail)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse>, I>>(base?: I): NetworkAPIV1_APIV1ThemeResponse {
    return NetworkAPIV1_APIV1ThemeResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeResponse {
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse();
    message.getAll = (object.getAll !== undefined && object.getAll !== null)
      ? NetworkAPIV1_APIV1ThemeResponse_GetAll.fromPartial(object.getAll)
      : undefined;
    message.getTheme = (object.getTheme !== undefined && object.getTheme !== null)
      ? NetworkAPIV1_APIV1ThemeResponse_GetTheme.fromPartial(object.getTheme)
      : undefined;
    message.deleteTheme = (object.deleteTheme !== undefined && object.deleteTheme !== null)
      ? NetworkAPIV1_APIV1ThemeResponse_DeleteTheme.fromPartial(object.deleteTheme)
      : undefined;
    message.getThemeName = (object.getThemeName !== undefined && object.getThemeName !== null)
      ? NetworkAPIV1_APIV1ThemeResponse_GetThemeName.fromPartial(object.getThemeName)
      : undefined;
    message.putThemeName = (object.putThemeName !== undefined && object.putThemeName !== null)
      ? NetworkAPIV1_APIV1ThemeResponse_PutThemeName.fromPartial(object.putThemeName)
      : undefined;
    message.getThemeSlide = (object.getThemeSlide !== undefined && object.getThemeSlide !== null)
      ? NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide.fromPartial(object.getThemeSlide)
      : undefined;
    message.putThemeSlide = (object.putThemeSlide !== undefined && object.putThemeSlide !== null)
      ? NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide.fromPartial(object.putThemeSlide)
      : undefined;
    message.deleteThemeSlide = (object.deleteThemeSlide !== undefined && object.deleteThemeSlide !== null)
      ? NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide.fromPartial(object.deleteThemeSlide)
      : undefined;
    message.getThemeSlideThumbnail =
      (object.getThemeSlideThumbnail !== undefined && object.getThemeSlideThumbnail !== null)
        ? NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail.fromPartial(object.getThemeSlideThumbnail)
        : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeResponse_GetAll(): NetworkAPIV1_APIV1ThemeResponse_GetAll {
  return { groups: [], themes: [] };
}

export const NetworkAPIV1_APIV1ThemeResponse_GetAll = {
  encode(message: NetworkAPIV1_APIV1ThemeResponse_GetAll, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.groups) {
      APIV1ThemeGroup.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.themes) {
      APIV1Theme.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeResponse_GetAll {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_GetAll();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.groups.push(APIV1ThemeGroup.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.themes.push(APIV1Theme.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeResponse_GetAll {
    return {
      groups: Array.isArray(object?.groups) ? object.groups.map((e: any) => APIV1ThemeGroup.fromJSON(e)) : [],
      themes: Array.isArray(object?.themes) ? object.themes.map((e: any) => APIV1Theme.fromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeResponse_GetAll): unknown {
    const obj: any = {};
    if (message.groups) {
      obj.groups = message.groups.map((e) => e ? APIV1ThemeGroup.toJSON(e) : undefined);
    } else {
      obj.groups = [];
    }
    if (message.themes) {
      obj.themes = message.themes.map((e) => e ? APIV1Theme.toJSON(e) : undefined);
    } else {
      obj.themes = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_GetAll>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeResponse_GetAll {
    return NetworkAPIV1_APIV1ThemeResponse_GetAll.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_GetAll>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeResponse_GetAll {
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_GetAll();
    message.groups = object.groups?.map((e) => APIV1ThemeGroup.fromPartial(e)) || [];
    message.themes = object.themes?.map((e) => APIV1Theme.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeResponse_GetTheme(): NetworkAPIV1_APIV1ThemeResponse_GetTheme {
  return { theme: undefined, group: undefined };
}

export const NetworkAPIV1_APIV1ThemeResponse_GetTheme = {
  encode(message: NetworkAPIV1_APIV1ThemeResponse_GetTheme, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.theme !== undefined) {
      APIV1Theme.encode(message.theme, writer.uint32(10).fork()).ldelim();
    }
    if (message.group !== undefined) {
      APIV1ThemeGroup.encode(message.group, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeResponse_GetTheme {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_GetTheme();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.theme = APIV1Theme.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.group = APIV1ThemeGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeResponse_GetTheme {
    return {
      theme: isSet(object.theme) ? APIV1Theme.fromJSON(object.theme) : undefined,
      group: isSet(object.group) ? APIV1ThemeGroup.fromJSON(object.group) : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeResponse_GetTheme): unknown {
    const obj: any = {};
    message.theme !== undefined && (obj.theme = message.theme ? APIV1Theme.toJSON(message.theme) : undefined);
    message.group !== undefined && (obj.group = message.group ? APIV1ThemeGroup.toJSON(message.group) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_GetTheme>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeResponse_GetTheme {
    return NetworkAPIV1_APIV1ThemeResponse_GetTheme.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_GetTheme>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeResponse_GetTheme {
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_GetTheme();
    message.theme = (object.theme !== undefined && object.theme !== null)
      ? APIV1Theme.fromPartial(object.theme)
      : undefined;
    message.group = (object.group !== undefined && object.group !== null)
      ? APIV1ThemeGroup.fromPartial(object.group)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeResponse_DeleteTheme(): NetworkAPIV1_APIV1ThemeResponse_DeleteTheme {
  return {};
}

export const NetworkAPIV1_APIV1ThemeResponse_DeleteTheme = {
  encode(_: NetworkAPIV1_APIV1ThemeResponse_DeleteTheme, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeResponse_DeleteTheme {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_DeleteTheme();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1ThemeResponse_DeleteTheme {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1ThemeResponse_DeleteTheme): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_DeleteTheme>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeResponse_DeleteTheme {
    return NetworkAPIV1_APIV1ThemeResponse_DeleteTheme.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_DeleteTheme>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1ThemeResponse_DeleteTheme {
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_DeleteTheme();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeResponse_GetThemeName(): NetworkAPIV1_APIV1ThemeResponse_GetThemeName {
  return { name: "" };
}

export const NetworkAPIV1_APIV1ThemeResponse_GetThemeName = {
  encode(message: NetworkAPIV1_APIV1ThemeResponse_GetThemeName, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeResponse_GetThemeName {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_GetThemeName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeResponse_GetThemeName {
    return { name: isSet(object.name) ? String(object.name) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeResponse_GetThemeName): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_GetThemeName>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeResponse_GetThemeName {
    return NetworkAPIV1_APIV1ThemeResponse_GetThemeName.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_GetThemeName>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeResponse_GetThemeName {
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_GetThemeName();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeResponse_PutThemeName(): NetworkAPIV1_APIV1ThemeResponse_PutThemeName {
  return {};
}

export const NetworkAPIV1_APIV1ThemeResponse_PutThemeName = {
  encode(_: NetworkAPIV1_APIV1ThemeResponse_PutThemeName, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeResponse_PutThemeName {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_PutThemeName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1ThemeResponse_PutThemeName {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1ThemeResponse_PutThemeName): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_PutThemeName>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeResponse_PutThemeName {
    return NetworkAPIV1_APIV1ThemeResponse_PutThemeName.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_PutThemeName>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1ThemeResponse_PutThemeName {
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_PutThemeName();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeResponse_GetThemeSlide(): NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide {
  return { themeSlide: undefined };
}

export const NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide = {
  encode(message: NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.themeSlide !== undefined) {
      APIV1ThemeSlide.encode(message.themeSlide, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_GetThemeSlide();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.themeSlide = APIV1ThemeSlide.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide {
    return { themeSlide: isSet(object.themeSlide) ? APIV1ThemeSlide.fromJSON(object.themeSlide) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide): unknown {
    const obj: any = {};
    message.themeSlide !== undefined &&
      (obj.themeSlide = message.themeSlide ? APIV1ThemeSlide.toJSON(message.themeSlide) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide {
    return NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeResponse_GetThemeSlide {
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_GetThemeSlide();
    message.themeSlide = (object.themeSlide !== undefined && object.themeSlide !== null)
      ? APIV1ThemeSlide.fromPartial(object.themeSlide)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeResponse_PutThemeSlide(): NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide {
  return {};
}

export const NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide = {
  encode(_: NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_PutThemeSlide();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide {
    return NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1ThemeResponse_PutThemeSlide {
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_PutThemeSlide();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide(): NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide {
  return {};
}

export const NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide = {
  encode(_: NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide {
    return NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide {
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_DeleteThemeSlide();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail(): NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail {
  return { data: new Uint8Array() };
}

export const NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail = {
  encode(
    message: NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail {
    return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array() };
  },

  toJSON(message: NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail): unknown {
    const obj: any = {};
    message.data !== undefined &&
      (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail {
    return NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail {
    const message = createBaseNetworkAPIV1_APIV1ThemeResponse_GetThemeSlideThumbnail();
    message.data = object.data ?? new Uint8Array();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerResponse(): NetworkAPIV1_APIV1TimerResponse {
  return {
    timers: undefined,
    createTimer: undefined,
    currentTimes: undefined,
    allTimersOperation: undefined,
    getTimer: undefined,
    putTimer: undefined,
    deleteTimer: undefined,
    timerOperation: undefined,
    systemTime: undefined,
    videoCountdown: undefined,
  };
}

export const NetworkAPIV1_APIV1TimerResponse = {
  encode(message: NetworkAPIV1_APIV1TimerResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.timers !== undefined) {
      NetworkAPIV1_APIV1TimerResponse_Timers.encode(message.timers, writer.uint32(10).fork()).ldelim();
    }
    if (message.createTimer !== undefined) {
      NetworkAPIV1_APIV1TimerResponse_CreateTimer.encode(message.createTimer, writer.uint32(18).fork()).ldelim();
    }
    if (message.currentTimes !== undefined) {
      NetworkAPIV1_APIV1TimerResponse_CurrentTimes.encode(message.currentTimes, writer.uint32(26).fork()).ldelim();
    }
    if (message.allTimersOperation !== undefined) {
      NetworkAPIV1_APIV1TimerResponse_AllTimersOperation.encode(message.allTimersOperation, writer.uint32(34).fork())
        .ldelim();
    }
    if (message.getTimer !== undefined) {
      NetworkAPIV1_APIV1TimerResponse_GetTimer.encode(message.getTimer, writer.uint32(42).fork()).ldelim();
    }
    if (message.putTimer !== undefined) {
      NetworkAPIV1_APIV1TimerResponse_PutTimer.encode(message.putTimer, writer.uint32(50).fork()).ldelim();
    }
    if (message.deleteTimer !== undefined) {
      NetworkAPIV1_APIV1TimerResponse_DeleteTimer.encode(message.deleteTimer, writer.uint32(58).fork()).ldelim();
    }
    if (message.timerOperation !== undefined) {
      NetworkAPIV1_APIV1TimerResponse_TimerOperation.encode(message.timerOperation, writer.uint32(66).fork()).ldelim();
    }
    if (message.systemTime !== undefined) {
      NetworkAPIV1_APIV1TimerResponse_SystemTime.encode(message.systemTime, writer.uint32(74).fork()).ldelim();
    }
    if (message.videoCountdown !== undefined) {
      NetworkAPIV1_APIV1TimerResponse_VideoCountdown.encode(message.videoCountdown, writer.uint32(82).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.timers = NetworkAPIV1_APIV1TimerResponse_Timers.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.createTimer = NetworkAPIV1_APIV1TimerResponse_CreateTimer.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.currentTimes = NetworkAPIV1_APIV1TimerResponse_CurrentTimes.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.allTimersOperation = NetworkAPIV1_APIV1TimerResponse_AllTimersOperation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.getTimer = NetworkAPIV1_APIV1TimerResponse_GetTimer.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.putTimer = NetworkAPIV1_APIV1TimerResponse_PutTimer.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.deleteTimer = NetworkAPIV1_APIV1TimerResponse_DeleteTimer.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.timerOperation = NetworkAPIV1_APIV1TimerResponse_TimerOperation.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.systemTime = NetworkAPIV1_APIV1TimerResponse_SystemTime.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.videoCountdown = NetworkAPIV1_APIV1TimerResponse_VideoCountdown.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerResponse {
    return {
      timers: isSet(object.timers) ? NetworkAPIV1_APIV1TimerResponse_Timers.fromJSON(object.timers) : undefined,
      createTimer: isSet(object.createTimer)
        ? NetworkAPIV1_APIV1TimerResponse_CreateTimer.fromJSON(object.createTimer)
        : undefined,
      currentTimes: isSet(object.currentTimes)
        ? NetworkAPIV1_APIV1TimerResponse_CurrentTimes.fromJSON(object.currentTimes)
        : undefined,
      allTimersOperation: isSet(object.allTimersOperation)
        ? NetworkAPIV1_APIV1TimerResponse_AllTimersOperation.fromJSON(object.allTimersOperation)
        : undefined,
      getTimer: isSet(object.getTimer) ? NetworkAPIV1_APIV1TimerResponse_GetTimer.fromJSON(object.getTimer) : undefined,
      putTimer: isSet(object.putTimer) ? NetworkAPIV1_APIV1TimerResponse_PutTimer.fromJSON(object.putTimer) : undefined,
      deleteTimer: isSet(object.deleteTimer)
        ? NetworkAPIV1_APIV1TimerResponse_DeleteTimer.fromJSON(object.deleteTimer)
        : undefined,
      timerOperation: isSet(object.timerOperation)
        ? NetworkAPIV1_APIV1TimerResponse_TimerOperation.fromJSON(object.timerOperation)
        : undefined,
      systemTime: isSet(object.systemTime)
        ? NetworkAPIV1_APIV1TimerResponse_SystemTime.fromJSON(object.systemTime)
        : undefined,
      videoCountdown: isSet(object.videoCountdown)
        ? NetworkAPIV1_APIV1TimerResponse_VideoCountdown.fromJSON(object.videoCountdown)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerResponse): unknown {
    const obj: any = {};
    message.timers !== undefined &&
      (obj.timers = message.timers ? NetworkAPIV1_APIV1TimerResponse_Timers.toJSON(message.timers) : undefined);
    message.createTimer !== undefined && (obj.createTimer = message.createTimer
      ? NetworkAPIV1_APIV1TimerResponse_CreateTimer.toJSON(message.createTimer)
      : undefined);
    message.currentTimes !== undefined && (obj.currentTimes = message.currentTimes
      ? NetworkAPIV1_APIV1TimerResponse_CurrentTimes.toJSON(message.currentTimes)
      : undefined);
    message.allTimersOperation !== undefined && (obj.allTimersOperation = message.allTimersOperation
      ? NetworkAPIV1_APIV1TimerResponse_AllTimersOperation.toJSON(message.allTimersOperation)
      : undefined);
    message.getTimer !== undefined &&
      (obj.getTimer = message.getTimer ? NetworkAPIV1_APIV1TimerResponse_GetTimer.toJSON(message.getTimer) : undefined);
    message.putTimer !== undefined &&
      (obj.putTimer = message.putTimer ? NetworkAPIV1_APIV1TimerResponse_PutTimer.toJSON(message.putTimer) : undefined);
    message.deleteTimer !== undefined && (obj.deleteTimer = message.deleteTimer
      ? NetworkAPIV1_APIV1TimerResponse_DeleteTimer.toJSON(message.deleteTimer)
      : undefined);
    message.timerOperation !== undefined && (obj.timerOperation = message.timerOperation
      ? NetworkAPIV1_APIV1TimerResponse_TimerOperation.toJSON(message.timerOperation)
      : undefined);
    message.systemTime !== undefined && (obj.systemTime = message.systemTime
      ? NetworkAPIV1_APIV1TimerResponse_SystemTime.toJSON(message.systemTime)
      : undefined);
    message.videoCountdown !== undefined && (obj.videoCountdown = message.videoCountdown
      ? NetworkAPIV1_APIV1TimerResponse_VideoCountdown.toJSON(message.videoCountdown)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse>, I>>(base?: I): NetworkAPIV1_APIV1TimerResponse {
    return NetworkAPIV1_APIV1TimerResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerResponse {
    const message = createBaseNetworkAPIV1_APIV1TimerResponse();
    message.timers = (object.timers !== undefined && object.timers !== null)
      ? NetworkAPIV1_APIV1TimerResponse_Timers.fromPartial(object.timers)
      : undefined;
    message.createTimer = (object.createTimer !== undefined && object.createTimer !== null)
      ? NetworkAPIV1_APIV1TimerResponse_CreateTimer.fromPartial(object.createTimer)
      : undefined;
    message.currentTimes = (object.currentTimes !== undefined && object.currentTimes !== null)
      ? NetworkAPIV1_APIV1TimerResponse_CurrentTimes.fromPartial(object.currentTimes)
      : undefined;
    message.allTimersOperation = (object.allTimersOperation !== undefined && object.allTimersOperation !== null)
      ? NetworkAPIV1_APIV1TimerResponse_AllTimersOperation.fromPartial(object.allTimersOperation)
      : undefined;
    message.getTimer = (object.getTimer !== undefined && object.getTimer !== null)
      ? NetworkAPIV1_APIV1TimerResponse_GetTimer.fromPartial(object.getTimer)
      : undefined;
    message.putTimer = (object.putTimer !== undefined && object.putTimer !== null)
      ? NetworkAPIV1_APIV1TimerResponse_PutTimer.fromPartial(object.putTimer)
      : undefined;
    message.deleteTimer = (object.deleteTimer !== undefined && object.deleteTimer !== null)
      ? NetworkAPIV1_APIV1TimerResponse_DeleteTimer.fromPartial(object.deleteTimer)
      : undefined;
    message.timerOperation = (object.timerOperation !== undefined && object.timerOperation !== null)
      ? NetworkAPIV1_APIV1TimerResponse_TimerOperation.fromPartial(object.timerOperation)
      : undefined;
    message.systemTime = (object.systemTime !== undefined && object.systemTime !== null)
      ? NetworkAPIV1_APIV1TimerResponse_SystemTime.fromPartial(object.systemTime)
      : undefined;
    message.videoCountdown = (object.videoCountdown !== undefined && object.videoCountdown !== null)
      ? NetworkAPIV1_APIV1TimerResponse_VideoCountdown.fromPartial(object.videoCountdown)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerResponse_Timers(): NetworkAPIV1_APIV1TimerResponse_Timers {
  return { timers: [] };
}

export const NetworkAPIV1_APIV1TimerResponse_Timers = {
  encode(message: NetworkAPIV1_APIV1TimerResponse_Timers, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.timers) {
      APIV1Timer.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerResponse_Timers {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_Timers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.timers.push(APIV1Timer.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerResponse_Timers {
    return { timers: Array.isArray(object?.timers) ? object.timers.map((e: any) => APIV1Timer.fromJSON(e)) : [] };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerResponse_Timers): unknown {
    const obj: any = {};
    if (message.timers) {
      obj.timers = message.timers.map((e) => e ? APIV1Timer.toJSON(e) : undefined);
    } else {
      obj.timers = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_Timers>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerResponse_Timers {
    return NetworkAPIV1_APIV1TimerResponse_Timers.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_Timers>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerResponse_Timers {
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_Timers();
    message.timers = object.timers?.map((e) => APIV1Timer.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerResponse_CreateTimer(): NetworkAPIV1_APIV1TimerResponse_CreateTimer {
  return { timer: undefined };
}

export const NetworkAPIV1_APIV1TimerResponse_CreateTimer = {
  encode(message: NetworkAPIV1_APIV1TimerResponse_CreateTimer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.timer !== undefined) {
      APIV1Timer.encode(message.timer, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerResponse_CreateTimer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_CreateTimer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.timer = APIV1Timer.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerResponse_CreateTimer {
    return { timer: isSet(object.timer) ? APIV1Timer.fromJSON(object.timer) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerResponse_CreateTimer): unknown {
    const obj: any = {};
    message.timer !== undefined && (obj.timer = message.timer ? APIV1Timer.toJSON(message.timer) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_CreateTimer>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerResponse_CreateTimer {
    return NetworkAPIV1_APIV1TimerResponse_CreateTimer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_CreateTimer>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerResponse_CreateTimer {
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_CreateTimer();
    message.timer = (object.timer !== undefined && object.timer !== null)
      ? APIV1Timer.fromPartial(object.timer)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerResponse_CurrentTimes(): NetworkAPIV1_APIV1TimerResponse_CurrentTimes {
  return { timers: [] };
}

export const NetworkAPIV1_APIV1TimerResponse_CurrentTimes = {
  encode(message: NetworkAPIV1_APIV1TimerResponse_CurrentTimes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.timers) {
      APIV1TimerValue.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerResponse_CurrentTimes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_CurrentTimes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.timers.push(APIV1TimerValue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerResponse_CurrentTimes {
    return { timers: Array.isArray(object?.timers) ? object.timers.map((e: any) => APIV1TimerValue.fromJSON(e)) : [] };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerResponse_CurrentTimes): unknown {
    const obj: any = {};
    if (message.timers) {
      obj.timers = message.timers.map((e) => e ? APIV1TimerValue.toJSON(e) : undefined);
    } else {
      obj.timers = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_CurrentTimes>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerResponse_CurrentTimes {
    return NetworkAPIV1_APIV1TimerResponse_CurrentTimes.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_CurrentTimes>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerResponse_CurrentTimes {
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_CurrentTimes();
    message.timers = object.timers?.map((e) => APIV1TimerValue.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerResponse_AllTimersOperation(): NetworkAPIV1_APIV1TimerResponse_AllTimersOperation {
  return {};
}

export const NetworkAPIV1_APIV1TimerResponse_AllTimersOperation = {
  encode(_: NetworkAPIV1_APIV1TimerResponse_AllTimersOperation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerResponse_AllTimersOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_AllTimersOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TimerResponse_AllTimersOperation {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TimerResponse_AllTimersOperation): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_AllTimersOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerResponse_AllTimersOperation {
    return NetworkAPIV1_APIV1TimerResponse_AllTimersOperation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_AllTimersOperation>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TimerResponse_AllTimersOperation {
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_AllTimersOperation();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerResponse_GetTimer(): NetworkAPIV1_APIV1TimerResponse_GetTimer {
  return { timer: undefined };
}

export const NetworkAPIV1_APIV1TimerResponse_GetTimer = {
  encode(message: NetworkAPIV1_APIV1TimerResponse_GetTimer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.timer !== undefined) {
      APIV1Timer.encode(message.timer, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerResponse_GetTimer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_GetTimer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.timer = APIV1Timer.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerResponse_GetTimer {
    return { timer: isSet(object.timer) ? APIV1Timer.fromJSON(object.timer) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerResponse_GetTimer): unknown {
    const obj: any = {};
    message.timer !== undefined && (obj.timer = message.timer ? APIV1Timer.toJSON(message.timer) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_GetTimer>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerResponse_GetTimer {
    return NetworkAPIV1_APIV1TimerResponse_GetTimer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_GetTimer>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerResponse_GetTimer {
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_GetTimer();
    message.timer = (object.timer !== undefined && object.timer !== null)
      ? APIV1Timer.fromPartial(object.timer)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerResponse_PutTimer(): NetworkAPIV1_APIV1TimerResponse_PutTimer {
  return { timer: undefined };
}

export const NetworkAPIV1_APIV1TimerResponse_PutTimer = {
  encode(message: NetworkAPIV1_APIV1TimerResponse_PutTimer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.timer !== undefined) {
      APIV1Timer.encode(message.timer, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerResponse_PutTimer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_PutTimer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.timer = APIV1Timer.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerResponse_PutTimer {
    return { timer: isSet(object.timer) ? APIV1Timer.fromJSON(object.timer) : undefined };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerResponse_PutTimer): unknown {
    const obj: any = {};
    message.timer !== undefined && (obj.timer = message.timer ? APIV1Timer.toJSON(message.timer) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_PutTimer>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerResponse_PutTimer {
    return NetworkAPIV1_APIV1TimerResponse_PutTimer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_PutTimer>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerResponse_PutTimer {
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_PutTimer();
    message.timer = (object.timer !== undefined && object.timer !== null)
      ? APIV1Timer.fromPartial(object.timer)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerResponse_DeleteTimer(): NetworkAPIV1_APIV1TimerResponse_DeleteTimer {
  return {};
}

export const NetworkAPIV1_APIV1TimerResponse_DeleteTimer = {
  encode(_: NetworkAPIV1_APIV1TimerResponse_DeleteTimer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerResponse_DeleteTimer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_DeleteTimer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TimerResponse_DeleteTimer {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TimerResponse_DeleteTimer): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_DeleteTimer>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerResponse_DeleteTimer {
    return NetworkAPIV1_APIV1TimerResponse_DeleteTimer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_DeleteTimer>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TimerResponse_DeleteTimer {
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_DeleteTimer();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerResponse_TimerOperation(): NetworkAPIV1_APIV1TimerResponse_TimerOperation {
  return {};
}

export const NetworkAPIV1_APIV1TimerResponse_TimerOperation = {
  encode(_: NetworkAPIV1_APIV1TimerResponse_TimerOperation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerResponse_TimerOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_TimerOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TimerResponse_TimerOperation {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TimerResponse_TimerOperation): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_TimerOperation>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerResponse_TimerOperation {
    return NetworkAPIV1_APIV1TimerResponse_TimerOperation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_TimerOperation>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TimerResponse_TimerOperation {
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_TimerOperation();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerResponse_SystemTime(): NetworkAPIV1_APIV1TimerResponse_SystemTime {
  return { time: 0 };
}

export const NetworkAPIV1_APIV1TimerResponse_SystemTime = {
  encode(message: NetworkAPIV1_APIV1TimerResponse_SystemTime, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.time !== 0) {
      writer.uint32(8).uint64(message.time);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerResponse_SystemTime {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_SystemTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.time = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerResponse_SystemTime {
    return { time: isSet(object.time) ? Number(object.time) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerResponse_SystemTime): unknown {
    const obj: any = {};
    message.time !== undefined && (obj.time = Math.round(message.time));
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_SystemTime>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerResponse_SystemTime {
    return NetworkAPIV1_APIV1TimerResponse_SystemTime.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_SystemTime>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerResponse_SystemTime {
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_SystemTime();
    message.time = object.time ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TimerResponse_VideoCountdown(): NetworkAPIV1_APIV1TimerResponse_VideoCountdown {
  return { time: "" };
}

export const NetworkAPIV1_APIV1TimerResponse_VideoCountdown = {
  encode(
    message: NetworkAPIV1_APIV1TimerResponse_VideoCountdown,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.time !== "") {
      writer.uint32(10).string(message.time);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TimerResponse_VideoCountdown {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_VideoCountdown();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.time = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TimerResponse_VideoCountdown {
    return { time: isSet(object.time) ? String(object.time) : "" };
  },

  toJSON(message: NetworkAPIV1_APIV1TimerResponse_VideoCountdown): unknown {
    const obj: any = {};
    message.time !== undefined && (obj.time = message.time);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_VideoCountdown>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TimerResponse_VideoCountdown {
    return NetworkAPIV1_APIV1TimerResponse_VideoCountdown.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TimerResponse_VideoCountdown>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TimerResponse_VideoCountdown {
    const message = createBaseNetworkAPIV1_APIV1TimerResponse_VideoCountdown();
    message.time = object.time ?? "";
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportResponse(): NetworkAPIV1_APIV1TransportResponse {
  return {
    play: undefined,
    pause: undefined,
    skipBackward: undefined,
    skipForward: undefined,
    goToEnd: undefined,
    getTime: undefined,
    putTime: undefined,
    getAutoAdvance: undefined,
    deleteAutoAdvance: undefined,
    getCurrentMedia: undefined,
  };
}

export const NetworkAPIV1_APIV1TransportResponse = {
  encode(message: NetworkAPIV1_APIV1TransportResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.play !== undefined) {
      NetworkAPIV1_APIV1TransportResponse_Play.encode(message.play, writer.uint32(10).fork()).ldelim();
    }
    if (message.pause !== undefined) {
      NetworkAPIV1_APIV1TransportResponse_Pause.encode(message.pause, writer.uint32(18).fork()).ldelim();
    }
    if (message.skipBackward !== undefined) {
      NetworkAPIV1_APIV1TransportResponse_SkipBackward.encode(message.skipBackward, writer.uint32(26).fork()).ldelim();
    }
    if (message.skipForward !== undefined) {
      NetworkAPIV1_APIV1TransportResponse_SkipForward.encode(message.skipForward, writer.uint32(34).fork()).ldelim();
    }
    if (message.goToEnd !== undefined) {
      NetworkAPIV1_APIV1TransportResponse_GoToEnd.encode(message.goToEnd, writer.uint32(42).fork()).ldelim();
    }
    if (message.getTime !== undefined) {
      NetworkAPIV1_APIV1TransportResponse_GetTime.encode(message.getTime, writer.uint32(50).fork()).ldelim();
    }
    if (message.putTime !== undefined) {
      NetworkAPIV1_APIV1TransportResponse_PutTime.encode(message.putTime, writer.uint32(58).fork()).ldelim();
    }
    if (message.getAutoAdvance !== undefined) {
      NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance.encode(message.getAutoAdvance, writer.uint32(66).fork())
        .ldelim();
    }
    if (message.deleteAutoAdvance !== undefined) {
      NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance.encode(message.deleteAutoAdvance, writer.uint32(74).fork())
        .ldelim();
    }
    if (message.getCurrentMedia !== undefined) {
      NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia.encode(message.getCurrentMedia, writer.uint32(82).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.play = NetworkAPIV1_APIV1TransportResponse_Play.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.pause = NetworkAPIV1_APIV1TransportResponse_Pause.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.skipBackward = NetworkAPIV1_APIV1TransportResponse_SkipBackward.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.skipForward = NetworkAPIV1_APIV1TransportResponse_SkipForward.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.goToEnd = NetworkAPIV1_APIV1TransportResponse_GoToEnd.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.getTime = NetworkAPIV1_APIV1TransportResponse_GetTime.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.putTime = NetworkAPIV1_APIV1TransportResponse_PutTime.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.getAutoAdvance = NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.deleteAutoAdvance = NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.getCurrentMedia = NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportResponse {
    return {
      play: isSet(object.play) ? NetworkAPIV1_APIV1TransportResponse_Play.fromJSON(object.play) : undefined,
      pause: isSet(object.pause) ? NetworkAPIV1_APIV1TransportResponse_Pause.fromJSON(object.pause) : undefined,
      skipBackward: isSet(object.skipBackward)
        ? NetworkAPIV1_APIV1TransportResponse_SkipBackward.fromJSON(object.skipBackward)
        : undefined,
      skipForward: isSet(object.skipForward)
        ? NetworkAPIV1_APIV1TransportResponse_SkipForward.fromJSON(object.skipForward)
        : undefined,
      goToEnd: isSet(object.goToEnd) ? NetworkAPIV1_APIV1TransportResponse_GoToEnd.fromJSON(object.goToEnd) : undefined,
      getTime: isSet(object.getTime) ? NetworkAPIV1_APIV1TransportResponse_GetTime.fromJSON(object.getTime) : undefined,
      putTime: isSet(object.putTime) ? NetworkAPIV1_APIV1TransportResponse_PutTime.fromJSON(object.putTime) : undefined,
      getAutoAdvance: isSet(object.getAutoAdvance)
        ? NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance.fromJSON(object.getAutoAdvance)
        : undefined,
      deleteAutoAdvance: isSet(object.deleteAutoAdvance)
        ? NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance.fromJSON(object.deleteAutoAdvance)
        : undefined,
      getCurrentMedia: isSet(object.getCurrentMedia)
        ? NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia.fromJSON(object.getCurrentMedia)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportResponse): unknown {
    const obj: any = {};
    message.play !== undefined &&
      (obj.play = message.play ? NetworkAPIV1_APIV1TransportResponse_Play.toJSON(message.play) : undefined);
    message.pause !== undefined &&
      (obj.pause = message.pause ? NetworkAPIV1_APIV1TransportResponse_Pause.toJSON(message.pause) : undefined);
    message.skipBackward !== undefined && (obj.skipBackward = message.skipBackward
      ? NetworkAPIV1_APIV1TransportResponse_SkipBackward.toJSON(message.skipBackward)
      : undefined);
    message.skipForward !== undefined && (obj.skipForward = message.skipForward
      ? NetworkAPIV1_APIV1TransportResponse_SkipForward.toJSON(message.skipForward)
      : undefined);
    message.goToEnd !== undefined &&
      (obj.goToEnd = message.goToEnd ? NetworkAPIV1_APIV1TransportResponse_GoToEnd.toJSON(message.goToEnd) : undefined);
    message.getTime !== undefined &&
      (obj.getTime = message.getTime ? NetworkAPIV1_APIV1TransportResponse_GetTime.toJSON(message.getTime) : undefined);
    message.putTime !== undefined &&
      (obj.putTime = message.putTime ? NetworkAPIV1_APIV1TransportResponse_PutTime.toJSON(message.putTime) : undefined);
    message.getAutoAdvance !== undefined && (obj.getAutoAdvance = message.getAutoAdvance
      ? NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance.toJSON(message.getAutoAdvance)
      : undefined);
    message.deleteAutoAdvance !== undefined && (obj.deleteAutoAdvance = message.deleteAutoAdvance
      ? NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance.toJSON(message.deleteAutoAdvance)
      : undefined);
    message.getCurrentMedia !== undefined && (obj.getCurrentMedia = message.getCurrentMedia
      ? NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia.toJSON(message.getCurrentMedia)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportResponse {
    return NetworkAPIV1_APIV1TransportResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportResponse {
    const message = createBaseNetworkAPIV1_APIV1TransportResponse();
    message.play = (object.play !== undefined && object.play !== null)
      ? NetworkAPIV1_APIV1TransportResponse_Play.fromPartial(object.play)
      : undefined;
    message.pause = (object.pause !== undefined && object.pause !== null)
      ? NetworkAPIV1_APIV1TransportResponse_Pause.fromPartial(object.pause)
      : undefined;
    message.skipBackward = (object.skipBackward !== undefined && object.skipBackward !== null)
      ? NetworkAPIV1_APIV1TransportResponse_SkipBackward.fromPartial(object.skipBackward)
      : undefined;
    message.skipForward = (object.skipForward !== undefined && object.skipForward !== null)
      ? NetworkAPIV1_APIV1TransportResponse_SkipForward.fromPartial(object.skipForward)
      : undefined;
    message.goToEnd = (object.goToEnd !== undefined && object.goToEnd !== null)
      ? NetworkAPIV1_APIV1TransportResponse_GoToEnd.fromPartial(object.goToEnd)
      : undefined;
    message.getTime = (object.getTime !== undefined && object.getTime !== null)
      ? NetworkAPIV1_APIV1TransportResponse_GetTime.fromPartial(object.getTime)
      : undefined;
    message.putTime = (object.putTime !== undefined && object.putTime !== null)
      ? NetworkAPIV1_APIV1TransportResponse_PutTime.fromPartial(object.putTime)
      : undefined;
    message.getAutoAdvance = (object.getAutoAdvance !== undefined && object.getAutoAdvance !== null)
      ? NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance.fromPartial(object.getAutoAdvance)
      : undefined;
    message.deleteAutoAdvance = (object.deleteAutoAdvance !== undefined && object.deleteAutoAdvance !== null)
      ? NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance.fromPartial(object.deleteAutoAdvance)
      : undefined;
    message.getCurrentMedia = (object.getCurrentMedia !== undefined && object.getCurrentMedia !== null)
      ? NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia.fromPartial(object.getCurrentMedia)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportResponse_Play(): NetworkAPIV1_APIV1TransportResponse_Play {
  return {};
}

export const NetworkAPIV1_APIV1TransportResponse_Play = {
  encode(_: NetworkAPIV1_APIV1TransportResponse_Play, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportResponse_Play {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_Play();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TransportResponse_Play {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TransportResponse_Play): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_Play>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportResponse_Play {
    return NetworkAPIV1_APIV1TransportResponse_Play.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_Play>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TransportResponse_Play {
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_Play();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportResponse_Pause(): NetworkAPIV1_APIV1TransportResponse_Pause {
  return {};
}

export const NetworkAPIV1_APIV1TransportResponse_Pause = {
  encode(_: NetworkAPIV1_APIV1TransportResponse_Pause, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportResponse_Pause {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_Pause();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TransportResponse_Pause {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TransportResponse_Pause): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_Pause>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportResponse_Pause {
    return NetworkAPIV1_APIV1TransportResponse_Pause.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_Pause>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TransportResponse_Pause {
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_Pause();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportResponse_SkipBackward(): NetworkAPIV1_APIV1TransportResponse_SkipBackward {
  return {};
}

export const NetworkAPIV1_APIV1TransportResponse_SkipBackward = {
  encode(_: NetworkAPIV1_APIV1TransportResponse_SkipBackward, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportResponse_SkipBackward {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_SkipBackward();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TransportResponse_SkipBackward {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TransportResponse_SkipBackward): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_SkipBackward>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportResponse_SkipBackward {
    return NetworkAPIV1_APIV1TransportResponse_SkipBackward.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_SkipBackward>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TransportResponse_SkipBackward {
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_SkipBackward();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportResponse_SkipForward(): NetworkAPIV1_APIV1TransportResponse_SkipForward {
  return {};
}

export const NetworkAPIV1_APIV1TransportResponse_SkipForward = {
  encode(_: NetworkAPIV1_APIV1TransportResponse_SkipForward, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportResponse_SkipForward {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_SkipForward();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TransportResponse_SkipForward {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TransportResponse_SkipForward): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_SkipForward>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportResponse_SkipForward {
    return NetworkAPIV1_APIV1TransportResponse_SkipForward.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_SkipForward>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TransportResponse_SkipForward {
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_SkipForward();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportResponse_GoToEnd(): NetworkAPIV1_APIV1TransportResponse_GoToEnd {
  return {};
}

export const NetworkAPIV1_APIV1TransportResponse_GoToEnd = {
  encode(_: NetworkAPIV1_APIV1TransportResponse_GoToEnd, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportResponse_GoToEnd {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_GoToEnd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TransportResponse_GoToEnd {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TransportResponse_GoToEnd): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_GoToEnd>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportResponse_GoToEnd {
    return NetworkAPIV1_APIV1TransportResponse_GoToEnd.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_GoToEnd>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TransportResponse_GoToEnd {
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_GoToEnd();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportResponse_GetTime(): NetworkAPIV1_APIV1TransportResponse_GetTime {
  return { seconds: 0 };
}

export const NetworkAPIV1_APIV1TransportResponse_GetTime = {
  encode(message: NetworkAPIV1_APIV1TransportResponse_GetTime, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.seconds !== 0) {
      writer.uint32(9).double(message.seconds);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportResponse_GetTime {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_GetTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 9) {
            break;
          }

          message.seconds = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportResponse_GetTime {
    return { seconds: isSet(object.seconds) ? Number(object.seconds) : 0 };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportResponse_GetTime): unknown {
    const obj: any = {};
    message.seconds !== undefined && (obj.seconds = message.seconds);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_GetTime>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportResponse_GetTime {
    return NetworkAPIV1_APIV1TransportResponse_GetTime.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_GetTime>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportResponse_GetTime {
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_GetTime();
    message.seconds = object.seconds ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportResponse_PutTime(): NetworkAPIV1_APIV1TransportResponse_PutTime {
  return {};
}

export const NetworkAPIV1_APIV1TransportResponse_PutTime = {
  encode(_: NetworkAPIV1_APIV1TransportResponse_PutTime, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportResponse_PutTime {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_PutTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TransportResponse_PutTime {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TransportResponse_PutTime): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_PutTime>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportResponse_PutTime {
    return NetworkAPIV1_APIV1TransportResponse_PutTime.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_PutTime>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TransportResponse_PutTime {
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_PutTime();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportResponse_GetAutoAdvance(): NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance {
  return { autoAdvance: false };
}

export const NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance = {
  encode(
    message: NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.autoAdvance === true) {
      writer.uint32(8).bool(message.autoAdvance);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_GetAutoAdvance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.autoAdvance = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance {
    return { autoAdvance: isSet(object.autoAdvance) ? Boolean(object.autoAdvance) : false };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance): unknown {
    const obj: any = {};
    message.autoAdvance !== undefined && (obj.autoAdvance = message.autoAdvance);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance {
    return NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportResponse_GetAutoAdvance {
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_GetAutoAdvance();
    message.autoAdvance = object.autoAdvance ?? false;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance(): NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance {
  return {};
}

export const NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance = {
  encode(
    _: NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance {
    return NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance {
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_DeleteAutoAdvance();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TransportResponse_GetCurrentMedia(): NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia {
  return { isPlaying: false, uuid: undefined, name: "", artist: "", audioOnly: false, duration: 0 };
}

export const NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia = {
  encode(
    message: NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.isPlaying === true) {
      writer.uint32(8).bool(message.isPlaying);
    }
    if (message.uuid !== undefined) {
      UUID.encode(message.uuid, writer.uint32(18).fork()).ldelim();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.artist !== "") {
      writer.uint32(34).string(message.artist);
    }
    if (message.audioOnly === true) {
      writer.uint32(40).bool(message.audioOnly);
    }
    if (message.duration !== 0) {
      writer.uint32(49).double(message.duration);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_GetCurrentMedia();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.isPlaying = reader.bool();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.uuid = UUID.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.artist = reader.string();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.audioOnly = reader.bool();
          continue;
        case 6:
          if (tag != 49) {
            break;
          }

          message.duration = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia {
    return {
      isPlaying: isSet(object.isPlaying) ? Boolean(object.isPlaying) : false,
      uuid: isSet(object.uuid) ? UUID.fromJSON(object.uuid) : undefined,
      name: isSet(object.name) ? String(object.name) : "",
      artist: isSet(object.artist) ? String(object.artist) : "",
      audioOnly: isSet(object.audioOnly) ? Boolean(object.audioOnly) : false,
      duration: isSet(object.duration) ? Number(object.duration) : 0,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia): unknown {
    const obj: any = {};
    message.isPlaying !== undefined && (obj.isPlaying = message.isPlaying);
    message.uuid !== undefined && (obj.uuid = message.uuid ? UUID.toJSON(message.uuid) : undefined);
    message.name !== undefined && (obj.name = message.name);
    message.artist !== undefined && (obj.artist = message.artist);
    message.audioOnly !== undefined && (obj.audioOnly = message.audioOnly);
    message.duration !== undefined && (obj.duration = message.duration);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia {
    return NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TransportResponse_GetCurrentMedia {
    const message = createBaseNetworkAPIV1_APIV1TransportResponse_GetCurrentMedia();
    message.isPlaying = object.isPlaying ?? false;
    message.uuid = (object.uuid !== undefined && object.uuid !== null) ? UUID.fromPartial(object.uuid) : undefined;
    message.name = object.name ?? "";
    message.artist = object.artist ?? "";
    message.audioOnly = object.audioOnly ?? false;
    message.duration = object.duration ?? 0;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse(): NetworkAPIV1_APIV1TriggerResponse {
  return {
    cue: undefined,
    playlist: undefined,
    media: undefined,
    audio: undefined,
    videoInput: undefined,
    library: undefined,
    next: undefined,
    previous: undefined,
    mediaNext: undefined,
    mediaPrevious: undefined,
    audioNext: undefined,
    audioPrevious: undefined,
  };
}

export const NetworkAPIV1_APIV1TriggerResponse = {
  encode(message: NetworkAPIV1_APIV1TriggerResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cue !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_Cue.encode(message.cue, writer.uint32(10).fork()).ldelim();
    }
    if (message.playlist !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_Playlist.encode(message.playlist, writer.uint32(18).fork()).ldelim();
    }
    if (message.media !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_Media.encode(message.media, writer.uint32(26).fork()).ldelim();
    }
    if (message.audio !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_Audio.encode(message.audio, writer.uint32(34).fork()).ldelim();
    }
    if (message.videoInput !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_VideoInput.encode(message.videoInput, writer.uint32(42).fork()).ldelim();
    }
    if (message.library !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_Library.encode(message.library, writer.uint32(50).fork()).ldelim();
    }
    if (message.next !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_Next.encode(message.next, writer.uint32(58).fork()).ldelim();
    }
    if (message.previous !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_Previous.encode(message.previous, writer.uint32(66).fork()).ldelim();
    }
    if (message.mediaNext !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_MediaNext.encode(message.mediaNext, writer.uint32(74).fork()).ldelim();
    }
    if (message.mediaPrevious !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_MediaPrevious.encode(message.mediaPrevious, writer.uint32(82).fork()).ldelim();
    }
    if (message.audioNext !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_AudioNext.encode(message.audioNext, writer.uint32(90).fork()).ldelim();
    }
    if (message.audioPrevious !== undefined) {
      NetworkAPIV1_APIV1TriggerResponse_AudioPrevious.encode(message.audioPrevious, writer.uint32(98).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.cue = NetworkAPIV1_APIV1TriggerResponse_Cue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.playlist = NetworkAPIV1_APIV1TriggerResponse_Playlist.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.media = NetworkAPIV1_APIV1TriggerResponse_Media.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.audio = NetworkAPIV1_APIV1TriggerResponse_Audio.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.videoInput = NetworkAPIV1_APIV1TriggerResponse_VideoInput.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.library = NetworkAPIV1_APIV1TriggerResponse_Library.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.next = NetworkAPIV1_APIV1TriggerResponse_Next.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.previous = NetworkAPIV1_APIV1TriggerResponse_Previous.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.mediaNext = NetworkAPIV1_APIV1TriggerResponse_MediaNext.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.mediaPrevious = NetworkAPIV1_APIV1TriggerResponse_MediaPrevious.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.audioNext = NetworkAPIV1_APIV1TriggerResponse_AudioNext.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.audioPrevious = NetworkAPIV1_APIV1TriggerResponse_AudioPrevious.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1TriggerResponse {
    return {
      cue: isSet(object.cue) ? NetworkAPIV1_APIV1TriggerResponse_Cue.fromJSON(object.cue) : undefined,
      playlist: isSet(object.playlist)
        ? NetworkAPIV1_APIV1TriggerResponse_Playlist.fromJSON(object.playlist)
        : undefined,
      media: isSet(object.media) ? NetworkAPIV1_APIV1TriggerResponse_Media.fromJSON(object.media) : undefined,
      audio: isSet(object.audio) ? NetworkAPIV1_APIV1TriggerResponse_Audio.fromJSON(object.audio) : undefined,
      videoInput: isSet(object.videoInput)
        ? NetworkAPIV1_APIV1TriggerResponse_VideoInput.fromJSON(object.videoInput)
        : undefined,
      library: isSet(object.library) ? NetworkAPIV1_APIV1TriggerResponse_Library.fromJSON(object.library) : undefined,
      next: isSet(object.next) ? NetworkAPIV1_APIV1TriggerResponse_Next.fromJSON(object.next) : undefined,
      previous: isSet(object.previous)
        ? NetworkAPIV1_APIV1TriggerResponse_Previous.fromJSON(object.previous)
        : undefined,
      mediaNext: isSet(object.mediaNext)
        ? NetworkAPIV1_APIV1TriggerResponse_MediaNext.fromJSON(object.mediaNext)
        : undefined,
      mediaPrevious: isSet(object.mediaPrevious)
        ? NetworkAPIV1_APIV1TriggerResponse_MediaPrevious.fromJSON(object.mediaPrevious)
        : undefined,
      audioNext: isSet(object.audioNext)
        ? NetworkAPIV1_APIV1TriggerResponse_AudioNext.fromJSON(object.audioNext)
        : undefined,
      audioPrevious: isSet(object.audioPrevious)
        ? NetworkAPIV1_APIV1TriggerResponse_AudioPrevious.fromJSON(object.audioPrevious)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1TriggerResponse): unknown {
    const obj: any = {};
    message.cue !== undefined &&
      (obj.cue = message.cue ? NetworkAPIV1_APIV1TriggerResponse_Cue.toJSON(message.cue) : undefined);
    message.playlist !== undefined &&
      (obj.playlist = message.playlist
        ? NetworkAPIV1_APIV1TriggerResponse_Playlist.toJSON(message.playlist)
        : undefined);
    message.media !== undefined &&
      (obj.media = message.media ? NetworkAPIV1_APIV1TriggerResponse_Media.toJSON(message.media) : undefined);
    message.audio !== undefined &&
      (obj.audio = message.audio ? NetworkAPIV1_APIV1TriggerResponse_Audio.toJSON(message.audio) : undefined);
    message.videoInput !== undefined && (obj.videoInput = message.videoInput
      ? NetworkAPIV1_APIV1TriggerResponse_VideoInput.toJSON(message.videoInput)
      : undefined);
    message.library !== undefined &&
      (obj.library = message.library ? NetworkAPIV1_APIV1TriggerResponse_Library.toJSON(message.library) : undefined);
    message.next !== undefined &&
      (obj.next = message.next ? NetworkAPIV1_APIV1TriggerResponse_Next.toJSON(message.next) : undefined);
    message.previous !== undefined &&
      (obj.previous = message.previous
        ? NetworkAPIV1_APIV1TriggerResponse_Previous.toJSON(message.previous)
        : undefined);
    message.mediaNext !== undefined && (obj.mediaNext = message.mediaNext
      ? NetworkAPIV1_APIV1TriggerResponse_MediaNext.toJSON(message.mediaNext)
      : undefined);
    message.mediaPrevious !== undefined && (obj.mediaPrevious = message.mediaPrevious
      ? NetworkAPIV1_APIV1TriggerResponse_MediaPrevious.toJSON(message.mediaPrevious)
      : undefined);
    message.audioNext !== undefined && (obj.audioNext = message.audioNext
      ? NetworkAPIV1_APIV1TriggerResponse_AudioNext.toJSON(message.audioNext)
      : undefined);
    message.audioPrevious !== undefined && (obj.audioPrevious = message.audioPrevious
      ? NetworkAPIV1_APIV1TriggerResponse_AudioPrevious.toJSON(message.audioPrevious)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse {
    return NetworkAPIV1_APIV1TriggerResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1TriggerResponse {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse();
    message.cue = (object.cue !== undefined && object.cue !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_Cue.fromPartial(object.cue)
      : undefined;
    message.playlist = (object.playlist !== undefined && object.playlist !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_Playlist.fromPartial(object.playlist)
      : undefined;
    message.media = (object.media !== undefined && object.media !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_Media.fromPartial(object.media)
      : undefined;
    message.audio = (object.audio !== undefined && object.audio !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_Audio.fromPartial(object.audio)
      : undefined;
    message.videoInput = (object.videoInput !== undefined && object.videoInput !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_VideoInput.fromPartial(object.videoInput)
      : undefined;
    message.library = (object.library !== undefined && object.library !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_Library.fromPartial(object.library)
      : undefined;
    message.next = (object.next !== undefined && object.next !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_Next.fromPartial(object.next)
      : undefined;
    message.previous = (object.previous !== undefined && object.previous !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_Previous.fromPartial(object.previous)
      : undefined;
    message.mediaNext = (object.mediaNext !== undefined && object.mediaNext !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_MediaNext.fromPartial(object.mediaNext)
      : undefined;
    message.mediaPrevious = (object.mediaPrevious !== undefined && object.mediaPrevious !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_MediaPrevious.fromPartial(object.mediaPrevious)
      : undefined;
    message.audioNext = (object.audioNext !== undefined && object.audioNext !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_AudioNext.fromPartial(object.audioNext)
      : undefined;
    message.audioPrevious = (object.audioPrevious !== undefined && object.audioPrevious !== null)
      ? NetworkAPIV1_APIV1TriggerResponse_AudioPrevious.fromPartial(object.audioPrevious)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_Cue(): NetworkAPIV1_APIV1TriggerResponse_Cue {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_Cue = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_Cue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_Cue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Cue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_Cue {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_Cue): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Cue>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Cue {
    return NetworkAPIV1_APIV1TriggerResponse_Cue.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Cue>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Cue {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Cue();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_Playlist(): NetworkAPIV1_APIV1TriggerResponse_Playlist {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_Playlist = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_Playlist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_Playlist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Playlist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_Playlist {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_Playlist): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Playlist>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Playlist {
    return NetworkAPIV1_APIV1TriggerResponse_Playlist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Playlist>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Playlist {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Playlist();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_Media(): NetworkAPIV1_APIV1TriggerResponse_Media {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_Media = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_Media, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_Media {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Media();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_Media {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_Media): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Media>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Media {
    return NetworkAPIV1_APIV1TriggerResponse_Media.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Media>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Media {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Media();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_MediaNext(): NetworkAPIV1_APIV1TriggerResponse_MediaNext {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_MediaNext = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_MediaNext, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_MediaNext {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_MediaNext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_MediaNext {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_MediaNext): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_MediaNext>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_MediaNext {
    return NetworkAPIV1_APIV1TriggerResponse_MediaNext.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_MediaNext>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_MediaNext {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_MediaNext();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_MediaPrevious(): NetworkAPIV1_APIV1TriggerResponse_MediaPrevious {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_MediaPrevious = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_MediaPrevious, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_MediaPrevious {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_MediaPrevious();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_MediaPrevious {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_MediaPrevious): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_MediaPrevious>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_MediaPrevious {
    return NetworkAPIV1_APIV1TriggerResponse_MediaPrevious.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_MediaPrevious>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_MediaPrevious {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_MediaPrevious();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_Audio(): NetworkAPIV1_APIV1TriggerResponse_Audio {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_Audio = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_Audio, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_Audio {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Audio();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_Audio {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_Audio): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Audio>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Audio {
    return NetworkAPIV1_APIV1TriggerResponse_Audio.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Audio>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Audio {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Audio();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_AudioNext(): NetworkAPIV1_APIV1TriggerResponse_AudioNext {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_AudioNext = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_AudioNext, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_AudioNext {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_AudioNext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_AudioNext {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_AudioNext): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_AudioNext>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_AudioNext {
    return NetworkAPIV1_APIV1TriggerResponse_AudioNext.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_AudioNext>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_AudioNext {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_AudioNext();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_AudioPrevious(): NetworkAPIV1_APIV1TriggerResponse_AudioPrevious {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_AudioPrevious = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_AudioPrevious, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_AudioPrevious {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_AudioPrevious();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_AudioPrevious {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_AudioPrevious): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_AudioPrevious>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_AudioPrevious {
    return NetworkAPIV1_APIV1TriggerResponse_AudioPrevious.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_AudioPrevious>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_AudioPrevious {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_AudioPrevious();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_VideoInput(): NetworkAPIV1_APIV1TriggerResponse_VideoInput {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_VideoInput = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_VideoInput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_VideoInput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_VideoInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_VideoInput {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_VideoInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_VideoInput>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_VideoInput {
    return NetworkAPIV1_APIV1TriggerResponse_VideoInput.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_VideoInput>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_VideoInput {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_VideoInput();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_Library(): NetworkAPIV1_APIV1TriggerResponse_Library {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_Library = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_Library, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_Library {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Library();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_Library {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_Library): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Library>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Library {
    return NetworkAPIV1_APIV1TriggerResponse_Library.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Library>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Library {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Library();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_Next(): NetworkAPIV1_APIV1TriggerResponse_Next {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_Next = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_Next, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_Next {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Next();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_Next {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_Next): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Next>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Next {
    return NetworkAPIV1_APIV1TriggerResponse_Next.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Next>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Next {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Next();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1TriggerResponse_Previous(): NetworkAPIV1_APIV1TriggerResponse_Previous {
  return {};
}

export const NetworkAPIV1_APIV1TriggerResponse_Previous = {
  encode(_: NetworkAPIV1_APIV1TriggerResponse_Previous, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1TriggerResponse_Previous {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Previous();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1TriggerResponse_Previous {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1TriggerResponse_Previous): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Previous>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Previous {
    return NetworkAPIV1_APIV1TriggerResponse_Previous.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1TriggerResponse_Previous>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1TriggerResponse_Previous {
    const message = createBaseNetworkAPIV1_APIV1TriggerResponse_Previous();
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1VideoInputsResponse(): NetworkAPIV1_APIV1VideoInputsResponse {
  return { getAll: undefined, trigger: undefined };
}

export const NetworkAPIV1_APIV1VideoInputsResponse = {
  encode(message: NetworkAPIV1_APIV1VideoInputsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.getAll !== undefined) {
      NetworkAPIV1_APIV1VideoInputsResponse_GetAll.encode(message.getAll, writer.uint32(10).fork()).ldelim();
    }
    if (message.trigger !== undefined) {
      NetworkAPIV1_APIV1VideoInputsResponse_Trigger.encode(message.trigger, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1VideoInputsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1VideoInputsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.getAll = NetworkAPIV1_APIV1VideoInputsResponse_GetAll.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.trigger = NetworkAPIV1_APIV1VideoInputsResponse_Trigger.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1VideoInputsResponse {
    return {
      getAll: isSet(object.getAll) ? NetworkAPIV1_APIV1VideoInputsResponse_GetAll.fromJSON(object.getAll) : undefined,
      trigger: isSet(object.trigger)
        ? NetworkAPIV1_APIV1VideoInputsResponse_Trigger.fromJSON(object.trigger)
        : undefined,
    };
  },

  toJSON(message: NetworkAPIV1_APIV1VideoInputsResponse): unknown {
    const obj: any = {};
    message.getAll !== undefined &&
      (obj.getAll = message.getAll ? NetworkAPIV1_APIV1VideoInputsResponse_GetAll.toJSON(message.getAll) : undefined);
    message.trigger !== undefined &&
      (obj.trigger = message.trigger
        ? NetworkAPIV1_APIV1VideoInputsResponse_Trigger.toJSON(message.trigger)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsResponse>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1VideoInputsResponse {
    return NetworkAPIV1_APIV1VideoInputsResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsResponse>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1VideoInputsResponse {
    const message = createBaseNetworkAPIV1_APIV1VideoInputsResponse();
    message.getAll = (object.getAll !== undefined && object.getAll !== null)
      ? NetworkAPIV1_APIV1VideoInputsResponse_GetAll.fromPartial(object.getAll)
      : undefined;
    message.trigger = (object.trigger !== undefined && object.trigger !== null)
      ? NetworkAPIV1_APIV1VideoInputsResponse_Trigger.fromPartial(object.trigger)
      : undefined;
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1VideoInputsResponse_GetAll(): NetworkAPIV1_APIV1VideoInputsResponse_GetAll {
  return { inputs: [] };
}

export const NetworkAPIV1_APIV1VideoInputsResponse_GetAll = {
  encode(message: NetworkAPIV1_APIV1VideoInputsResponse_GetAll, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.inputs) {
      APIV1Identifier.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1VideoInputsResponse_GetAll {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1VideoInputsResponse_GetAll();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.inputs.push(APIV1Identifier.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkAPIV1_APIV1VideoInputsResponse_GetAll {
    return { inputs: Array.isArray(object?.inputs) ? object.inputs.map((e: any) => APIV1Identifier.fromJSON(e)) : [] };
  },

  toJSON(message: NetworkAPIV1_APIV1VideoInputsResponse_GetAll): unknown {
    const obj: any = {};
    if (message.inputs) {
      obj.inputs = message.inputs.map((e) => e ? APIV1Identifier.toJSON(e) : undefined);
    } else {
      obj.inputs = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsResponse_GetAll>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1VideoInputsResponse_GetAll {
    return NetworkAPIV1_APIV1VideoInputsResponse_GetAll.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsResponse_GetAll>, I>>(
    object: I,
  ): NetworkAPIV1_APIV1VideoInputsResponse_GetAll {
    const message = createBaseNetworkAPIV1_APIV1VideoInputsResponse_GetAll();
    message.inputs = object.inputs?.map((e) => APIV1Identifier.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNetworkAPIV1_APIV1VideoInputsResponse_Trigger(): NetworkAPIV1_APIV1VideoInputsResponse_Trigger {
  return {};
}

export const NetworkAPIV1_APIV1VideoInputsResponse_Trigger = {
  encode(_: NetworkAPIV1_APIV1VideoInputsResponse_Trigger, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NetworkAPIV1_APIV1VideoInputsResponse_Trigger {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkAPIV1_APIV1VideoInputsResponse_Trigger();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NetworkAPIV1_APIV1VideoInputsResponse_Trigger {
    return {};
  },

  toJSON(_: NetworkAPIV1_APIV1VideoInputsResponse_Trigger): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsResponse_Trigger>, I>>(
    base?: I,
  ): NetworkAPIV1_APIV1VideoInputsResponse_Trigger {
    return NetworkAPIV1_APIV1VideoInputsResponse_Trigger.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NetworkAPIV1_APIV1VideoInputsResponse_Trigger>, I>>(
    _: I,
  ): NetworkAPIV1_APIV1VideoInputsResponse_Trigger {
    const message = createBaseNetworkAPIV1_APIV1VideoInputsResponse_Trigger();
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if (tsProtoGlobalThis.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if (tsProtoGlobalThis.Buffer) {
    return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
