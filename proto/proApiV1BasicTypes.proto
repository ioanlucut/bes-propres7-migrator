syntax = "proto3";

package rv.data;

import "basicTypes.proto";
import "rvtimestamp.proto";
import "google/protobuf/wrappers.proto";

message API_v1_Identifier {
  string uuid = 1;
  string name = 2;
  uint32 index = 3;

}
message API_v1_SlideIndex {
  uint32 index = 1;
  rv.data.API_v1_Identifier presentation_id = 2;

}
message API_v1_Playlist {
  rv.data.API_v1_Identifier id = 1;
  enum API_v1_PlaylistType {
    group = 0;
    playlist = 1;
  }
  API_v1_PlaylistType type = 2;
  repeated rv.data.API_v1_Playlist children = 3;

}
message API_v1_PlaylistAndItem {
  rv.data.API_v1_Identifier playlist = 1;
  rv.data.API_v1_Identifier item = 2;

}
message API_v1_MediaPlaylistItem {
  rv.data.API_v1_Identifier id = 1;
  enum API_v1_MediaPlaylistItemType {
    audio = 0;
    image = 1;
    video = 2;
  }
  API_v1_MediaPlaylistItemType type = 2;
  string artist = 3;
  uint32 duration = 4;

}
message API_v1_PlaylistItem {
  rv.data.API_v1_Identifier id = 1;
  enum API_v1_PlaylistItemType {
    presentation = 0;
    placeholder = 1;
    header = 2;
    media = 3;
    audio = 4;
    livevideo = 5;
  }
  API_v1_PlaylistItemType type = 2;
  bool is_hidden = 3;
  bool is_pco = 4;
  rv.data.API_v1_Color header_color = 5;
  google.protobuf.UInt32Value duration = 6;

}
message API_v1_ClearGroup {
  rv.data.API_v1_Identifier id = 1;
  string icon = 2;
  rv.data.API_v1_Color tint = 3;
  enum API_v1_ClearGroupLayerType {
    music = 0;
    audio_effects = 1;
    props = 2;
    messages = 3;
    announcements = 4;
    presentation = 5;
    presentation_media = 6;
    video_input = 7;
  }
  repeated API_v1_ClearGroupLayerType layers = 4;
  bool stop_timeline_announcements = 5;
  bool stop_timeline_presentation = 6;
  bool clear_next_presentation = 7;

}
message API_v1_Message {
  rv.data.API_v1_Identifier id = 1;
  string message = 2;
  repeated rv.data.API_v1_Message.API_v1_MessageToken tokens = 3;
  rv.data.API_v1_Identifier theme = 4;

  message API_v1_MessageToken {
    string name = 1;
    oneof TokenType {
      rv.data.API_v1_Message.API_v1_MessageToken.API_v1_TextToken text = 2;
      rv.data.API_v1_Message.API_v1_MessageToken.API_v1_TimerToken timer = 3;
      rv.data.API_v1_Message.API_v1_MessageToken.API_v1_ClockToken clock = 4;
    }


    message API_v1_TextToken {
      string text = 1;

    }
    message API_v1_TimerToken {
      rv.data.API_v1_Identifier id = 1;
      bool allows_overrun = 2;
      rv.data.API_v1_TimerFormat format = 6;
      oneof TimerConfiguration {
        rv.data.API_v1_Timer.API_v1_Timer_Countdown countdown = 3;
        rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime count_down_to_time = 4;
        rv.data.API_v1_Timer.API_v1_Timer_Elapsed elapsed = 5;
      }


    }
    message API_v1_ClockToken {
      enum API_v1_ClockTokenFormat {
        none = 0;
        short = 1;
        medium = 2;
        long = 3;
        full = 4;
      }
      API_v1_ClockTokenFormat date = 1;
      API_v1_ClockTokenFormat time = 2;
      bool is_24_hours = 3;

    }
  }
}
message API_v1_Timer {
  rv.data.API_v1_Identifier id = 1;
  bool allows_overrun = 2;
  oneof TimerConfiguration {
    rv.data.API_v1_Timer.API_v1_Timer_Countdown countdown = 3;
    rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime count_down_to_time = 4;
    rv.data.API_v1_Timer.API_v1_Timer_Elapsed elapsed = 5;
  }


  message API_v1_Timer_Countdown {
    int32 duration = 1;

  }
  message API_v1_Timer_CountdownToTime {
    int32 time_of_day = 1;
    enum API_v1_TimePeriod {
      am = 0;
      pm = 1;
      is_24_hour = 2;
    }
    API_v1_TimePeriod period = 2;

  }
  message API_v1_Timer_Elapsed {
    int32 start_time = 1;
    int32 end_time = 2;
    bool has_end_time = 3;

  }
}
message API_v1_TimerFormat {
  enum API_v1_TimerUnitDisplayFormat {
    none = 0;
    short = 1;
    long = 2;
    remove_short = 3;
    remove_long = 4;
  }
  API_v1_TimerUnitDisplayFormat hour = 6;
  API_v1_TimerUnitDisplayFormat minute = 7;
  API_v1_TimerUnitDisplayFormat second = 8;
  API_v1_TimerUnitDisplayFormat millisecond = 9;

}
message API_v1_TimerValue {
  rv.data.API_v1_Identifier id = 1;
  string time = 2;
  enum API_v1_TimerState {
    stopped = 0;
    running = 1;
    complete = 2;
    overrunning = 3;
    overran = 4;
  }
  API_v1_TimerState state = 3;

}
message API_v1_Color {
  double red = 1;
  double green = 2;
  double blue = 3;
  double alpha = 4;

}
message API_v1_Look {
  rv.data.API_v1_Identifier id = 1;
  repeated rv.data.API_v1_Screen screens = 2;

}
message API_v1_Screen {
  bool video_input = 1;
  bool media = 2;
  bool slide = 3;
  bool announcements = 4;
  bool props = 5;
  bool messages = 6;
  string presentation = 7;
  string mask = 8;

}
message API_v1_Macro {
  rv.data.API_v1_Identifier id = 1;
  rv.data.API_v1_Color color = 2;

}
message API_v1_GroupMember {
  string ip = 1;
  uint32 port = 2;

}
message API_v1_GroupMemberStatus {
  string ip = 1;
  uint32 port = 2;
  string name = 3;
  enum API_v1_GroupMemberStatus_Platform {
    PLATFORM_UNKNOWN = 0;
    PLATFORM_MACOS = 1;
    PLATFORM_WIN32 = 2;
    PLATFORM_WEB = 3;
  }
  API_v1_GroupMemberStatus_Platform platform = 4;
  string os_version = 5;
  string host_description = 6;
  string api_version = 7;
  enum API_v1_GroupMemberStatus_ConnectionStatus {
    CONNECTION_STATUS_UNKNOWN = 0;
    CONNECTION_STATUS_CONNECTED = 1;
    CONNECTION_STATUS_DISCONNECTED = 2;
  }
  API_v1_GroupMemberStatus_ConnectionStatus connection_status = 8;

}
message API_v1_GroupDefinition {
  rv.data.Timestamp timestamp = 1;
  string secret = 2;
  string name = 3;
  repeated rv.data.API_v1_GroupMember members = 4;
  rv.data.UUID group_identifier = 5;

}
message API_v1_Error_Response {
  enum API_v1_Error_Type {
    NOT_FOUND = 0;
    BAD_REQUEST = 1;
    INTERNAL_ERROR = 2;
    UNAUTHORIZED = 3;
  }
  API_v1_Error_Type error = 1;

}
message API_v1_CaptureSettings {
  rv.data.UUID source = 1;
  repeated rv.data.API_v1_AudioRouting audio_routing = 2;
  oneof Destination {
    rv.data.API_v1_DiskCapture disk = 3;
    rv.data.API_v1_RTMPCapture rtmp = 4;
    rv.data.API_v1_ResiCapture resi = 5;
  }


}
message API_v1_Size {
  uint32 width = 1;
  uint32 height = 2;

}
message API_v1_AudioRouting {
  repeated uint32 map = 1;

}
message API_v1_DiskCapture {
  string file_location = 1;
  string codec = 2;
  rv.data.API_v1_Size resolution = 3;
  double frame_rate = 4;

}
message API_v1_RTMPCapture {
  string server = 1;
  string key = 2;
  string encoding = 3;
  bool save_local = 4;
  string file_location = 5;

}
message API_v1_ResiCapture {
  string event_name = 1;
  string event_description = 2;
  string destination_group = 3;
  string encoding = 4;

}
message API_v1_Presentation {
  rv.data.API_v1_Identifier id = 1;
  repeated rv.data.API_v1_Presentation.SlideGroup groups = 2;
  bool has_timeline = 3;
  string presentation_path = 4;
  enum Destination {
    presentation = 0;
    announcements = 1;
  }
  Destination destination = 5;

  message SlideGroup {
    string name = 1;
    rv.data.API_v1_Color color = 2;
    repeated rv.data.API_v1_Presentation.SlideGroup.Slide slides = 3;

    message Slide {
      bool enabled = 1;
      string notes = 2;
      string text = 3;
      string label = 5;
      rv.data.API_v1_Size size = 6;

    }
  }
}
message API_v1_StageLayoutMap {
  repeated rv.data.API_v1_StageLayoutMap.Entry entries = 1;

  message Entry {
    rv.data.API_v1_Identifier screen = 1;
    rv.data.API_v1_Identifier layout = 2;

  }
}
message API_v1_ThemeGroup {
  rv.data.API_v1_Identifier id = 1;
  repeated rv.data.API_v1_ThemeGroup groups = 2;
  repeated rv.data.API_v1_Theme themes = 3;

}
message API_v1_Theme {
  rv.data.API_v1_Identifier id = 1;
  repeated rv.data.API_v1_ThemeSlide slides = 2;

}
message API_v1_ThemeSlide {
  rv.data.API_v1_Identifier id = 1;
  rv.data.API_v1_Size size = 2;
  rv.data.API_v1_Color background = 3;

}
message API_v1_SlideDisplayDetails {
  string text = 1;
  string notes = 2;
  string uuid = 3;

}
message API_v1_ScreenConfig {
  rv.data.API_v1_Identifier id = 1;
  rv.data.API_v1_Size size = 2;
  enum API_v1_ScreenType {
    audience = 0;
    stage = 1;
  }
  API_v1_ScreenType screen_type = 3;

}
message API_v1_PropData {
  rv.data.API_v1_Identifier id = 1;
  bool is_active = 2;

}
